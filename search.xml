<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第二章）]]></title>
    <url>%2F2017%2F07%2F18%2FVue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第二章）@(taohong000 的笔记本)[慕课网, vue] [toc] 第一章 项目准备工作需求分析vue-cli脚手架安装1vue init webpack vue-music 项目目录介绍及图标字体、公共样式等资源准备src目录介绍 src api （后端请求相关代买） common （通用静态资源） fonts image js stylus base.styl （基础样式） icon.styl （图标字体文件） index.styl （样式入口文件） mixin.styl （函数） reset.styl （重置样式文件） variable.styl （变量配置） components （通用组件） router （路由相关文件） store （vuex相关代码） App.vue main.js （入口文件） variable.styl：设计都有一定的规范，保证风格统一。这个文件定义了颜色规范和字体规范。可以方便知道开发用什么样的颜色，保证开发的方便性。]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>慕课网</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[19+ 个 JavaScript 快速编程技巧 — SitePoint]]></title>
    <url>%2F2017%2F07%2F18%2F19-%E4%B8%AA-JavaScript-%E5%BF%AB%E9%80%9F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7-%E2%80%94-SitePoint%2F</url>
    <content type="text"><![CDATA[19+ 个 JavaScript 快速编程技巧 — SitePoint 本文转载自：众成翻译译者：myvin链接：http://www.zcfy.cc/article/3519原文：https://www.sitepoint.com/shorthand-javascript-techniques/ 这确实是一篇针对于基于 JavaScript 语言编程的开发者必读的文章。在过去几年我学习 JavaScript 的时候，我写下了这篇文章，并将其作为 JavaScript 快速编程技巧的一个重要参考。为了有助于理解，针对常规写法我也给出了相关的编程观点。 2017 年 6 月 14 日：这篇文章更新了一些基于 ES6 的速记写法。如果你想进一步了解 ES6 中有哪些新增的变化，可以注册 SitePoint Premium 并查看我们录制的视频A Look into ES6。 1. 三元操作符如果你想只用一行代码写出一个 if..else 表达式，那么这是一个很好的节省代码的方式。 常规写法： 1234567const x = 20;let answer;if (x &gt; 10) &#123; answer = 'is greater';&#125; else &#123; answer = 'is lesser';&#125; 速记法： 1const answer = x &gt; 10 ? 'is greater' : 'is lesser'; 你也可以像这样嵌套 if 表达式： 1const big = x &gt; 10 ? " greater 10" : x 2. 短路求值速记法当需要给另一个变量分配一个变量时，你可能需要确保变量不是 null、undefined 或者不为空。你可以写一个有多个 if 表达式的语句，你也可以使用短路求值。 常规写法： 123if (variable1 !== null || variable1 !== undefined || variable1 !== '') &#123; let variable2 = variable1;&#125; 速记法： 1const variable2 = variable1 || 'new'; 你不相信这样可以 work？那就自己测试下吧（把下面的代码复制粘贴到 es6console）： 1234567let variable1;let variable2 = variable1 || '';console.log(variable2 === ''); // prints truevariable1 = 'foo';variable2 = variable1 || '';console.log(variable2); // prints foo 3. 变量声明速记法在函数里声明变量时，如果需要同时声明多个变量，这种速记法能够给你节省大量的时间和空间。 常规写法： 123let x;let y;let z = 3; 速记法： 1let x, y, z=3; 4. If 判断变量是否存在速记法这可能会有些琐碎，但是值得一提。当需要用 if 判断一个变量是否为真时，赋值运算符有时候可以省略。 常规写法： 1if (likeJavaScript === true) 速记法： 1if (likeJavaScript) 注意：这两个例子并不是完全相等，只要 likeJavaScript 变量是一个 真值，该表达式就是成立的。 再给出一个例子。如果 “a” 不等于 true，如下： 常规写法： 1234let a;if ( a !== true ) &#123;// do something...&#125; 速记法： 1234let a;if ( !a ) &#123;// do something...&#125; 5. JavaScript 循环速记法如果你只想跑原生 JavaScript，不想依赖如 JQuery 或 lodash 这样的外部库，那这个小技巧会非常有用。 常规写法： 1for (let i = 0; i &lt; allImgs.length; i++) 速记法： 1for (let index in allImgs) Array.forEach 速记法： 12345678function logArrayElements(element, index, array) &#123; console.log("a[" + index + "] = " + element);&#125;[2, 5, 9].forEach(logArrayElements);// logs:// a[0] = 2// a[1] = 5// a[2] = 9 6. 短路求值如果我们不想为了只是判断一个变量是 null 或 undefined 就分配一个默认值而写六行代码，那么可以使用短路逻辑操作符完成同样的功能，而且只有一行代码。 常规写法： 123456let dbHost;if (process.env.DB_HOST) &#123; dbHost = process.env.DB_HOST;&#125; else &#123; dbHost = 'localhost';&#125; 速记法： 1const dbHost = process.env.DB_HOST || 'localhost'; 7. 十进制基数指数你可能随处可见这种写法。这是一种比较 fancy 的写法，省去了后面的一堆零。举个栗子，1e7 就意味着 1 后面跟着 7 个零。这是十进制基数指数的一种写法（JavaScript 会按照浮点类型去解释），和 10,000,000 是相等的。 常规写法： 1for (let i = 0; i &lt; 10000; i++) &#123;&#125; 速记法： 123456789for (let i = 0; i &lt; 1e7; i++) &#123;&#125;// All the below will evaluate to true1e0 === 1;1e1 === 10;1e2 === 100;1e3 === 1000;1e4 === 10000;1e5 === 100000; 8. 对象属性速记法在 JavaScript 中定义对象字面量非常简单。ES6 提供了一个更简单的定义对象属性的方法。如果 name 和 key 名字相同，那么就可以直接使用如下速记法。 常规写法： 1const obj = &#123; x:x, y:y &#125;; 速记法： 1const obj = &#123; x, y &#125;; 9. 箭头函数速记法经典的函数写法易于阅读，但是一旦将这样的函数放进回调中就会略显冗长，而且会造成一些困惑。 常规写法： 1234567891011function sayHello(name) &#123; console.log('Hello', name);&#125;setTimeout(function() &#123; console.log('Loaded')&#125;, 2000);list.forEach(function(item) &#123; console.log(item);&#125;); 速记法： 12345sayHello = name =&gt; console.log('Hello', name);setTimeout(() =&gt; console.log('Loaded'), 2000);list.forEach(item =&gt; console.log(item)); 这里需要注意的是：this 值在箭头函数和常规写法的函数里是完全不同的，所以那两个例子并不是严格等价的。查看 this article on arrow function syntax获取更多细节。 10. 隐性返回速记法我们经常使用 return 关键字来返回一个函数的结果。仅有一个表达式的箭头函数会隐性返回函数结果（函数必须省略大括号({})才能省略 return 关键字）。 如果要返回多行表达式（比如一个对象字面量），那么需要用 () 而不是 {} 来包裹函数体。这样可以确保代码作为一个单独的表达式被计算返回。 常规写法： 123function calcCircumference(diameter) &#123; return Math.PI * diameter&#125; 速记法： 123calcCircumference = diameter =&gt; ( Math.PI * diameter;) 11. 默认参数值你可以使用 if 表达式为函数参数定义默认值。在 ES6 中，你可以在函数声明的时候直接定义默认值。 常规写法： 1234567function volume(l, w, h) &#123; if (w === undefined) w = 3; if (h === undefined) h = 4; return l * w * h;&#125; 速记法： 123volume = (l, w = 3, h = 4 ) =&gt; (l * w * h);volume(2) //output: 24 12. 模板字面量你是不是已经厌倦了使用 &#39; + &#39; 来将多个变量拼接成一个字符串？难道就没有更简单的方式来完成吗？如果你可以使用 ES6 的话，那么恭喜你，你要做的只是使用反引号和 ${} 来包裹你的变量。 常规写法： 123const welcome = 'You have logged in as ' + first + ' ' + last + '.'const db = 'http://' + host + ':' + port + '/' + database; 速记法： 123const welcome = `You have logged in as $&#123;first&#125; $&#123;last&#125;`;const db = `http://$&#123;host&#125;:$&#123;port&#125;/$&#123;database&#125;`; 13. 解构赋值速记法如果你正在使用任意一种流行的 web 框架，那么你很有可能会使用数组或者对象字面量形式的数据在组件和 API 之间传递信息。一旦组件接收到数据对象，你就需要将其展开。 常规写法： 123456789const observable = require('mobx/observable');const action = require('mobx/action');const runInAction = require('mobx/runInAction');const store = this.props.store;const form = this.props.form;const loading = this.props.loading;const errors = this.props.errors;const entity = this.props.entity; 速记法： 123import &#123; observable, action, runInAction &#125; from 'mobx';const &#123; store, form, loading, errors, entity &#125; = this.props; 你甚至可以给变量重新分配变量名： 1const &#123; store, form, loading, errors, entity:contact &#125; = this.props; 14. 多行字符串速记法如果你需要在代码中写多行字符串，那么你可能会这样写： 常规写法： 123456const lorem = 'Lorem ipsum dolor sit amet, consectetur\n\t' + 'adipisicing elit, sed do eiusmod tempor incididunt\n\t' + 'ut labore et dolore magna aliqua. Ut enim ad minim\n\t' + 'veniam, quis nostrud exercitation ullamco laboris\n\t' + 'nisi ut aliquip ex ea commodo consequat. Duis aute\n\t' + 'irure dolor in reprehenderit in voluptate velit esse.\n\t' 但是有一种更简单的方法：使用反引号。 速记法： 123456const lorem = `Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse.` 15. 展开运算符速记展开运算符是在 ES6 中引入的，它的多种应用场景使得 JavaScript 代码使用起来更高效、更有趣。它可以用来替换某些数组函数。展开运算符写起来很简单，就是三个点。 常规写法： 1234567// joining arraysconst odd = [1, 3, 5];const nums = [2 ,4 , 6].concat(odd);// cloning arraysconst arr = [1, 2, 3, 4];const arr2 = arr.slice() 速记法： 12345678// joining arraysconst odd = [1, 3, 5 ];const nums = [2 ,4 , 6, ...odd];console.log(nums); // [ 2, 4, 6, 1, 3, 5 ]// cloning arraysconst arr = [1, 2, 3, 4];const arr2 = [...arr]; 和 concat() 函数不同，你可以在另一个数组里的任意位置插入一个数组。 12const odd = [1, 3, 5 ];const nums = [2, ...odd, 4 , 6]; 你也可以将展开运算符和 ES6 解析赋值结合起来使用： 1234const &#123; a, b, ...z &#125; = &#123; a: 1, b: 2, c: 3, d: 4 &#125;;console.log(a) // 1console.log(b) // 2console.log(z) // &#123; c: 3, d: 4 &#125; 16. 强制参数速记法如果没有传值的话，JavaScript 默认会将函数参数设置为 undefined。一些其他的编程语言会抛出警告或错误。为了强制给参数赋值，如果参数没有定义的话，你可以使用 if 表达式抛出错误，或者可以使用“强制参数速记法”。 常规写法： 123456function foo(bar) &#123; if(bar === undefined) &#123; throw new Error('Missing parameter!'); &#125; return bar;&#125; 速记法： 1234567mandatory = () =&gt; &#123; throw new Error('Missing parameter!');&#125;foo = (bar = mandatory()) =&gt; &#123; return bar;&#125; 17. Array.find 速记法如果你曾经使用原生 JavaScript 写一个查找函数，你可能会使用 for 循环。在 ES6 中，你可以使用数组的一个新方法 find()。 常规写法： 12345678910111213const pets = [ &#123; type: 'Dog', name: 'Max'&#125;, &#123; type: 'Cat', name: 'Karl'&#125;, &#123; type: 'Dog', name: 'Tommy'&#125;,]function findDog(name) &#123; for(let i = 0; i&lt;pets.length; ++i) &#123; if(pets[i].type === 'Dog' &amp;&amp; pets[i].name === name) &#123; return pets[i]; &#125; &#125;&#125; 速记法： 12pet = pets.find(pet =&gt; pet.type ==='Dog' &amp;&amp; pet.name === 'Tommy');console.log(pet); // &#123; type: 'Dog', name: 'Tommy' &#125; 18. Object [key] 速记法你知道 Foo.bar 可以写成 Foo[&#39;bar&#39;] 吧。一开始，似乎并没有原因解释说为什么应该像这样写。但是这种写法可以让你编写可重用代码。 考虑下一个验证函数的简单例子： 123456789function validate(values) &#123; if(!values.first) return false; if(!values.last) return false; return true;&#125;console.log(validate(&#123;first:'Bruce',last:'Wayne'&#125;)); // true 这个函数完美的实现了所需的功能。但是，请考虑一个场景：你有许多表单需要验证，并且不同的域有不同的验证规则。那创建一个在运行时被配置的通用验证函数岂不是更好？ 速记法： 123456789101112131415161718192021222324// object validation rulesconst schema = &#123; first: &#123; required:true &#125;, last: &#123; required:true &#125;&#125;// universal validation functionconst validate = (schema, values) =&gt; &#123; for(field in schema) &#123; if(schema[field].required) &#123; if(!values[field]) &#123; return false; &#125; &#125; &#125; return true;&#125;console.log(validate(schema, &#123;first:'Bruce'&#125;)); // falseconsole.log(validate(schema, &#123;first:'Bruce',last:'Wayne'&#125;)); // true 现在创建了一个可以在所有的表单里重用的验证函数，而不必为每个表单单独写一个特定的验证函数。 19. 双位取反运算符速记法逐位运算符是你在刚学习 JavaScript 时会学到的一个特性，但是如果你不处理二进制的话，基本上是从来都不会用上的。 但是，双位运算符有一个非常实用的使用场景：可以用来代替 Math.floor。双位取反运算符的优势在于它执行相同操作的速度更快。你可以在这里查看更多关于位运算符的知识。 常规写法： 1Math.floor(4.9) === 4 //true 速记法： 1~~4.9 === 4 //true 20. 还有其他的小技巧？我确实喜欢这些小技巧，也乐于发现更多的小技巧。如果你有什么想说的话，就直接留言吧！]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第一章）]]></title>
    <url>%2F2017%2F07%2F16%2FVue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第一章）@(课程笔记)[慕课网, vue] [toc] 第一章 课程内容介绍应用的分层逻辑结构模型(总体结构) 课程收获 了解一个中度复杂的应用开发 拆分目录 设计路由 设计数据结构 掌握vue.js的高级应用 vuex的状态管理 组件间的数据共享 在路由间跳转并传递复杂的数据 懒加载 学会组件化, 模块化的开发方式 什么时候该抽象一个组件, 该抽象基础组件还是通用组件还是应用组件 如何设计和开发一个组件 了解原生App体验交互的实现原理]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>慕课网</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scss基础]]></title>
    <url>%2F2017%2F07%2F16%2Fscss%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[scss基础@(SCSS) 找一个点看官网的demo入手，入手后边用边找对应的API。只要学会最基本的东西，如何编译，嵌套的写法，如何计算。就和学js一样，最开始只要学习变量，判断，循环，随着项目过程，不断的看api，慢慢就熟了，然后可以看一看背后的东西。只要知道是什么，和最基本的东西就行。 前端技术发展的很快，要不断的学一些新东西，这样以这些东西为基础的新东西发展出来时，才能很快知道和学习。 [TOC] 变量scss中可以定义变量，方便统一修改和维护。123456789//scss style//-----------------------------------$fontStack: Helvetica, sans-serif;$primaryColor: #333;body &#123; font-family: $fontStack; color: $primaryColor;&#125; 123456//css style//-----------------------------------body &#123; font-family: Helvetica, sans-serif; color: #333;&#125; 嵌套scss可以进行选择器的嵌套，表示层级关系，看起来很优雅整齐。 1234567891011121314151617//scss style//-----------------------------------nav &#123; ul &#123; margin: 0; padding: 0; list-style: none; &#125; li &#123; display: inline-block; &#125; a &#123; display: block; padding: 6px 12px; text-decoration: none; &#125;&#125; 1234567891011121314151617//css style//-----------------------------------nav ul &#123; margin: 0; padding: 0; list-style: none;&#125;nav li &#123; display: inline-block;&#125;nav a &#123; display: block; padding: 6px 12px; text-decoration: none;&#125; 导入123456789101112scss中如导入其他scss文件，最后编译为一个css文件，优于纯css的@import//scss style//-----------------------------------// _reset.scsshtml,body,ul,ol &#123; margin: 0; padding: 0;&#125; 12345678910//scss style//-----------------------------------// base.scss @import 'reset';body &#123; font-size: 100% Helvetica, sans-serif; background-color: #efefef;&#125; 1234567891011//css style//-----------------------------------html, body, ul, ol &#123; margin: 0; padding: 0;&#125;body &#123; background-color: #efefef; font-size: 100% Helvetica, sans-serif;&#125; mixinscss中可用mixin定义一些代码片段，且可传参数，方便日后根据需求调用。从此处理css3的前缀兼容轻松便捷。 1234567891011//scss style//-----------------------------------@mixin box-sizing ($sizing) &#123; -webkit-box-sizing:$sizing; -moz-box-sizing:$sizing; box-sizing:$sizing;&#125;.box-border&#123; border:1px solid #ccc; @include box-sizing(border-box);&#125; 12345678//css style//-----------------------------------.box-border &#123; border: 1px solid #ccc; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;&#125; 扩展/继承scss可通过@extend来实现代码组合声明，使代码更加优越简洁。 12345678910111213141516171819202122//scss style//-----------------------------------.message &#123; border: 1px solid #ccc; padding: 10px; color: #333;&#125;.success &#123; @extend .message; border-color: green;&#125;.error &#123; @extend .message; border-color: red;&#125;.warning &#123; @extend .message; border-color: yellow;&#125; 12345678910111213141516171819//css style//-----------------------------------.message, .success, .error, .warning &#123; border: 1px solid #cccccc; padding: 10px; color: #333;&#125;.success &#123; border-color: green;&#125;.error &#123; border-color: red;&#125;.warning &#123; border-color: yellow;&#125; 运算scss可进行简单的加减乘除运算等 12345678910111213//scss style//-----------------------------------.container &#123; width: 100%; &#125;article[role="main"] &#123; float: left; width: 600px / 960px * 100%;&#125;aside[role="complimentary"] &#123; float: right; width: 300px / 960px * 100%;&#125; 123456789101112131415//css style//-----------------------------------.container &#123; width: 100%;&#125;article[role="main"] &#123; float: left; width: 62.5%;&#125;aside[role="complimentary"] &#123; float: right; width: 31.25%;&#125; 颜色scss中集成了大量的颜色函数，让变换颜色更加简单。 12345678910//scss style//-----------------------------------$linkColor: #08c;a &#123; text-decoration:none; color:$linkColor; &amp;:hover&#123; color:darken($linkColor,10%); &#125;&#125; 123456789//css style//-----------------------------------a &#123; text-decoration: none; color: #0088cc;&#125;a:hover &#123; color: #006699;&#125; compasscompass由scss的核心团队成员Chris Eppstein创建，是一个非常丰富的样式框架，包括大量定义好的mixin，函数，以及对scss的扩展。]]></content>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime快捷键设置]]></title>
    <url>%2F2017%2F07%2F16%2Fsublime%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[sublime快捷键设置@(sublime)[快捷键] [TOC] 快捷键设计原则 尽量不改变原有快捷键 手指跨幅不要太大 语义化表达 相反操作用ctrl和ctrl+alt操作 快捷键配置1234567891011121314151617181920212223[ // 字母大小写 &#123; "keys": ["ctrl+k", "ctrl+u"], "command": "title_case" &#125;, &#123; "keys": ["ctrl+u", "ctrl+u"], "command": "upper_case" &#125;, &#123; "keys": ["ctrl+k", "ctrl+l"], "command": "lower_case" &#125;, // 折叠代码操作 &#123; "keys": ["ctrl+shift+["], "command": "fold" &#125;, &#123; "keys": ["ctrl+shift+]"], "command": "unfold" &#125;, &#123; "keys": ["ctrl+k", "ctrl+1"], "command": "fold_by_level", "args": &#123;"level": 1&#125; &#125;, &#123; "keys": ["ctrl+k", "ctrl+2"], "command": "fold_by_level", "args": &#123;"level": 2&#125; &#125;, &#123; "keys": ["ctrl+k", "ctrl+3"], "command": "fold_by_level", "args": &#123;"level": 3&#125; &#125;, &#123; "keys": ["ctrl+k", "ctrl+4"], "command": "fold_by_level", "args": &#123;"level": 4&#125; &#125;, &#123; "keys": ["ctrl+k", "ctrl+5"], "command": "fold_by_level", "args": &#123;"level": 5&#125; &#125;, &#123; "keys": ["ctrl+k", "ctrl+6"], "command": "fold_by_level", "args": &#123;"level": 6&#125; &#125;, &#123; "keys": ["ctrl+k", "ctrl+7"], "command": "fold_by_level", "args": &#123;"level": 7&#125; &#125;, &#123; "keys": ["ctrl+k", "ctrl+8"], "command": "fold_by_level", "args": &#123;"level": 8&#125; &#125;, &#123; "keys": ["ctrl+k", "ctrl+9"], "command": "fold_by_level", "args": &#123;"level": 9&#125; &#125;, &#123; "keys": ["ctrl+k", "ctrl+0"], "command": "unfold_all" &#125;, &#123; "keys": ["ctrl+alt+k", "ctrl+alt+0"], "command": "fold_all" &#125;, &#123; "keys": ["ctrl+k", "ctrl+j"], "command": "unfold_all" &#125;, &#123; "keys": ["ctrl+alt+k", "ctrl+alt+j"], "command": "fold_tag_attributes" &#125;,] 快捷键导航/跳转ctrl+p:根据文件名快速打开文件+@:跳转到所定义模块+#:跳转到关键字+:跳转到行 tabsctrl+shift+t:打开最近关闭的tabctrl+pgUp:逆序显示tabctrl+pgUp:顺序序显示tabctrl+w:关闭tab 分屏alt+shift+2alt+shift+1 编辑删除ctrl+x:删除行ctrl+kk:删除光标后所有内容ctrl+j:将下一行与当前行连接 移位ctrl+回车:在当前行下方另起一行ctrl+shift+回车:在当前行上方另起一行ctrl+shift+上下键:交换上下行 选中ctrl+方向键:选中ctrl+shift+左右键:以词为单位选中ctrl+shift+m:选中封闭模块内容ctrl+m:跳转到模块处ctrl+d:选中相同词ctrl+K,ctrl+d:跳过最后选中的词alt+f3:选择全部相同单词ctrl+l:选中行ctrl+shift+l 查询ctrl+f:查找ctrl+h:替换 标签ctrl+f2:设置书签f2:上一个书签shift:下一个书签ctrl+shift+f2:清除所有书签 文本操作ctrl+ku 首字母大小写ctrl+uu 大写ctrl+kl 小写 代码折叠ctrl+shift+[:折叠ctrl+shift+]:取消折叠ctrl+k, ctrl+0:取消所有折叠ctrl+alt+k, ctrl+alt+0:折叠全部ctrl+k, ctrl+j:取消所有折叠ctrl+alt+k, ctrl+alt+j:折叠所有标签]]></content>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime常用插件]]></title>
    <url>%2F2017%2F07%2F16%2Fsublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[sublime常用插件@(sublime)[插件, 初始化配置] [TOC] 设置(setting)123456789101112131415&#123; "auto_complete_triggers": [ &#123; "characters": "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.&lt;", "selector": "text.html" &#125; ], "font_size": 14, "ignored_packages": [ "Vintage" ], "tab_size": 2&#125; 插件安装插件1ctrl+shirt+p install package control 常用插件emmet介绍：仿选择器语法生成代码 docBlock介绍：自动补全注释 html/css/js prettify介绍：整理代码 CSScomb介绍：规范css，整理css顺序配置网站：http://csscomb.com/config配置： 1234567891011121314151617181920212223242526272829&#123; "node-path" : "C:\\Program Files\\nodejs.node.exe", "config": &#123; "remove-empty-rulesets": true, "always-semicolon": true, "color-case": "lower", "block-indent": "\t", "color-shorthand": true, "element-case": "lower", "eof-newline": false, "leading-zero": false, "quotes": "single", "sort-order-fallback": "abc", "space-before-colon": "", "space-after-colon": " ", "space-before-combinator": " ", "space-after-combinator": " ", "space-between-declarations": "\n", "space-before-opening-brace": " ", "space-after-opening-brace": "\n", "space-after-selector-delimiter": "\n", "space-before-selector-delimiter": "", "space-before-closing-brace": "\n", "strip-spaces": true, "tab-size": true, "unitless-zero": true, "vendor-prefix-align": true &#125;&#125; file header介绍：添加文件header jQuery介绍：jquery代码提示 Bootstrap 3 Snippets介绍：bootstrap3 代码片段 SCSS介绍：scss代码提示 ES6-Toolkit介绍：es6转es5,es6代码片段 SideBarEnhancements介绍：打开浏览器 Terminal介绍：打开命令行工具]]></content>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用命令]]></title>
    <url>%2F2017%2F07%2F16%2FLinux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[Linux常用命令@(Linux) [TOC] 命令的基本格式命令 [选项] [参数] 注意:个别命令使用不遵循此格式 当有多个选项时,可以写在一起 简化选项等于完整选项 -a 等于 –all 查询目录中内容:lsls [选项] [文件或目录]选项：-a 显示所有文件，包含隐藏文件-l 显示详细信息-d 查看目录本身属性-h 人性化显示文件大小-i 显示inode节点（储存时生成的编码，格式化硬盘时候，分成等大的内存块4k,同时生成相应的节点表） 文件处理命令目录和文件处理命令建立目录：mkdir mkdir -p [目录名]-p 递归创建命令英文原意:make directories 切换所在目录：cd cd [目录]命令英文原意:change directory 简化命令cd和cd ~进入当前用户的家目录cd - 进入上次目录cd .. 进入上一级目录cd . 进入当前目录 Ctrl+L 清屏tab 可以补全目录或命令 查询所在目录位置：pwd命令英文原意:print working directory 删除空目录：rmdir rmdir [目录名]命令英文原意:remove empty directories 删除文件或目录：rm rm -rf [目录名]命令英文原意:remove 选项：-r 删除目录-f 强制 复制命令：cp cp [选项] [原文件或目录] [目标目录]命令英文原意：copy 选项：-r 复制目录-p 连带文件属性复制-d 若源文件是链接文件,则复制链接属性-a 相当于 -pdr 剪切或改名命令：mv mv [原文件或目录] [目标目录]命令英文原意：move ll 等于 ls -l 常用目录的作用 /根目录 /bin命令保存目录（普通用户就可以读取的命令） /boot启动目录，启动相关文件 /dev设备文件保存目录 /etc配置文件保存目录 /home普通用户的家目录 /lib系统库保存目录 /mnt系统挂载目录 /media挂载目录 /root超级用户的家目录 /tmp临时目录 /sbin命令保存目录（超级用户才能使用的目录） /proc直接写入内存的 /sys /usr系统软件资源目录 /usr/bin/系统命令（普通用户） /usr/sbin/（超级用户） /var系统相关文档内容 链接命令 ln -s [原文件] [目标文件]命令英文原意：link 功能描述：生成链接文件 选项： -s 创建软链接 硬链接特征：1、拥有相同的i节点和存储block块，可以看作是同一个文件2、可通过i节点识别3、不能跨分区4、不能针对目录使用 软链接特征：1、类似Windows快捷方式2、软链接拥有自己的i节点和Block块，但是数据块中只保存原文件的文件名和i节点号，并没有实际的文件数据3、lrwxrwxrwx l 软链接4、修改任意文件，另一个文件都改变5、删除原文件，软链接不能使用 文件搜索命令文件搜索命令 locate locate 文件名在后台数据库中安文件名搜索，搜索速度更快 updatedb更新数据库 命令搜索命令 whereis 和 which whereis 命令名搜索命令所在路径及帮助文档所在位置选项：-b：只查找可执行文件-m：只查找帮助文档 which 文件名搜索命令所在路径及别名 文件搜索命令 find find [搜索范围] [搜索条件]搜索文件 find / -name install.log避免大范围搜索，会非常消耗系统资源find是在系统当中搜索符合条件的文件名。如果需要匹配，使用通配符匹配，通配符是完全匹配。 find / -iname install.log不区分大小写 find / -user install.log按照所有者搜索 find /root -nouser查找没有所有者的文件 find /var/log/ -mtime +10查找10天亲修改的文件 +10 10天以前-10 10天内10 10天当天-mtime 修改文件内容-ctime 修改文件属性-atime 文件访问时间 find . -size 25k查找文件大小是25KB的文件 -25k 小于25KB的文件25k 等于25KB的文件+25k 大于25KB的文件 find . -inum 262422查找i几点是262422的文件 find /ect -size +20k -a -size -50k查找/etc/目录下，大于20KB并且小于50KB的文件-a and 逻辑与-o or 逻辑或 find /ect -size +20k -a -size -50k -exec ls -lh {} \;查找/etc/目录下，大于20KB并且小于50KB的文件，并显示详细信息-exec/-ok 命令 {} \; 对搜索结果执行操作 字符串搜索命令 grep grep [选项] 字符串 文件名在文件当中匹配符合条件的字符串 选项：-i 忽略大小写-v 排除指定的字符串 帮助命令man 命令 查看命令拥有哪个级别的帮助man -f 命令相当于whereis 命令 举例：man -5 passwd 查看和命令相关的所有帮助man -k 命令相当于apropos 命令 选项帮助命令 –help shell内部命令帮助help shell内部命令 详细命令infoinfo 命令回车：进入子帮助页面u：进入上层页面n：进入下一个帮助小节p：进入上一个帮助小节q：退出]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL运算符和函数]]></title>
    <url>%2F2017%2F07%2F16%2FMySQL%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[MySQL运算符和函数@(MySQL)[数据库] [TOC] 字符函数 函数名称 描述 CONCAT() 字符连接 CONCAT_WS() 使用指定的分隔符进行字符连接 FORMAT() 数字格式化 LOWEER() 转换成小写字母 UPPER() 转换成大写字母 LEFT() 获取左侧字符 RIGHT() 获取右侧字符 LENGTH() 获取字符串长度 LTRIM() 删除前导空格 RTRIM() 删除后续空格 TRIM() 删除前导和后续空格 SUBSTRING() 字符串截取 [NOT] LIKE() 匹配模式 REPLACE() 字符串替换 数值运算符与函数 函数名称 描述 CEIL() 进一取整 DIV 整数除法 FLOOR() 舍一取整 MOD 取余数（取模） POWER() 幂运算 ROUND() 四舍五入 TRUNCATE() 字数截取 比较运算符与函数 函数名称 描述 [NOT] BETWEEN…AND… [不]在范围之内 [NOT] IN() [不]在列出值范围内 IS [NOT] NULL [不]为空 日期时间函数 函数名称 描述 NOW() 当前日期和时间 CURDATE() 当前日期 CURTIME() 当前时间 DATE_ADD() 日期变化 DATEDIFF() 日期差值 DATE_FORMAT() 日期格式化 信息函数 函数名称 描述 CONNECTION_ID() 连接ID DATEBASE() 当前数据库 LAST_INSERT_ID() 最后插入记录的ID号 USER() 当前用户 VERSION() 版本信息 聚合函数 函数名称 描述 AVG() 平均值 COUNT() 计数 MAX() 最大值 MIN() 最小值 SUM() 求和 加密函数 函数名称 描述 MD5() 信息摘要算法 PASSWORD() 密码算法]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bash示例和书写流程]]></title>
    <url>%2F2017%2F07%2F14%2Fbash%E7%A4%BA%E4%BE%8B%E5%92%8C%E4%B9%A6%E5%86%99%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[bash示例和书写流程新建文件test.sh1touch test.sh 添加可执行权限1$ chmod +x test.sh 编辑test.sh，test.sh内容如下：12345#!/bin/bashecho "hello bash"exit 0 说明： #!/bin/bash : 它是bash文件声明语句，表示是以/bin/bash程序执行该文件。它必须写在文件的第一行！ echo “hello bash” : 表示在终端输出“hello bash” exit 0 : 表示返回0。在bash中，0表示执行成功，其他表示失败。 执行bash脚本1234./test.sh#或者sh test.shbash test.sh 在终端输出“bash hello” 参考：Linux bash总结]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL语句]]></title>
    <url>%2F2017%2F07%2F12%2FMySQL%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[MySQL语句@(MySQL)[数据库] [TOC] 初涉MySQLMySQL的安装与配置default-character-set=utf8character-set-server=utf8 MySQL常用命令以及语法规范MySQL语句规范：关键字与函数名称全部大写；数据库名称、表名称、字段名称全部小写；SQL语句必须以分号结尾； 修改提示符：PROMPT 参数 描述 \D 完整的日期 \d 当前数据库 \h 完整的服务器名称 \u 当前用户 数据类型整型： Col1 存储范围 字节 tinyint 有符号：-128到127 （-2的7次方到 2的7次方-1） 无符号 ：0-255 （0-2的8次方-1） 1 smallint 有符号：-128到127 （-2的7次方到 2的7次方-1）无符号 ：0-255 （0-2的8次方-1） 2 mediumint 有符号：-8388608到8388608 （-2的23次方到 2的23次方-1）无符号 ：0-16777215 （0-2的24次方-1） 3 int 有符号：-2147483648到2147483648 （-2的31次方到 2的31次方-1）无符号 ：0-4294967295 （0-2的32次方-1） 4 bigint 有符号：-9223372036854775808到9223372036854775808 （-2的63次方到 2的63次方-1）无符号 ：0-18446744073709551616 （0-2的63次方-1） 8 1.整形1.1 tinyint 1字节有符号：-128到127 （-2的7次方到 2的7次方-1）无符号 ：0-255 （0-2的8次方-1） 1.2 smallint 2字节有符号：-32768到32768 （-2的15次方到 2的15次方-1）无符号 ：0-65535 （0-2的16次方-1） mediumint 3字节有符号：-8388608到8388608 （-2的23次方到 2的23次方-1）无符号 ：0-16777215 （0-2的24次方-1） int 4字节有符号：-2147483648到2147483648 （-2的31次方到 2的31次方-1）无符号 ：0-4294967295 （0-2的32次方-1） bigint 8字节 有符号：-9223372036854775808到9223372036854775808 （-2的63次方到 2的63次方-1）无符号 ：0-18446744073709551616 （0-2的63次方-1） 操作数据库创建数据库： CREATE {DATABASE | SCHEMA}[IF NOT EXISTS] db_name [[DEFAULT] CHARACTER SET [=] charset_name]; 修改数据库： ALTER {DATABASE|SCHEMA}[db_name] [DEFAULT] [CHARACTER SET [=] charset_name]; 删除数据库： DROP {DATABASE|SCHEMA}[IF EXISTS] db_name; 查看数据库： SHOW DATABASE; 警告信息： SHOW WARNINGS; SHOW CREATE DATABASE t1; ##基础操作 INSERT 插入 INSERT INTO1INSERT [INTO] table_name [(column_name,...)] &#123;VALUES|VALUE&#125; (&#123;expr|DEFAULT&#125;,...),(...),...; 此方法比较常用，可以一次性插入多条记录，并且可以输入表达式甚至是函数，但是无法进行子查询。 INSERT SET1INSERT [INTO] tb1_name SET col_name=&#123;expr|DEFAULT&#125;,...; 与第一种方式的区别在于，此方法可以使用子查询（SubQuery）;且只能一次性插入一条记录。 INSERT SELECT1INSERT [INTO] table_name [(column_name,...)] SELECT...; 此方法可以将查询结果插入到指定数据表中 举例：1INSERT test（username） SELECT username FROM users WHERE age &gt;=30; UPDATE 更新（单表）1UPDATE [LOW_PRIORITY] [IGNORE] table_reference SET col_name1=&#123;expr1|DEFAULT&#125;[,col_name2=&#123;expr2|DEFAULT&#125;]...[WHERE where_condition]; 一般来说要用WHERE指定位置，不然所有数据都会被更新. 举例：1UPDATE users SET age = age + 5 - id,sex = 0; //更新多个字段的值1UPDATE users SET age = age+ 10 WHERE id % 2=0; //更新id为偶数的位置age的值 DELETE 删除（单表）1DELETE FROM tbl_name [WHERE where_conditon]; SELECT 查找123456789SELECT select_expr [,select_expr ...] --只查找某一个函数或表达式[FROM table_references --查询表名[WHERE where_conditon] --查询条件[GROUP BY &#123;col_name|position&#125; [ASC|DESC],...] --按某个字段进行分组，相同的只显示第一个[HAVING where_conditon] --分组时，给出显示条件[ORDER BY &#123;col_name|expr|position&#125; [ASC|DESC],...] --排序[LIMIT &#123;[offset,]row_count|row_count OFFSET offset&#125;] --限制返回数量] 每一个表达式表示想要的一列，必须至少有一个多个列之间以英文逗号分隔星号( )表示所以列 tbl_name.可以表示命名表的所有列查询表达式可以使用[As]alias_name为其赋予别名别名可用于GROUP BY，ORDRE BY或HAVING子句 SELECT 字段出现顺序影响结果集出现顺序，字段别名也影响结果集字段别名。 利用GROUP BY 分组 添加分组条件 [HAVING where_condition]要么为一个聚合函数，要么出现在SELECT 条件中。（聚合函数：max(),min(),avg(),sum(),count() 永远只有一个返回结果） ##子查询和连接 子查询简介 子查询是指出现在【其他SQL语句内】的SELECT子句eg：SELECT FROM t1 WHERE column1 = (SELECT column1 FROM t2);其中，SELECT FROM t1 …称为Outer Query（外查询或者Outer Statement）SELECT column1 FROM t2 称为Sub Query（子查询） 子查询可以返回标量、一行、一列或者子查询。 使用比较运算符的子查询 子查询查询出的结果出现多个时，使用ANY\SOME（符合其中一个），ALL（全部符合）来来修饰。 [NOT] IN 的子查询=ANY 等价于 IN!=ALL或&lt;&gt;ANY等价于NOT IN 使用[NOT]EXISTS的子查询（不常用）：若子查询返回任何行，则返回TRUE，否则为FALSE。 使用INSERT…SELECT插入记录INSERT [INTO] tbl_name SET col_name={exprDEFAULT},... --可以使用子查询 INSERT [INTO] tbl_name [(col_name,...)] SELECT ... --将查询结果写入数据表 eg：DESC tdb_goods_cates; //显示出tdb_goods_cates表中的项目名称，与SHOW COLUMNS FROM tdb_goods_cates;作用相同 INSERT tdb_goods_cates(cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;//在表tdb_goods_cates中插入tdb_goods中的cate 多表更新UPDATE table_references SET col_name1={expr1|DEFAULT} [,col_name2={expr2|DEFAULT}]... [WHERE where_condition] INNER JOIN,内连接在MySQL中，JOIN, CROSS JOIN 和 INNER JOIN 是等价的。LEFT [OUTER] JOIN ,左外连接RIGHT [OUTER] JOIN,右外连接 update tdb_goods inner join tdb_goods_cates on goods_cate=cate_name set goods_cate=cate_id; 多表更新（一步到位）建表、查询、写入三合一 CREATE TABLE tdb_goods_brands ( brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT, brand_name VARCHAR(40) NOT NULL ) SELECT brand_name FROM tdb_goods GROUP BY brand_name; 多表更新 UPDATE tdb_goods INNER JOIN tdb_goods_brands ON tdb_goods.brand_name = tdb_goods_brands.brand_name SET tdb_goods.brand_name = tdb_goods_brands.brand_id; 通过ALTER TABLE语句修改数据表结构ALTER TABLE tdb_goodsCHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL; 外键，不一定是物理的外键，逻辑的外键也行，当然，物理外键更能保证数据的完整性和一致性 注意：数字类型的字段占用的空间更小，查询的效率也更高 连接语法结构MySQL在SELECT语句、多表更新、多表删除语句中支持JOIN操作。语法结构 table_reference A {[INNER|CROSS] JOIN | {LEFT|RIGHT} [OUTER] JOIN} table_reference B ON condition_expr 数据表参照table_referencetbl_name [[AS] alias] table_subquery [AS] alias数据表可以使用tbl_name AS alias_name 或 tbl_name alias_name赋予别名。table_subquery可以作为子查询使用在FROM子句中，这样的子查询必须为其赋予别名。 内连接INNER JOIN1、内连接：在MySQL中JOIN,INNER JOIN,CROSS JOIN是等价的2、外连接：LEFT JOIN左外连接；RIGHT JOIN右外连接3、连接条件：使用ON设定连接条件，也可以用WHERE代替· ON：设定连接条件· WHERE：进行结果集记录的过滤4：内连接是返回左表及右表符合连接条件的记录eg： SELECT * FROM tabA JOIN tabB ON tabA.name = tabB.name; --表示返回都含有的name值对应的字段 外连接OUTER JOIN1、LEFT JOIN：显示左表全部和左右符合连接条件的记录2、RIGHT JOIN：显示左右符合连接条件的记录和右表全部记录3、若某字段只存在某一表，则另一表的里字段返回null 多表连接SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g INNER JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id INNER JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G; 注意：INNER和INNER之间是没有逗号的 关于外连接的几点说明外连接：以左外连接为例：A LEFT JOIN B join_condition数据表B的结果集依赖于数据表A数据表A的结果集根据左连接条件依赖所有数据表(B表除外)左外连接条件决定如何检索数据表B(在没有指定WHERE条件的情况下)如果数据表A的某条记录符合WHERE条件，但是在数据表B不存在符合连接条件的记录，将生成一个所有列为空的额外的B行内连接：使用内连接查找的记录在连接数据表中不存在，并且在WHERE子句中尝试一下操作：column_name IS NULL 。如果 column_name 被指定为 NOT NULL，MySQL将在找到符合连接着条件的记录后停止搜索更多的行（查找冲突） 无极限分类表设计无限分类：即在同一张表中既有父类，又有子类。通过在分类表中再增加多一个字段标识其属于哪一个父类的 ID 来实现。可以通过对同一张数据表的自身连接来进行查询，需要对表标识别名。 查找父级对应的名称： select s.type_id ,s.type_name,p.type_name As parent_name from tdb_goods_types s left join tdb_goods_types p on s.parent_id=p.type_id; 查找子级对应的名称： select p.type_id ,p.type_name,s.type_name from tdb_goods_types p left join tdb_goods_types s on p.type_id=s.parent_id; 查找有多少子级： select p.type_id ,p.type_name,COUNT(s.type_name) child_count from tdb_goods_types p left join tdb_goods_types s on p.type_id=s.parent_id GROUP BY p.type_name ORDER BY p.type_id; 多表删除（1）多表删除，将重复记录删除，保留ID号比较小的项（2）查找重复记录 SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) &gt;= 2; （3） 删除重复记录 DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) &gt;= 2 ) AS t2 ON t1.goods_name = t2.goods_name WHERE t1.goods_id &gt; t2.goods_id; 运算符和函数字符函数 函数名称 描述 CONCAT() 字符连接 CONCAT_WS() 使用指定的分隔符进行字符连接 FORMAT() 数字格式化 LOWER() 转换成小写字母 UPPER() 转换成大写字母 LEFT() 获取左侧字符 RIGHT() 获取右侧字符 数值运算符和函数比较运算符和函数日期时间函数信息函数聚合函数加密函数]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[输出csv]]></title>
    <url>%2F2017%2F07%2F09%2F%E8%BE%93%E5%87%BAcsv%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849function exportToCsv(filename, rows) &#123; var processRow = function (row) &#123; var finalVal = ''; for (var j = 0; j &lt; row.length; j++) &#123; var innerValue = row[j] === null ? '' : row[j].toString(); if (row[j] instanceof Date) &#123; innerValue = row[j].toLocaleString(); &#125;; var result = innerValue.replace(/"/g, '""'); if (result.search(/("|,|\n)/g) &gt;= 0) result = '"' + result + '"'; if (j &gt; 0) finalVal += ','; finalVal += result; &#125; return finalVal + '\n'; &#125;; var csvFile = ''; for (var i = 0; i &lt; rows.length; i++) &#123; csvFile += processRow(rows[i]); &#125; var blob = new Blob([csvFile], &#123; type: 'text/csv;charset=utf-8;' &#125;); if (navigator.msSaveBlob) &#123; // IE 10+ navigator.msSaveBlob(blob, filename); &#125; else &#123; var link = document.createElement("a"); if (link.download !== undefined) &#123; // feature detection // Browsers that support HTML5 download attribute var url = URL.createObjectURL(blob); link.setAttribute("href", url); link.setAttribute("download", filename); link.style.visibility = 'hidden'; document.body.appendChild(link); link.click(); document.body.removeChild(link); &#125; &#125; &#125; exportToCsv('export.csv', [ ['name','description'], ['david','123'], ['jona','""'], ['a','b'],])]]></content>
  </entry>
  <entry>
    <title><![CDATA[install_ftp]]></title>
    <url>%2F2017%2F07%2F09%2Finstall-ftp%2F</url>
    <content type="text"><![CDATA[安装ftp服务安装12rpm -qa|grep vsftpyum install vsftpd -y 启动服务1service vsftpd start 添加ftp用户12adduser testpasswd test]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F11%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>