<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>10个JavaScript难点</title>
    <url>/2017/08/10/10%E4%B8%AAJavaScript%E9%9A%BE%E7%82%B9/</url>
    <content><![CDATA[<h1 id="10个JavaScript难点"><a href="#10个JavaScript难点" class="headerlink" title="10个JavaScript难点"></a>10个JavaScript难点</h1><blockquote>
<p>本文转载自：<a href="https://segmentfault.com" target="_blank" rel="noopener">segmentfault</a><br>译者：<a href="https://segmentfault.com/u/fundebug" target="_blank" rel="noopener">fundebug</a><br>链接：<a href="https://segmentfault.com/a/1190000010371988#articleHeader10" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010371988#articleHeader10</a><br>原文：<a href="http://www.infoworld.com/article/3196070/node-js/10-javascript-concepts-nodejs-programmers-must-master.html" target="_blank" rel="noopener">10 JavaScript concepts every Node.js programmer must master</a></p>
</blockquote>
<h2 id="1-立即执行函数"><a href="#1-立即执行函数" class="headerlink" title="1. 立即执行函数"></a>1. 立即执行函数</h2><p><strong>立即执行函数</strong>，即Immediately Invoked Function Expression (IIFE)，正如它的名字，就是创建函数的同时立即执行。它没有绑定任何事件，也无需等待任何异步操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 代码</span></span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p><strong>function(){…}</strong>是一个匿名函数，包围它的一对括号将其转换为一个表达式，紧跟其后的一对括号调用了这个函数。<strong>立即执行函数</strong>也可以理解为立即调用一个匿名函数。<strong>立即执行函数</strong>最常见的应用场景就是：将var变量的作用域限制于你们函数内，这样可以避免命名冲突。</p>
<h2 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2. 闭包"></a>2. 闭包</h2><p>对于闭包(closure)，当外部函数返回之后，内部函数依然可以访问外部函数的变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> N = <span class="number">0</span>; <span class="comment">// N是f1函数的局部变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) // <span class="title">f2</span>是<span class="title">f1</span>函数的内部函数，是闭包</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        N += <span class="number">1</span>; <span class="comment">// 内部函数f2中使用了外部函数f1中的变量N</span></span><br><span class="line">        <span class="built_in">console</span>.log(N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = f1();</span><br><span class="line"></span><br><span class="line">result(); <span class="comment">// 输出1</span></span><br><span class="line">result(); <span class="comment">// 输出2</span></span><br><span class="line">result(); <span class="comment">// 输出3</span></span><br></pre></td></tr></table></figure>
<p>代码中，外部函数<strong>f1</strong>只执行了一次，变量<strong>N</strong>设为<strong>0</strong>，并将内部函数<strong>f2</strong>赋值给了变量<strong>result</strong>。由于外部函数<strong>f1</strong>已经执行完毕，其内部变量<strong>N</strong>应该在内存中被清除，然而事实并不是这样：我们每次调用<strong>result</strong>的时候，发现变量<strong>N</strong>一直在内存中，并且在累加。为什么呢？这就是闭包的神奇之处了！</p>
<h2 id="使用闭包定义私有变量"><a href="#使用闭包定义私有变量" class="headerlink" title="使用闭包定义私有变量"></a>使用闭包定义私有变量</h2><p>通常，JavaScript开发者使用下划线作为私有变量的前缀。但是实际上，这些变量依然可以被访问和修改，并非真正的私有变量。这时，使用闭包可以定义真正的私有变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        name = value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Product();</span><br><span class="line">p.setName(<span class="string">"Fundebug"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(p.getName()); <span class="comment">// 输出Fundebug</span></span><br></pre></td></tr></table></figure>
<p>代码中，对象<strong>p</strong>的的<strong>name</strong>属性为私有属性，使用<strong>p.name</strong>不能直接访问。</p>
<h2 id="4-prototype"><a href="#4-prototype" class="headerlink" title="4. prototype"></a>4. prototype</h2><p>每个JavaScript构造函数都有一个<strong>prototype</strong>属性，用于设置所有实例对象需要共享的属性和方法。<strong>prototype</strong>属性不能列举。JavaScript仅支持通过<strong>prototype</strong>属性进行继承属性和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">x, y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._length = x;</span><br><span class="line">    <span class="keyword">this</span>._breadth = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rectangle.prototype.getDimensions = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        length: <span class="keyword">this</span>._length,</span><br><span class="line">        breadth: <span class="keyword">this</span>._breadth</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x.getDimensions()); <span class="comment">// &#123; length: 3, breadth: 4 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(y.getDimensions()); <span class="comment">// &#123; length: 4, breadth: 3 &#125;</span></span><br></pre></td></tr></table></figure>
<p>代码中，<strong>x</strong>和<strong>y</strong>都是构造函数<strong>Rectangle</strong>创建的对象实例，它们通过prototype继承了getDimensions方法。</p>
<h2 id="5-模块化"><a href="#5-模块化" class="headerlink" title="5. 模块化"></a>5. 模块化</h2><p>JavaScript并非模块化编程语言，至少ES6落地之前都不是。然而对于一个复杂的Web应用，模块化编程是一个最基本的要求。这时，可以使用<strong>立即执行函数</strong>来实现模块化，正如很多JS库比如<a href="https://github.com/jquery/jquery" target="_blank" rel="noopener">jQuery</a>以及我们<a href="https://fundebug.com/" target="_blank" rel="noopener">Fundebug</a>都是这样实现的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> N = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"The result is: "</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> x = a + N;</span><br><span class="line">        print(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        description: <span class="string">"This is description"</span>,</span><br><span class="line">        add: add</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.description); <span class="comment">// 输出"this is description" </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.add(<span class="number">5</span>); <span class="comment">// 输出“The result is: 10”</span></span><br></pre></td></tr></table></figure>
<p>所谓模块化，就是根据需要控制模块内属性与方法的可访问性，即私有或者公开。在代码中，module为一个独立的模块，<strong>N</strong>为其私有属性，<strong>print</strong>为其私有方法，<strong>decription</strong>为其公有属性，<strong>add</strong>为其共有方法。</p>
<h2 id="6-变量提升"><a href="#6-变量提升" class="headerlink" title="6. 变量提升"></a>6. 变量提升</h2><p>JavaScript会将所有变量和函数声明移动到它的作用域的最前面，这就是所谓的<strong>变量提升(Hoisting)</strong>。也就是说，无论你在什么地方声明变量和函数，解释器都会将它们移动到作用域的最前面。因此我们可以先使用变量和函数，而后声明它们。</p>
<p>但是，仅仅是变量声明被提升了，而变量赋值不会被提升。如果你不明白这一点，有时则会出错：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(y);  <span class="comment">// 输出undefined</span></span><br><span class="line"></span><br><span class="line">y = <span class="number">2</span>; <span class="comment">// 初始化y</span></span><br></pre></td></tr></table></figure>
<p>上面的代码等价于下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> y;  <span class="comment">// 声明y</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(y);  <span class="comment">// 输出undefined</span></span><br><span class="line"></span><br><span class="line">y = <span class="number">2</span>; <span class="comment">// 初始化y</span></span><br></pre></td></tr></table></figure>
<p>为了避免BUG，开发者应该在每个作用域开始时声明变量和函数。</p>
<h2 id="7-柯里化"><a href="#7-柯里化" class="headerlink" title="7. 柯里化"></a>7. 柯里化</h2><p>柯里化，即<strong>Currying</strong>，可以是函数变得更加灵活。我们可以一次性传入多个参数调用它；也可以只传入一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">1</span>)); <span class="comment">// 输出2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add1 = add(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add1(<span class="number">1</span>)); <span class="comment">// 输出2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add10 = add(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">1</span>)); <span class="comment">// 输出11</span></span><br></pre></td></tr></table></figure>
<p>代码中，我们可以一次性传入2个1作为参数<strong>add(1)(1)</strong>，也可以传入1个参数之后获取<strong>add1</strong>与<strong>add10</strong>函数，这样使用起来非常灵活。</p>
<h2 id="8-apply-call与bind方法"><a href="#8-apply-call与bind方法" class="headerlink" title="8. apply, call与bind方法"></a>8. apply, call与bind方法</h2><p>JavaScript开发者有必要理解<strong>apply</strong>、<strong>call</strong>与<strong>bind</strong>方法的不同点。它们的共同点是第一个参数都是<strong>this</strong>，即函数运行时依赖的上下文。</p>
<p>三者之中，<strong>call</strong>方法是最简单的，它等价于指定<strong>this</strong>值调用函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name: <span class="string">"Rahul Mhatre"</span>,</span><br><span class="line">    whatIsYourName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.whatIsYourName(); <span class="comment">// 输出"Rahul Mhatre",</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user2 = &#123;</span><br><span class="line">    name: <span class="string">"Neha Sampat"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.whatIsYourName.call(user2); <span class="comment">// 输出"Neha Sampat"</span></span><br></pre></td></tr></table></figure>
<p><strong>apply</strong>方法与<strong>call</strong>方法类似。两者唯一的不同点在于，<strong>apply</strong>方法使用数组指定参数，而<strong>call</strong>方法每个参数单独需要指定：</p>
<ul>
<li>apply(thisArg, [argsArray])</li>
<li>call(thisArg, arg1, arg2, …)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    greet: <span class="string">"Hello!"</span>,</span><br><span class="line">    greetUser: <span class="function"><span class="keyword">function</span>(<span class="params">userName</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.greet + <span class="string">" "</span> + userName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> greet1 = &#123;</span><br><span class="line">    greet: <span class="string">"Hola"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user.greetUser.call(greet1, <span class="string">"Rahul"</span>); <span class="comment">// 输出"Hola Rahul"</span></span><br><span class="line">user.greetUser.apply(greet1, [<span class="string">"Rahul"</span>]); <span class="comment">// 输出"Hola Rahul"</span></span><br></pre></td></tr></table></figure>
<p>使用<strong>bind</strong>方法，可以为函数绑定<strong>this</strong>值，然后作为一个新的函数返回：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">     greet: <span class="string">"Hello!"</span>,</span><br><span class="line">     greetUser: <span class="function"><span class="keyword">function</span>(<span class="params">userName</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.greet + <span class="string">" "</span> + userName);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> greetHola = user.greetUser.bind(&#123;<span class="attr">greet</span>: <span class="string">"Hola"</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> greetBonjour = user.greetUser.bind(&#123;<span class="attr">greet</span>: <span class="string">"Bonjour"</span>&#125;);</span><br><span class="line"></span><br><span class="line">greetHola(<span class="string">"Rahul"</span>) <span class="comment">// 输出"Hola Rahul"</span></span><br><span class="line">greetBonjour(<span class="string">"Rahul"</span>) <span class="comment">// 输出"Bonjour Rahul"</span></span><br></pre></td></tr></table></figure>
<h2 id="9-Memoization"><a href="#9-Memoization" class="headerlink" title="9. Memoization"></a>9. Memoization</h2><p><strong>Memoization</strong>用于优化比较耗时的计算，通过将计算结果缓存到内存中，这样对于同样的输入值，下次只需要中内存中读取结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memoizeFunction</span>(<span class="params">func</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (cache[key])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> val = func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            cache[key] = val;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fibonacci = memoizeFunction(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) ? n : fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">100</span>)); <span class="comment">// 输出354224848179262000000</span></span><br><span class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">100</span>)); <span class="comment">// 输出354224848179262000000</span></span><br></pre></td></tr></table></figure>
<p>代码中，第2次计算<strong>fibonacci(100)</strong>则只需要在内存中直接读取结果。</p>
<h2 id="10-函数重载"><a href="#10-函数重载" class="headerlink" title="10. 函数重载"></a>10. 函数重载</h2><p>所谓<strong>函数重载(method overloading)</strong>，就是函数名称一样，但是输入输出不一样。或者说，允许某个函数有各种不同输入，根据不同的输入，返回不同的结果。凭直觉，<strong>函数重载</strong>可以通过<strong>if…else</strong>或者<strong>switch</strong>实现，这就不去管它了。jQuery之父John Resig提出了一个非常巧(bian)妙(tai)的方法，利用了闭包。</p>
<p>从效果上来说，<strong>people</strong>对象的<strong>find</strong>方法允许3种不同的输入: 0个参数时，返回所有人名；1个参数时，根据firstName查找人名并返回；2个参数时，根据完整的名称查找人名并返回。</p>
<p>难点在于，<strong>people.find</strong>只能绑定一个函数，那它为何可以处理3种不同的输入呢？它不可能同时绑定3个函数<strong>find0,find1</strong>与<strong>find2</strong>啊！这里的关键在于<strong>old</strong>属性。</p>
<p>由<strong>addMethod</strong>函数的调用顺序可知，<strong>people.find</strong>最终绑定的是<strong>find2</strong>函数。然而，在绑定<strong>find2</strong>时，<strong>old</strong>为<strong>find1</strong>；同理，绑定<strong>find1</strong>时，<strong>old</strong>为<strong>find0</strong>。3个函数<strong>find0</strong>,<strong>find1</strong>与<strong>find2</strong>就这样通过闭包链接起来了。</p>
<p>根据<strong>addMethod</strong>的逻辑，当<strong>f.length</strong>与<strong>arguments.length</strong>不匹配时，就会去调用<strong>old</strong>，直到匹配为止。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMethod</span>(<span class="params">object, name, f</span>)</span></span><br><span class="line"><span class="function"></span>&#123;　　</span><br><span class="line">    <span class="keyword">var</span> old = object[name];　　</span><br><span class="line">    object[name] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// f.length为函数定义时的参数个数</span></span><br><span class="line">        <span class="comment">// arguments.length为函数调用时的参数个数　　　　</span></span><br><span class="line">        <span class="keyword">if</span> (f.length === <span class="built_in">arguments</span>.length)</span><br><span class="line">        &#123;　　</span><br><span class="line">            <span class="keyword">return</span> f.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);　　　　</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> old === <span class="string">"function"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> old.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);　　　　</span><br><span class="line">        &#125;　　</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不传参数时，返回所有name</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find0</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;　　</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.names;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传一个参数时，返回firstName匹配的name</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find1</span>(<span class="params">firstName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;　　</span><br><span class="line">    <span class="keyword">var</span> result = [];　　</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.names.length; i++)</span><br><span class="line">    &#123;　　　　</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.names[i].indexOf(firstName) === <span class="number">0</span>)</span><br><span class="line">        &#123;　　　　　　</span><br><span class="line">            result.push(<span class="keyword">this</span>.names[i]);　　　　</span><br><span class="line">        &#125;　　</span><br><span class="line">    &#125;　　</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传两个参数时，返回firstName和lastName都匹配的name</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find2</span>(<span class="params">firstName, lastName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;　</span><br><span class="line">    <span class="keyword">var</span> result = [];　　</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.names.length; i++)</span><br><span class="line">    &#123;　　　　</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.names[i] === (firstName + <span class="string">" "</span> + lastName))</span><br><span class="line">        &#123;　　　　　　</span><br><span class="line">            result.push(<span class="keyword">this</span>.names[i]);　　　　</span><br><span class="line">        &#125;　　</span><br><span class="line">    &#125;　　</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> people = &#123;　　</span><br><span class="line">    names: [<span class="string">"Dean Edwards"</span>, <span class="string">"Alex Russell"</span>, <span class="string">"Dean Tom"</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addMethod(people, <span class="string">"find"</span>, find0);</span><br><span class="line">addMethod(people, <span class="string">"find"</span>, find1);</span><br><span class="line">addMethod(people, <span class="string">"find"</span>, find2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(people.find()); <span class="comment">// 输出["Dean Edwards", "Alex Russell", "Dean Tom"]</span></span><br><span class="line"><span class="built_in">console</span>.log(people.find(<span class="string">"Dean"</span>)); <span class="comment">// 输出["Dean Edwards", "Dean Tom"]</span></span><br><span class="line"><span class="built_in">console</span>.log(people.find(<span class="string">"Dean"</span>, <span class="string">"Edwards"</span>)); <span class="comment">// 输出["Dean Edwards"]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM事件</title>
    <url>/2017/08/24/DOM%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="DOM事件"><a href="#DOM事件" class="headerlink" title="DOM事件"></a>DOM事件</h1><h2 id="DOM事件的级别"><a href="#DOM事件的级别" class="headerlink" title="DOM事件的级别"></a>DOM事件的级别</h2><p>DOM0, element.onclick = function(){}<br>DOM2, element.addEventListener(’click’, ()=&gt;{}, false)<br>DOM3, element.addEventListener(‘keyup’, ()=&gt;{}, false)</p>
<h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><p>捕获阶段，目标阶段，冒泡阶段。</p>
<h2 id="描述DOM事件捕获的具体流程"><a href="#描述DOM事件捕获的具体流程" class="headerlink" title="描述DOM事件捕获的具体流程"></a>描述DOM事件捕获的具体流程</h2><p>window –&gt; document —&gt;html —&gt; body —&gt; …… —&gt; target</p>
<p>如何获取html标签:<br>document.body ==&gt; 获取body<br>document.documentElement ==&gt; 获取html</p>
<h2 id="Event对象的常见应用"><a href="#Event对象的常见应用" class="headerlink" title="Event对象的常见应用"></a>Event对象的常见应用</h2><p>event.preventDefault()<br>event.stopPropagation()<br>event.stopImmediatePropagation()<br>event.currentTarget<br>event.target</p>
<p> target，currentTarget和this三者的区别</p>
<blockquote>
<p>target在事件流的目标阶段；<br>currentTarget在事件流的捕获，目标及冒泡阶段。<br>只有当事件流处在目标阶段的时候，两个的指向才是一样的， 而当处于捕获和冒泡阶段的时候，target指向被单击的对象而currentTarget指向当前事件活动的对象(注册该事件的对象)（一般为父级）。this指向永远和currentTarget指向一致（只考虑this的普通函数调用）。</p>
</blockquote>
<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建自定义事件</span></span><br><span class="line"><span class="keyword">var</span> eve = <span class="keyword">new</span> Event(<span class="string">'custome'</span>);</span><br><span class="line">ev.addEventListener(<span class="string">'custome'</span>, ()=&gt;&#123;&#125;)</span><br><span class="line"><span class="comment">// 触发自定义事件</span></span><br><span class="line">ev.dispatch(eve)</span><br></pre></td></tr></table></figure>
<p>JS(原生)事件委托：为动态创建的节点绑定事件<br><a href="http://www.cnblogs.com/chengyanfen/p/3716163.html" target="_blank" rel="noopener">JS(原生)事件委托：为动态创建的节点绑定事件</a></p>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>19+ 个 JavaScript 快速编程技巧 — SitePoint</title>
    <url>/2017/07/18/19-%E4%B8%AA-JavaScript-%E5%BF%AB%E9%80%9F%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7-%E2%80%94-SitePoint/</url>
    <content><![CDATA[<h1 id="19-个-JavaScript-快速编程技巧-—-SitePoint"><a href="#19-个-JavaScript-快速编程技巧-—-SitePoint" class="headerlink" title="19+ 个 JavaScript 快速编程技巧 — SitePoint"></a>19+ 个 JavaScript 快速编程技巧 — SitePoint</h1><blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="noopener">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@myvin" target="_blank" rel="noopener">myvin</a><br>链接：<a href="http://www.zcfy.cc/article/3519" target="_blank" rel="noopener">http://www.zcfy.cc/article/3519</a><br>原文：<a href="https://www.sitepoint.com/shorthand-javascript-techniques/" target="_blank" rel="noopener">https://www.sitepoint.com/shorthand-javascript-techniques/</a></p>
</blockquote>
<p><img src="http://p0.qhimg.com/t015c23b70ee9d2ef75.jpg" alt="improve-your-javascript"></p>
<p><strong>这确实是一篇针对于基于 JavaScript 语言编程的开发者必读的文章</strong>。在过去几年我学习 JavaScript 的时候，我写下了这篇文章，并将其作为 JavaScript 快速编程技巧的一个重要参考。为了有助于理解，针对常规写法我也给出了相关的编程观点。</p>
<blockquote>
<p><strong>2017 年 6 月 14 日</strong>：这篇文章更新了一些基于 ES6 的速记写法。如果你想进一步了解 ES6 中有哪些新增的变化，可以注册 SitePoint Premium 并查看我们录制的视频<a href="https://www.sitepoint.com/premium/screencasts/a-look-into-es2016" target="_blank" rel="noopener">A Look into ES6</a>。</p>
</blockquote>
<h2 id="1-三元操作符"><a href="#1-三元操作符" class="headerlink" title="1. 三元操作符"></a>1. 三元操作符</h2><p>如果你想只用一行代码写出一个 if..else 表达式，那么这是一个很好的节省代码的方式。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> answer;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    answer = <span class="string">'is greater'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    answer = <span class="string">'is lesser'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> answer = x &gt; <span class="number">10</span> ? <span class="string">'is greater'</span> : <span class="string">'is lesser'</span>;</span><br></pre></td></tr></table></figure>
<p>你也可以像这样嵌套 if 表达式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> big = x &gt; <span class="number">10</span> ? <span class="string">" greater 10"</span> : x</span><br></pre></td></tr></table></figure>
<h2 id="2-短路求值速记法"><a href="#2-短路求值速记法" class="headerlink" title="2. 短路求值速记法"></a>2. 短路求值速记法</h2><p>当需要给另一个变量分配一个变量时，你可能需要确保变量不是 null、undefined 或者不为空。你可以写一个有多个 if 表达式的语句，你也可以使用短路求值。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (variable1 !== <span class="literal">null</span> || variable1 !== <span class="literal">undefined</span> || variable1 !== <span class="string">''</span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> variable2 = variable1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> variable2 = variable1  || <span class="string">'new'</span>;</span><br></pre></td></tr></table></figure>
<p>你不相信这样可以 work？那就自己测试下吧（把下面的代码复制粘贴到 <a href="https://es6console.com/" target="_blank" rel="noopener">es6console</a>）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> variable1;</span><br><span class="line"><span class="keyword">let</span> variable2 = variable1  || <span class="string">''</span>;</span><br><span class="line"><span class="built_in">console</span>.log(variable2 === <span class="string">''</span>); <span class="comment">// prints true</span></span><br><span class="line"></span><br><span class="line">variable1 = <span class="string">'foo'</span>;</span><br><span class="line">variable2 = variable1  || <span class="string">''</span>;</span><br><span class="line"><span class="built_in">console</span>.log(variable2); <span class="comment">// prints foo</span></span><br></pre></td></tr></table></figure>
<h2 id="3-变量声明速记法"><a href="#3-变量声明速记法" class="headerlink" title="3. 变量声明速记法"></a>3. 变量声明速记法</h2><p>在函数里声明变量时，如果需要同时声明多个变量，这种速记法能够给你节省大量的时间和空间。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="keyword">let</span> y;</span><br><span class="line"><span class="keyword">let</span> z = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x, y, z=<span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<h2 id="4-If-判断变量是否存在速记法"><a href="#4-If-判断变量是否存在速记法" class="headerlink" title="4. If 判断变量是否存在速记法"></a>4. If 判断变量是否存在速记法</h2><p>这可能会有些琐碎，但是值得一提。当需要用 if 判断一个变量是否为真时，赋值运算符有时候可以省略。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (likeJavaScript === <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (likeJavaScript)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong>这两个例子并不是完全相等，只要 <code>likeJavaScript</code> 变量是一个 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy" target="_blank" rel="noopener">真值</a>，该表达式就是成立的。</p>
</blockquote>
<p>再给出一个例子。如果 “a” 不等于 true，如下：</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">if</span> ( a !== <span class="literal">true</span> ) &#123;</span><br><span class="line"><span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">if</span> ( !a ) &#123;</span><br><span class="line"><span class="comment">// do something...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-JavaScript-循环速记法"><a href="#5-JavaScript-循环速记法" class="headerlink" title="5. JavaScript 循环速记法"></a>5. JavaScript 循环速记法</h2><p>如果你只想跑原生 JavaScript，不想依赖如 JQuery 或 lodash 这样的外部库，那这个小技巧会非常有用。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; allImgs.length; i++)</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> allImgs)</span><br></pre></td></tr></table></figure>
<p>Array.forEach 速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logArrayElements</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a["</span> + index + <span class="string">"] = "</span> + element);</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>].forEach(logArrayElements);</span><br><span class="line"><span class="comment">// logs:</span></span><br><span class="line"><span class="comment">// a[0] = 2</span></span><br><span class="line"><span class="comment">// a[1] = 5</span></span><br><span class="line"><span class="comment">// a[2] = 9</span></span><br></pre></td></tr></table></figure>
<h2 id="6-短路求值"><a href="#6-短路求值" class="headerlink" title="6. 短路求值"></a>6. 短路求值</h2><p>如果我们不想为了只是判断一个变量是 null 或 undefined 就分配一个默认值而写六行代码，那么可以使用短路逻辑操作符完成同样的功能，而且只有一行代码。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dbHost;</span><br><span class="line"><span class="keyword">if</span> (process.env.DB_HOST) &#123;</span><br><span class="line">  dbHost = process.env.DB_HOST;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  dbHost = <span class="string">'localhost'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dbHost = process.env.DB_HOST || <span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure>
<h2 id="7-十进制基数指数"><a href="#7-十进制基数指数" class="headerlink" title="7. 十进制基数指数"></a>7. 十进制基数指数</h2><p>你可能随处可见这种写法。这是一种比较 fancy 的写法，省去了后面的一堆零。举个栗子，1e7 就意味着 1 后面跟着 7 个零。这是十进制基数指数的一种写法（JavaScript 会按照浮点类型去解释），和 10,000,000 是相等的。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1e7</span>; i++) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// All the below will evaluate to true</span></span><br><span class="line"><span class="number">1e0</span> === <span class="number">1</span>;</span><br><span class="line"><span class="number">1e1</span> === <span class="number">10</span>;</span><br><span class="line"><span class="number">1e2</span> === <span class="number">100</span>;</span><br><span class="line"><span class="number">1e3</span> === <span class="number">1000</span>;</span><br><span class="line"><span class="number">1e4</span> === <span class="number">10000</span>;</span><br><span class="line"><span class="number">1e5</span> === <span class="number">100000</span>;</span><br></pre></td></tr></table></figure>
<h2 id="8-对象属性速记法"><a href="#8-对象属性速记法" class="headerlink" title="8. 对象属性速记法"></a>8. 对象属性速记法</h2><p>在 JavaScript 中定义对象字面量非常简单。ES6 提供了一个更简单的定义对象属性的方法。如果 name 和 key 名字相同，那么就可以直接使用如下速记法。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>:x, <span class="attr">y</span>:y &#125;;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; x, y &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="9-箭头函数速记法"><a href="#9-箭头函数速记法" class="headerlink" title="9. 箭头函数速记法"></a>9. 箭头函数速记法</h2><p>经典的函数写法易于阅读，但是一旦将这样的函数放进回调中就会略显冗长，而且会造成一些困惑。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Loaded'</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sayHello = <span class="function"><span class="params">name</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hello'</span>, name);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Loaded'</span>), <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item));</span><br></pre></td></tr></table></figure>
<p>这里需要注意的是：<code>this</code> 值在箭头函数和常规写法的函数里是完全不同的，所以那两个例子并不是严格等价的。查看 <a href="https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/" target="_blank" rel="noopener">this article on arrow function syntax</a>获取更多细节。</p>
<h2 id="10-隐性返回速记法"><a href="#10-隐性返回速记法" class="headerlink" title="10. 隐性返回速记法"></a>10. 隐性返回速记法</h2><p>我们经常使用 return 关键字来返回一个函数的结果。仅有一个表达式的箭头函数会隐性返回函数结果（函数必须省略大括号(<code>{}</code>)才能省略 return 关键字）。</p>
<p>如果要返回多行表达式（比如一个对象字面量），那么需要用 <code>()</code> 而不是 <code>{}</code> 来包裹函数体。这样可以确保代码作为一个单独的表达式被计算返回。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcCircumference</span>(<span class="params">diameter</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * diameter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">calcCircumference = <span class="function"><span class="params">diameter</span> =&gt;</span> (</span><br><span class="line">  <span class="built_in">Math</span>.PI * diameter;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="11-默认参数值"><a href="#11-默认参数值" class="headerlink" title="11. 默认参数值"></a>11. 默认参数值</h2><p>你可以使用 if 表达式为函数参数定义默认值。在 ES6 中，你可以在函数声明的时候直接定义默认值。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params">l, w, h</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (w === <span class="literal">undefined</span>)</span><br><span class="line">    w = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> (h === <span class="literal">undefined</span>)</span><br><span class="line">    h = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">return</span> l * w * h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">volume = <span class="function">(<span class="params">l, w = <span class="number">3</span>, h = <span class="number">4</span> </span>) =&gt;</span> (l * w * h);</span><br><span class="line"></span><br><span class="line">volume(<span class="number">2</span>) <span class="comment">//output: 24</span></span><br></pre></td></tr></table></figure>
<h2 id="12-模板字面量"><a href="#12-模板字面量" class="headerlink" title="12. 模板字面量"></a>12. 模板字面量</h2><p>你是不是已经厌倦了使用 <code>&#39; + &#39;</code> 来将多个变量拼接成一个字符串？难道就没有更简单的方式来完成吗？如果你可以使用 ES6 的话，那么恭喜你，你要做的只是使用反引号和 <code>${}</code> 来包裹你的变量。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> welcome = <span class="string">'You have logged in as '</span> + first + <span class="string">' '</span> + last + <span class="string">'.'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = <span class="string">'http://'</span> + host + <span class="string">':'</span> + port + <span class="string">'/'</span> + database;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> welcome = <span class="string">`You have logged in as <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = <span class="string">`http://<span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>/<span class="subst">$&#123;database&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>
<h2 id="13-解构赋值速记法"><a href="#13-解构赋值速记法" class="headerlink" title="13. 解构赋值速记法"></a>13. 解构赋值速记法</h2><p>如果你正在使用任意一种流行的 web 框架，那么你很有可能会使用数组或者对象字面量形式的数据在组件和 API 之间传递信息。一旦组件接收到数据对象，你就需要将其展开。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observable = <span class="built_in">require</span>(<span class="string">'mobx/observable'</span>);</span><br><span class="line"><span class="keyword">const</span> action = <span class="built_in">require</span>(<span class="string">'mobx/action'</span>);</span><br><span class="line"><span class="keyword">const</span> runInAction = <span class="built_in">require</span>(<span class="string">'mobx/runInAction'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">this</span>.props.store;</span><br><span class="line"><span class="keyword">const</span> form = <span class="keyword">this</span>.props.form;</span><br><span class="line"><span class="keyword">const</span> loading = <span class="keyword">this</span>.props.loading;</span><br><span class="line"><span class="keyword">const</span> errors = <span class="keyword">this</span>.props.errors;</span><br><span class="line"><span class="keyword">const</span> entity = <span class="keyword">this</span>.props.entity;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action, runInAction &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; store, form, loading, errors, entity &#125; = <span class="keyword">this</span>.props;</span><br></pre></td></tr></table></figure>
<p>你甚至可以给变量重新分配变量名：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; store, form, loading, errors, <span class="attr">entity</span>:contact &#125; = <span class="keyword">this</span>.props;</span><br></pre></td></tr></table></figure>
<h2 id="14-多行字符串速记法"><a href="#14-多行字符串速记法" class="headerlink" title="14. 多行字符串速记法"></a>14. 多行字符串速记法</h2><p>如果你需要在代码中写多行字符串，那么你可能会这样写：</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lorem = <span class="string">'Lorem ipsum dolor sit amet, consectetur\n\t'</span></span><br><span class="line">    + <span class="string">'adipisicing elit, sed do eiusmod tempor incididunt\n\t'</span></span><br><span class="line">    + <span class="string">'ut labore et dolore magna aliqua. Ut enim ad minim\n\t'</span></span><br><span class="line">    + <span class="string">'veniam, quis nostrud exercitation ullamco laboris\n\t'</span></span><br><span class="line">    + <span class="string">'nisi ut aliquip ex ea commodo consequat. Duis aute\n\t'</span></span><br><span class="line">    + <span class="string">'irure dolor in reprehenderit in voluptate velit esse.\n\t'</span></span><br></pre></td></tr></table></figure>
<p>但是有一种更简单的方法：使用反引号。</p>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lorem = <span class="string">`Lorem ipsum dolor sit amet, consectetur</span></span><br><span class="line"><span class="string">    adipisicing elit, sed do eiusmod tempor incididunt</span></span><br><span class="line"><span class="string">    ut labore et dolore magna aliqua. Ut enim ad minim</span></span><br><span class="line"><span class="string">    veniam, quis nostrud exercitation ullamco laboris</span></span><br><span class="line"><span class="string">    nisi ut aliquip ex ea commodo consequat. Duis aute</span></span><br><span class="line"><span class="string">    irure dolor in reprehenderit in voluptate velit esse.`</span></span><br></pre></td></tr></table></figure>
<h2 id="15-展开运算符速记"><a href="#15-展开运算符速记" class="headerlink" title="15. 展开运算符速记"></a>15. 展开运算符速记</h2><p><strong>展开运算符</strong>是在 ES6 中引入的，它的多种应用场景使得 JavaScript 代码使用起来更高效、更有趣。它可以用来替换某些数组函数。展开运算符写起来很简单，就是三个点。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// joining arrays</span></span><br><span class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>].concat(odd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cloning arrays</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = arr.slice()</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// joining arrays</span></span><br><span class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span> ,<span class="number">4</span> , <span class="number">6</span>, ...odd];</span><br><span class="line"><span class="built_in">console</span>.log(nums); <span class="comment">// [ 2, 4, 6, 1, 3, 5 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// cloning arrays</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [...arr];</span><br></pre></td></tr></table></figure>
<p>和 <code>concat()</code> 函数不同，你可以在另一个数组里的任意位置插入一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> odd = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span> ];</span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span>, ...odd, <span class="number">4</span> , <span class="number">6</span>];</span><br></pre></td></tr></table></figure>
<p>你也可以将展开运算符和 ES6 解析赋值结合起来使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; a, b, ...z &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(z) <span class="comment">// &#123; c: 3, d: 4 &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="16-强制参数速记法"><a href="#16-强制参数速记法" class="headerlink" title="16. 强制参数速记法"></a>16. 强制参数速记法</h2><p>如果没有传值的话，JavaScript 默认会将函数参数设置为 <code>undefined</code>。一些其他的编程语言会抛出警告或错误。为了强制给参数赋值，如果参数没有定义的话，你可以使用 <code>if</code> 表达式抛出错误，或者可以使用“强制参数速记法”。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">bar</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(bar === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mandatory = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Missing parameter!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo = <span class="function">(<span class="params">bar = mandatory(</span>)) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="17-Array-find-速记法"><a href="#17-Array-find-速记法" class="headerlink" title="17. Array.find 速记法"></a>17. Array.find 速记法</h2><p>如果你曾经使用原生 JavaScript 写一个查找函数，你可能会使用 for 循环。在 ES6 中，你可以使用数组的一个新方法 <code>find()</code>。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pets = [</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Dog'</span>, <span class="attr">name</span>: <span class="string">'Max'</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Cat'</span>, <span class="attr">name</span>: <span class="string">'Karl'</span>&#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'Dog'</span>, <span class="attr">name</span>: <span class="string">'Tommy'</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findDog</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;pets.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span>(pets[i].type === <span class="string">'Dog'</span> &amp;&amp; pets[i].name === name) &#123;</span><br><span class="line">      <span class="keyword">return</span> pets[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pet = pets.find(<span class="function"><span class="params">pet</span> =&gt;</span> pet.type ===<span class="string">'Dog'</span> &amp;&amp; pet.name === <span class="string">'Tommy'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pet); <span class="comment">// &#123; type: 'Dog', name: 'Tommy' &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="18-Object-key-速记法"><a href="#18-Object-key-速记法" class="headerlink" title="18. Object [key] 速记法"></a>18. Object [key] 速记法</h2><p>你知道 <code>Foo.bar</code> 可以写成 <code>Foo[&#39;bar&#39;]</code> 吧。一开始，似乎并没有原因解释说为什么应该像这样写。但是这种写法可以让你编写可重用代码。</p>
<p>考虑下一个验证函数的简单例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate</span>(<span class="params">values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!values.first)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span>(!values.last)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(validate(&#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>,<span class="attr">last</span>:<span class="string">'Wayne'</span>&#125;)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>这个函数完美的实现了所需的功能。但是，请考虑一个场景：你有许多表单需要验证，并且不同的域有不同的验证规则。那创建一个在运行时被配置的通用验证函数岂不是更好？</p>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// object validation rules</span></span><br><span class="line"><span class="keyword">const</span> schema = &#123;</span><br><span class="line">  first: &#123;</span><br><span class="line">    required:<span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  last: &#123;</span><br><span class="line">    required:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// universal validation function</span></span><br><span class="line"><span class="keyword">const</span> validate = <span class="function">(<span class="params">schema, values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span>(field <span class="keyword">in</span> schema) &#123;</span><br><span class="line">    <span class="keyword">if</span>(schema[field].required) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!values[field]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(validate(schema, &#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>&#125;)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(validate(schema, &#123;<span class="attr">first</span>:<span class="string">'Bruce'</span>,<span class="attr">last</span>:<span class="string">'Wayne'</span>&#125;)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>现在创建了一个可以在所有的表单里重用的验证函数，而不必为每个表单单独写一个特定的验证函数。</p>
<h2 id="19-双位取反运算符速记法"><a href="#19-双位取反运算符速记法" class="headerlink" title="19. 双位取反运算符速记法"></a>19. 双位取反运算符速记法</h2><p>逐位运算符是你在刚学习 JavaScript 时会学到的一个特性，但是如果你不处理二进制的话，基本上是从来都不会用上的。</p>
<p>但是，双位运算符有一个非常实用的使用场景：可以用来代替 <code>Math.floor</code>。双位取反运算符的优势在于它执行相同操作的速度更快。你可以在<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank" rel="noopener">这里</a>查看更多关于位运算符的知识。</p>
<p>常规写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">4.9</span>) === <span class="number">4</span>  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>速记法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">~~<span class="number">4.9</span> === <span class="number">4</span>  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<h2 id="20-还有其他的小技巧？"><a href="#20-还有其他的小技巧？" class="headerlink" title="20. 还有其他的小技巧？"></a>20. 还有其他的小技巧？</h2><p>我确实喜欢这些小技巧，也乐于发现更多的小技巧。如果你有什么想说的话，就直接留言吧！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>My New Post</title>
    <url>/2016/11/28/My-New-Post/</url>
    <content><![CDATA[<p>#111</p>
<p>##2222</p>
]]></content>
      <tags>
        <tag>111 222</tag>
      </tags>
  </entry>
  <entry>
    <title>IE针对Ajax请求结果的缓存的解决办法</title>
    <url>/2017/11/08/IE%E9%92%88%E5%AF%B9Ajax%E8%AF%B7%E6%B1%82%E7%BB%93%E6%9E%9C%E7%9A%84%E7%BC%93%E5%AD%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="IE针对Ajax请求结果的缓存的解决办法"><a href="#IE针对Ajax请求结果的缓存的解决办法" class="headerlink" title="IE针对Ajax请求结果的缓存的解决办法"></a>IE针对Ajax请求结果的缓存的解决办法</h1><blockquote>
<p>本文转载自：<a href="https://www.cnblogs.com/artech/archive/2013/01/03/cache-4-ie.html" target="_blank" rel="noopener">https://www.cnblogs.com/artech/archive/2013/01/03/cache-4-ie.html</a></p>
</blockquote>
<p>在默认情况下，IE会针对请求地址缓存Ajax请求的结果。换句话说，在缓存过期之前，针对相同地址发起的多个Ajax请求，只有第一次会真正发送到服务端。在某些情况下，这种默认的缓存机制并不是我们希望的（比如获取实时数据），这篇文章就来简单地讨论这个问题，以及介绍几种解决方案。</p>
<h2 id="通过为URL地址添加后缀的方式解决问题"><a href="#通过为URL地址添加后缀的方式解决问题" class="headerlink" title="通过为URL地址添加后缀的方式解决问题"></a>通过为URL地址添加后缀的方式解决问题</h2><p>一般在请求url后添加时间戳</p>
<h2 id="通过JQuery的Ajax设置解决问题"><a href="#通过JQuery的Ajax设置解决问题" class="headerlink" title="通过JQuery的Ajax设置解决问题"></a>通过JQuery的Ajax设置解决问题</h2><p>jQuery具有针对这个的Ajax设置，我们只需要按照如下的方式调用$.ajaxSetup方法禁止掉Ajaz的缓存机制。<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajaxSetup(&#123; <span class="attr">cache</span>: <span class="literal">false</span> &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                url: <span class="string">'@Url.Action("GetCurrentTime")'</span>,</span></span><br><span class="line"><span class="javascript">                success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">"ul"</span>).append(<span class="string">"&lt;li&gt;"</span> + result + <span class="string">"&lt;/li&gt;"</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, 5000);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>实际上jQuery的这个机制也是通过为请求地址添加不同的查询字符串后缀来实现的</p>
<h2 id="通过定制响应解决问题"><a href="#通过定制响应解决问题" class="headerlink" title="通过定制响应解决问题"></a>通过定制响应解决问题</h2><blockquote>
<p>HTTP/1.1 200 OK<br>Server: ASP.NET Development Server/10.0.0.0<br>Date: Thu, 03 Jan 2013 12:54:56 GMT<br>X-AspNet-Version: 4.0.30319<br>X-AspNetMvc-Version: 4.0<br><strong>Cache-Control: no-cache</strong><br>Pragma: no-cache<br>Expires: -1<br>Content-Type: text/html; charset=utf-8<br>Content-Length: 10<br>Connection: Close</p>
</blockquote>
]]></content>
      <tags>
        <tag>浏览器</tag>
        <tag>ie</tag>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>DataURL与File,Blob,canvas对象之间的互相转换</title>
    <url>/2018/01/30/DataURL%E4%B8%8EFile-Blob-canvas%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="DataURL与File-Blob-canvas对象之间的互相转换"><a href="#DataURL与File-Blob-canvas对象之间的互相转换" class="headerlink" title="DataURL与File,Blob,canvas对象之间的互相转换"></a>DataURL与File,Blob,canvas对象之间的互相转换</h1><h2 id="canvas转换为dataURL"><a href="#canvas转换为dataURL" class="headerlink" title="canvas转换为dataURL"></a>canvas转换为dataURL</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataurl = canvas.toDataURL(<span class="string">'image/png'</span>);</span><br><span class="line"><span class="keyword">var</span> dataurl2 = canvas.toDataURL(<span class="string">'image/jpeg'</span>, <span class="number">0.8</span>);</span><br></pre></td></tr></table></figure>
<h2 id="File对象、Blob对象转换为dataURL"><a href="#File对象、Blob对象转换为dataURL" class="headerlink" title="File对象、Blob对象转换为dataURL"></a>File对象、Blob对象转换为dataURL</h2><p>File对象也是一个Blob对象，二者的处理相同。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readBlobAsDataURL</span>(<span class="params">blob, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> FileReader();</span><br><span class="line">    a.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;callback(e.target.result);&#125;;</span><br><span class="line">    a.readAsDataURL(blob);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//example:</span></span><br><span class="line">readBlobAsDataURL(blob, <span class="function"><span class="keyword">function</span> (<span class="params">dataurl</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(dataurl);</span><br><span class="line">&#125;);</span><br><span class="line">readBlobAsDataURL(file, <span class="function"><span class="keyword">function</span> (<span class="params">dataurl</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(dataurl);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="dataURL转换为Blob对象"><a href="#dataURL转换为Blob对象" class="headerlink" title="dataURL转换为Blob对象"></a>dataURL转换为Blob对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoBlob</span>(<span class="params">dataurl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">        bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123;<span class="attr">type</span>:mime&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test:</span></span><br><span class="line"><span class="keyword">var</span> blob = dataURLtoBlob(<span class="string">'data:text/plain;base64,YWFhYWFhYQ=='</span>);</span><br></pre></td></tr></table></figure>
<h2 id="dataURL图片数据绘制到canvas"><a href="#dataURL图片数据绘制到canvas" class="headerlink" title="dataURL图片数据绘制到canvas"></a>dataURL图片数据绘制到canvas</h2><p>先构造Image对象，src为dataURL，图片onload之后绘制到canvas<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    canvas.drawImage(img);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = dataurl;</span><br></pre></td></tr></table></figure></p>
<p>File,Blob的图片文件数据绘制到canvas<br>还是先转换成一个url，然后构造Image对象，src为dataURL，图片onload之后绘制到canvas</p>
<p>利用上面的 readBlobAsDataURL 函数，由File,Blob对象得到dataURL格式的url，再参考 dataURL图片数据绘制到canvas</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">readBlobAsDataURL(file, <span class="function"><span class="keyword">function</span> (<span class="params">dataurl</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        canvas.drawImage(img);</span><br><span class="line">    &#125;;</span><br><span class="line">    img.src = dataurl;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Canvas转换为Blob"><a href="#Canvas转换为Blob" class="headerlink" title="Canvas转换为Blob"></a>Canvas转换为Blob</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dataurl = canvas.toDataURL(<span class="string">'image/png'</span>);</span><br><span class="line"><span class="keyword">var</span> blob = dataURLtoBlob(dataurl);</span><br></pre></td></tr></table></figure>
<h2 id="Blob转换为File"><a href="#Blob转换为File" class="headerlink" title="Blob转换为File"></a>Blob转换为File</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blobToFile</span>(<span class="params">theBlob, fileName</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//A Blob() is almost a File() - it's just missing the two properties below which we will add</span></span><br><span class="line">    theBlob.lastModifiedDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    theBlob.name = fileName;</span><br><span class="line">    <span class="keyword">return</span> theBlob;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage</span></span><br><span class="line"><span class="keyword">var</span> myBlob = <span class="keyword">new</span> Blob();</span><br><span class="line"></span><br><span class="line"><span class="comment">//do stuff here to give the blob some data...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFile = blobToFile(myBlob, <span class="string">"my-image.png"</span>);</span><br></pre></td></tr></table></figure>
<p>可以使用File构造器<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> file = <span class="keyword">new</span> File([myBlob], <span class="string">"name"</span>);</span><br></pre></td></tr></table></figure></p>
<p>##dataUrl转换为File<br>如果想用Ajax传递，不需要使用File，使用Blob即可<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dataURLtoBlob</span>(<span class="params">dataurl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = dataurl.split(<span class="string">','</span>), mime = arr[<span class="number">0</span>].match(<span class="regexp">/:(.*?);/</span>)[<span class="number">1</span>],</span><br><span class="line">        bstr = atob(arr[<span class="number">1</span>]), n = bstr.length, u8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(n);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        u8arr[n] = bstr.charCodeAt(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([u8arr], &#123;<span class="attr">type</span>:mime&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataurl = <span class="string">'data:text/plain;base64,aGVsbG8gd29ybGQ='</span>;</span><br><span class="line"><span class="keyword">var</span> blob = dataURLtoBlob(dataurl);</span><br><span class="line"><span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</span><br><span class="line">fd.append(<span class="string">"file"</span>, blob, <span class="string">"hello.txt"</span>);</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'/server.php'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'upload complete'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(fd);</span><br></pre></td></tr></table></figure></p>
<p>可以使用fetch将url转化为File<br>代码很简洁（可在chrome和firefox中使用）<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//load src and convert to a File instance object</span></span><br><span class="line"><span class="comment">//work for any type of src, not only image src.</span></span><br><span class="line"><span class="comment">//return a promise that resolves with a File instance</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">srcToFile</span>(<span class="params">src, fileName, mimeType</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (fetch(src)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="keyword">return</span> res.arrayBuffer();&#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">buf</span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> File([buf], fileName, &#123;<span class="attr">type</span>:mimeType&#125;);&#125;)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>例子1：转化为File对象<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">srcToFile(</span><br><span class="line">    <span class="string">'data:text/plain;base64,aGVsbG8gd29ybGQ='</span>,</span><br><span class="line">    <span class="string">'hello.txt'</span>,</span><br><span class="line">    <span class="string">'text/plain'</span></span><br><span class="line">)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(file);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>例子2：转化为File对象并发送到服务器<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">srcToFile(</span><br><span class="line">    <span class="string">'data:text/plain;base64,aGVsbG8gd29ybGQ='</span>,</span><br><span class="line">    <span class="string">'hello.txt'</span>,</span><br><span class="line">    <span class="string">'text/plain'</span></span><br><span class="line">)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(file);</span><br><span class="line">    <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</span><br><span class="line">    fd.append(<span class="string">"file"</span>, file);</span><br><span class="line">    <span class="keyword">return</span> fetch(<span class="string">'/server.php'</span>, &#123;<span class="attr">method</span>:<span class="string">'POST'</span>, <span class="attr">body</span>:fd&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.text();</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="built_in">console</span>.log)</span><br><span class="line">.catch(<span class="built_in">console</span>.error)</span><br><span class="line">;</span><br></pre></td></tr></table></figure></p>
<p>参考：</p>
<ol>
<li><a href="http://blog.csdn.net/cuixiping/article/details/45932793" target="_blank" rel="noopener">http://blog.csdn.net/cuixiping/article/details/45932793</a></li>
<li><a href="https://stackoverflow.com/questions/6850276/how-to-convert-dataurl-to-file-object-in-javascript" target="_blank" rel="noopener">https://stackoverflow.com/questions/6850276/how-to-convert-dataurl-to-file-object-in-javascript</a></li>
<li><a href="https://stackoverflow.com/questions/27159179/how-to-convert-blob-to-file-in-javascript" target="_blank" rel="noopener">https://stackoverflow.com/questions/27159179/how-to-convert-blob-to-file-in-javascript</a></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>DataURL</tag>
        <tag>File</tag>
        <tag>Blob</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactNative 热更新 PushCode</title>
    <url>/2020/12/14/ReactNative-%E7%83%AD%E6%9B%B4%E6%96%B0-PushCode/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL运算符和函数</title>
    <url>/2017/07/16/MySQL%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="MySQL运算符和函数"><a href="#MySQL运算符和函数" class="headerlink" title="MySQL运算符和函数"></a>MySQL运算符和函数</h1><h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><table>
<thead>
<tr>
<th style="text-align:left">函数名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CONCAT()</td>
<td style="text-align:left">字符连接</td>
</tr>
<tr>
<td style="text-align:left">CONCAT_WS()</td>
<td style="text-align:left">使用指定的分隔符进行字符连接</td>
</tr>
<tr>
<td style="text-align:left">FORMAT()</td>
<td style="text-align:left">数字格式化</td>
</tr>
<tr>
<td style="text-align:left">LOWEER()</td>
<td style="text-align:left">转换成小写字母</td>
</tr>
<tr>
<td style="text-align:left">UPPER()</td>
<td style="text-align:left">转换成大写字母</td>
</tr>
<tr>
<td style="text-align:left">LEFT()</td>
<td style="text-align:left">获取左侧字符</td>
</tr>
<tr>
<td style="text-align:left">RIGHT()</td>
<td style="text-align:left">获取右侧字符</td>
</tr>
<tr>
<td style="text-align:left">LENGTH()</td>
<td style="text-align:left">获取字符串长度</td>
</tr>
<tr>
<td style="text-align:left">LTRIM()</td>
<td style="text-align:left">删除前导空格</td>
</tr>
<tr>
<td style="text-align:left">RTRIM()</td>
<td style="text-align:left">删除后续空格</td>
</tr>
<tr>
<td style="text-align:left">TRIM()</td>
<td style="text-align:left">删除前导和后续空格</td>
</tr>
<tr>
<td style="text-align:left">SUBSTRING()</td>
<td style="text-align:left">字符串截取</td>
</tr>
<tr>
<td style="text-align:left">[NOT] LIKE()</td>
<td style="text-align:left">匹配模式</td>
</tr>
<tr>
<td style="text-align:left">REPLACE()</td>
<td style="text-align:left">字符串替换</td>
</tr>
</tbody>
</table>
<h2 id="数值运算符与函数"><a href="#数值运算符与函数" class="headerlink" title="数值运算符与函数"></a>数值运算符与函数</h2><table>
<thead>
<tr>
<th style="text-align:left">函数名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CEIL()</td>
<td style="text-align:left">进一取整</td>
</tr>
<tr>
<td style="text-align:left">DIV</td>
<td style="text-align:left">整数除法</td>
</tr>
<tr>
<td style="text-align:left">FLOOR()</td>
<td style="text-align:left">舍一取整</td>
</tr>
<tr>
<td style="text-align:left">MOD</td>
<td style="text-align:left">取余数（取模）</td>
</tr>
<tr>
<td style="text-align:left">POWER()</td>
<td style="text-align:left">幂运算</td>
</tr>
<tr>
<td style="text-align:left">ROUND()</td>
<td style="text-align:left">四舍五入</td>
</tr>
<tr>
<td style="text-align:left">TRUNCATE()</td>
<td style="text-align:left">字数截取</td>
</tr>
</tbody>
</table>
<h2 id="比较运算符与函数"><a href="#比较运算符与函数" class="headerlink" title="比较运算符与函数"></a>比较运算符与函数</h2><table>
<thead>
<tr>
<th style="text-align:left">函数名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">[NOT] BETWEEN…AND…</td>
<td style="text-align:left">[不]在范围之内</td>
</tr>
<tr>
<td style="text-align:left">[NOT] IN()</td>
<td style="text-align:left">[不]在列出值范围内</td>
</tr>
<tr>
<td style="text-align:left">IS [NOT] NULL</td>
<td style="text-align:left">[不]为空</td>
</tr>
</tbody>
</table>
<h2 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h2><table>
<thead>
<tr>
<th style="text-align:left">函数名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NOW()</td>
<td style="text-align:left">当前日期和时间</td>
</tr>
<tr>
<td style="text-align:left">CURDATE()</td>
<td style="text-align:left">当前日期</td>
</tr>
<tr>
<td style="text-align:left">CURTIME()</td>
<td style="text-align:left">当前时间</td>
</tr>
<tr>
<td style="text-align:left">DATE_ADD()</td>
<td style="text-align:left">日期变化</td>
</tr>
<tr>
<td style="text-align:left">DATEDIFF()</td>
<td style="text-align:left">日期差值</td>
</tr>
<tr>
<td style="text-align:left">DATE_FORMAT()</td>
<td style="text-align:left">日期格式化</td>
</tr>
</tbody>
</table>
<h2 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h2><table>
<thead>
<tr>
<th style="text-align:left">函数名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CONNECTION_ID()</td>
<td style="text-align:left">连接ID</td>
</tr>
<tr>
<td style="text-align:left">DATEBASE()</td>
<td style="text-align:left">当前数据库</td>
</tr>
<tr>
<td style="text-align:left">LAST_INSERT_ID()</td>
<td style="text-align:left">最后插入记录的ID号</td>
</tr>
<tr>
<td style="text-align:left">USER()</td>
<td style="text-align:left">当前用户</td>
</tr>
<tr>
<td style="text-align:left">VERSION()</td>
<td style="text-align:left">版本信息</td>
</tr>
</tbody>
</table>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><table>
<thead>
<tr>
<th style="text-align:left">函数名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">AVG()</td>
<td style="text-align:left">平均值</td>
</tr>
<tr>
<td style="text-align:left">COUNT()</td>
<td style="text-align:left">计数</td>
</tr>
<tr>
<td style="text-align:left">MAX()</td>
<td style="text-align:left">最大值</td>
</tr>
<tr>
<td style="text-align:left">MIN()</td>
<td style="text-align:left">最小值</td>
</tr>
<tr>
<td style="text-align:left">SUM()</td>
<td style="text-align:left">求和</td>
</tr>
</tbody>
</table>
<h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><table>
<thead>
<tr>
<th style="text-align:left">函数名称</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">MD5()</td>
<td style="text-align:left">信息摘要算法</td>
</tr>
<tr>
<td style="text-align:left">PASSWORD()</td>
<td style="text-align:left">密码算法</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL语句</title>
    <url>/2017/07/12/MySQL%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="MySQL语句"><a href="#MySQL语句" class="headerlink" title="MySQL语句"></a>MySQL语句</h1><h2 id="初涉MySQL"><a href="#初涉MySQL" class="headerlink" title="初涉MySQL"></a>初涉MySQL</h2><h3 id="MySQL的安装与配置"><a href="#MySQL的安装与配置" class="headerlink" title="MySQL的安装与配置"></a>MySQL的安装与配置</h3><p>default-character-set=utf8<br>character-set-server=utf8</p>
<h3 id="MySQL常用命令以及语法规范"><a href="#MySQL常用命令以及语法规范" class="headerlink" title="MySQL常用命令以及语法规范"></a>MySQL常用命令以及语法规范</h3><p>MySQL语句规范：<br>关键字与函数名称全部大写；<br>数据库名称、表名称、字段名称全部小写；<br>SQL语句必须以分号结尾；</p>
<p>修改提示符：<br>PROMPT</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:center">完整的日期</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:center">当前数据库</td>
</tr>
<tr>
<td style="text-align:left">\h</td>
<td style="text-align:center">完整的服务器名称</td>
</tr>
<tr>
<td style="text-align:left">\u</td>
<td style="text-align:center">当前用户</td>
</tr>
</tbody>
</table>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>整型：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Col1</th>
<th style="text-align:left">存储范围</th>
<th style="text-align:center">字节</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">tinyint</td>
<td style="text-align:left">有符号：-128到127 （-2的7次方到 2的7次方-1） 无符号 ：0-255 （0-2的8次方-1）</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:left">smallint</td>
<td style="text-align:left">有符号：-128到127 （-2的7次方到 2的7次方-1）无符号 ：0-255 （0-2的8次方-1）</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:left">mediumint</td>
<td style="text-align:left">有符号：-8388608到8388608 （-2的23次方到 2的23次方-1）无符号 ：0-16777215 （0-2的24次方-1）</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:left">int</td>
<td style="text-align:left">有符号：-2147483648到2147483648 （-2的31次方到 2的31次方-1）无符号 ：0-4294967295 （0-2的32次方-1）</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:left">bigint</td>
<td style="text-align:left">有符号：-9223372036854775808到9223372036854775808 （-2的63次方到 2的63次方-1）无符号 ：0-18446744073709551616 （0-2的63次方-1）</td>
<td style="text-align:center">8</td>
</tr>
</tbody>
</table>
<p>1.整形<br>1.1 tinyint 1字节<br>有符号：-128到127 （-2的7次方到 2的7次方-1）<br>无符号 ：0-255 （0-2的8次方-1）</p>
<p>1.2 smallint 2字节<br>有符号：-32768到32768 （-2的15次方到 2的15次方-1）<br>无符号 ：0-65535 （0-2的16次方-1）</p>
<p>mediumint 3字节<br>有符号：-8388608到8388608 （-2的23次方到 2的23次方-1）<br>无符号 ：0-16777215 （0-2的24次方-1）</p>
<p>int 4字节<br>有符号：-2147483648到2147483648 （-2的31次方到 2的31次方-1）<br>无符号 ：0-4294967295 （0-2的32次方-1）</p>
<p>bigint 8字节</p>
<p>有符号：-9223372036854775808到9223372036854775808 （-2的63次方到 2的63次方-1）<br>无符号 ：0-18446744073709551616 （0-2的63次方-1）</p>
<h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><p>创建数据库：</p>
<pre><code>CREATE {DATABASE | SCHEMA}[IF NOT EXISTS] db_name [[DEFAULT] CHARACTER SET [=] charset_name];
</code></pre><p>修改数据库：</p>
<pre><code>ALTER {DATABASE|SCHEMA}[db_name] [DEFAULT] [CHARACTER SET [=] charset_name];
</code></pre><p>删除数据库：</p>
<pre><code>DROP {DATABASE|SCHEMA}[IF EXISTS] db_name;
</code></pre><p>查看数据库：</p>
<pre><code>SHOW DATABASE; 
</code></pre><p>警告信息：</p>
<pre><code>SHOW WARNINGS;
</code></pre><p>SHOW CREATE DATABASE t1;</p>
<p>##基础操作</p>
<h3 id="INSERT-插入"><a href="#INSERT-插入" class="headerlink" title="INSERT 插入"></a>INSERT 插入</h3><ul>
<li>INSERT INTO<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] table_name [(column_name,...)] &#123;<span class="keyword">VALUES</span>|<span class="keyword">VALUE</span>&#125; (&#123;expr|<span class="keyword">DEFAULT</span>&#125;,...),(...),...;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>此方法比较常用，可以一次性插入多条记录，并且可以输入表达式甚至是函数，但是无法进行子查询。</p>
<ul>
<li>INSERT SET<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tb1_name <span class="keyword">SET</span> col_name=&#123;expr|<span class="keyword">DEFAULT</span>&#125;,...;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>与第一种方式的区别在于，此方法可以使用子查询（SubQuery）;且只能一次性插入一条记录。</p>
<ul>
<li>INSERT SELECT<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] table_name [(column_name,...)] SELECT...;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>此方法可以将查询结果插入到指定数据表中</p>
<p>举例：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">test</span>（username） <span class="keyword">SELECT</span> username <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> age &gt;=<span class="number">30</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="UPDATE-更新（单表）"><a href="#UPDATE-更新（单表）" class="headerlink" title="UPDATE 更新（单表）"></a>UPDATE 更新（单表）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> [<span class="keyword">LOW_PRIORITY</span>] [<span class="keyword">IGNORE</span>] table_reference <span class="keyword">SET</span> col_name1=&#123;expr1|<span class="keyword">DEFAULT</span>&#125;[,col_name2=&#123;expr2|<span class="keyword">DEFAULT</span>&#125;]...[<span class="keyword">WHERE</span> where_condition];</span><br></pre></td></tr></table></figure>
<p>一般来说要用WHERE指定位置，不然所有数据都会被更新.</p>
<p>举例：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age = age + <span class="number">5</span> - <span class="keyword">id</span>,sex = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p>
<p>//更新多个字段的值<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">users</span> <span class="keyword">SET</span> age = age+ <span class="number">10</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> % <span class="number">2</span>=<span class="number">0</span>;</span><br></pre></td></tr></table></figure></p>
<p>//更新id为偶数的位置age的值</p>
<h3 id="DELETE-删除（单表）"><a href="#DELETE-删除（单表）" class="headerlink" title="DELETE 删除（单表）"></a>DELETE 删除（单表）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tbl_name [<span class="keyword">WHERE</span> where_conditon];</span><br></pre></td></tr></table></figure>
<h3 id="SELECT-查找"><a href="#SELECT-查找" class="headerlink" title="SELECT 查找"></a>SELECT 查找</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> select_expr [,select_expr ...] <span class="comment">--只查找某一个函数或表达式</span></span><br><span class="line">[</span><br><span class="line"><span class="keyword">FROM</span> table_references <span class="comment">--查询表名</span></span><br><span class="line">[<span class="keyword">WHERE</span> where_conditon] <span class="comment">--查询条件</span></span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name|<span class="keyword">position</span>&#125; [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>],...] <span class="comment">--按某个字段进行分组，相同的只显示第一个</span></span><br><span class="line">[<span class="keyword">HAVING</span> where_conditon] <span class="comment">--分组时，给出显示条件</span></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name|expr|<span class="keyword">position</span>&#125; [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>],...] <span class="comment">--排序</span></span><br><span class="line">[<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,]<span class="keyword">row_count</span>|<span class="keyword">row_count</span> <span class="keyword">OFFSET</span> <span class="keyword">offset</span>&#125;] <span class="comment">--限制返回数量</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>每一个表达式表示想要的一列，必须至少有一个<br>多个列之间以英文逗号分隔<br>星号( <em> )表示所以列 tbl_name.</em>可以表示命名表的所有列<br>查询表达式可以使用[As]alias_name为其赋予别名<br>别名可用于GROUP BY，ORDRE BY或HAVING子句</p>
<p>SELECT 字段出现顺序影响结果集出现顺序，字段别名也影响结果集字段别名。</p>
<ul>
<li>利用GROUP BY 分组 添加分组条件 [HAVING where_condition]<br>要么为一个聚合函数，要么出现在SELECT 条件中。（聚合函数：max(),min(),avg(),sum(),count() 永远只有一个返回结果）</li>
</ul>
<p>##子查询和连接</p>
<h3 id="子查询简介"><a href="#子查询简介" class="headerlink" title="子查询简介"></a>子查询简介</h3><ul>
<li><p>子查询是指出现在【其他SQL语句内】的SELECT子句<br>eg：<br>SELECT <em> FROM t1 WHERE column1 = (SELECT column1 FROM t2);<br>其中，SELECT </em> FROM t1 …称为Outer Query（外查询或者Outer Statement）<br>SELECT column1 FROM t2 称为Sub Query（子查询）</p>
</li>
<li><p>子查询可以返回标量、一行、一列或者子查询。</p>
</li>
</ul>
<h3 id="使用比较运算符的子查询"><a href="#使用比较运算符的子查询" class="headerlink" title="使用比较运算符的子查询"></a>使用比较运算符的子查询</h3><ul>
<li>子查询查询出的结果出现多个时，使用ANY\SOME（符合其中一个），ALL（全部符合）来来修饰。</li>
</ul>
<h3 id="NOT-IN-的子查询"><a href="#NOT-IN-的子查询" class="headerlink" title="[NOT] IN 的子查询"></a>[NOT] IN 的子查询</h3><p>=ANY 等价于 IN<br>!=ALL或&lt;&gt;ANY等价于NOT IN</p>
<h3 id="使用-NOT-EXISTS的子查询（不常用）："><a href="#使用-NOT-EXISTS的子查询（不常用）：" class="headerlink" title="使用[NOT]EXISTS的子查询（不常用）："></a>使用[NOT]EXISTS的子查询（不常用）：</h3><p>若子查询返回任何行，则返回TRUE，否则为FALSE。</p>
<h3 id="使用INSERT…SELECT插入记录"><a href="#使用INSERT…SELECT插入记录" class="headerlink" title="使用INSERT…SELECT插入记录"></a>使用INSERT…SELECT插入记录</h3><pre><code>INSERT [INTO] tbl_name SET col_name={exprDEFAULT},... --可以使用子查询
INSERT [INTO] tbl_name [(col_name,...)] SELECT ... --将查询结果写入数据表
</code></pre><p>eg：<br>DESC tdb_goods_cates; //显示出tdb_goods_cates表中的项目名称，与SHOW COLUMNS FROM tdb_goods_cates;作用相同</p>
<p>INSERT tdb_goods_cates(cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;//在表tdb_goods_cates中插入tdb_goods中的cate</p>
<h3 id="多表更新"><a href="#多表更新" class="headerlink" title="多表更新"></a>多表更新</h3><pre><code>UPDATE table_references SET col_name1={expr1|DEFAULT} [,col_name2={expr2|DEFAULT}]... [WHERE where_condition]
</code></pre><p>INNER JOIN,内连接<br>在MySQL中，JOIN, CROSS JOIN 和 INNER JOIN 是等价的。<br>LEFT [OUTER] JOIN ,左外连接<br>RIGHT [OUTER] JOIN,右外连接</p>
<pre><code>update tdb_goods inner join tdb_goods_cates on goods_cate=cate_name set goods_cate=cate_id;
</code></pre><h3 id="多表更新（一步到位）"><a href="#多表更新（一步到位）" class="headerlink" title="多表更新（一步到位）"></a>多表更新（一步到位）</h3><p>建表、查询、写入三合一</p>
<pre><code>CREATE TABLE tdb_goods_brands (
brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
brand_name VARCHAR(40) NOT NULL
) SELECT brand_name FROM tdb_goods GROUP BY brand_name;
</code></pre><p>多表更新</p>
<pre><code>UPDATE tdb_goods INNER JOIN tdb_goods_brands ON tdb_goods.brand_name = tdb_goods_brands.brand_name
SET tdb_goods.brand_name = tdb_goods_brands.brand_id;
</code></pre><p>通过ALTER TABLE语句修改数据表结构<br>ALTER TABLE tdb_goods<br>CHANGE goods_cate cate_id SMALLINT UNSIGNED NOT NULL,<br>CHANGE brand_name brand_id SMALLINT UNSIGNED NOT NULL;</p>
<p>外键，不一定是物理的外键，逻辑的外键也行，当然，物理外键更能保证数据的完整性和一致性</p>
<p>注意：数字类型的字段占用的空间更小，查询的效率也更高</p>
<h3 id="连接语法结构"><a href="#连接语法结构" class="headerlink" title="连接语法结构"></a>连接语法结构</h3><p>MySQL在SELECT语句、多表更新、多表删除语句中支持JOIN操作。<br>语法结构</p>
<pre><code>table_reference A
{[INNER|CROSS] JOIN | {LEFT|RIGHT} [OUTER] JOIN}
table_reference B
ON condition_expr
</code></pre><p>数据表参照<br>table_reference<br>tbl_name [[AS] alias] table_subquery [AS] alias<br>数据表可以使用tbl_name AS alias_name 或 tbl_name alias_name赋予别名。<br>table_subquery可以作为子查询使用在FROM子句中，这样的子查询必须为其赋予别名。</p>
<h3 id="内连接INNER-JOIN"><a href="#内连接INNER-JOIN" class="headerlink" title="内连接INNER JOIN"></a>内连接INNER JOIN</h3><p>1、内连接：在MySQL中JOIN,INNER JOIN,CROSS JOIN是等价的<br>2、外连接：LEFT JOIN左外连接；RIGHT JOIN右外连接<br>3、连接条件：使用ON设定连接条件，也可以用WHERE代替<br>· ON：设定连接条件<br>· WHERE：进行结果集记录的过滤<br>4：内连接是返回左表及右表符合连接条件的记录<br>eg：</p>
<pre><code>SELECT * FROM tabA JOIN tabB ON tabA.name = tabB.name; --表示返回都含有的name值对应的字段
</code></pre><h3 id="外连接OUTER-JOIN"><a href="#外连接OUTER-JOIN" class="headerlink" title="外连接OUTER JOIN"></a>外连接OUTER JOIN</h3><p>1、LEFT JOIN：显示左表全部和左右符合连接条件的记录<br>2、RIGHT JOIN：显示左右符合连接条件的记录和右表全部记录<br>3、若某字段只存在某一表，则另一表的里字段返回null</p>
<h3 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h3><pre><code>SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g
INNER JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id
INNER JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;
</code></pre><p>注意：INNER和INNER之间是没有逗号的</p>
<h3 id="关于外连接的几点说明"><a href="#关于外连接的几点说明" class="headerlink" title="关于外连接的几点说明"></a>关于外连接的几点说明</h3><p>外连接：<br>以左外连接为例：<br>A LEFT JOIN B join_condition<br>数据表B的结果集依赖于数据表A<br>数据表A的结果集根据左连接条件依赖所有数据表(B表除外)<br>左外连接条件决定如何检索数据表B(在没有指定WHERE条件的情况下)<br>如果数据表A的某条记录符合WHERE条件，但是在数据表B不存在符合连接条件的记录，将生成一个所有列为空的额外的B行<br>内连接：<br>使用内连接查找的记录在连接数据表中不存在，并且在WHERE子句中尝试一下操作：column_name IS NULL 。如果 column_name 被指定为 NOT NULL，MySQL将在找到符合连接着条件的记录后停止搜索更多的行（查找冲突）</p>
<h3 id="无极限分类表设计"><a href="#无极限分类表设计" class="headerlink" title="无极限分类表设计"></a>无极限分类表设计</h3><p>无限分类：即在同一张表中既有父类，又有子类。<br>通过在分类表中再增加多一个字段标识其属于哪一个父类的 ID 来实现。<br>可以通过对同一张数据表的自身连接来进行查询，需要对表标识别名。</p>
<p>查找父级对应的名称：</p>
<pre><code>select s.type_id ,s.type_name,p.type_name As parent_name from tdb_goods_types s left join tdb_goods_types p on s.parent_id=p.type_id;
</code></pre><p>查找子级对应的名称：</p>
<pre><code>select p.type_id ,p.type_name,s.type_name from tdb_goods_types p left join tdb_goods_types s on p.type_id=s.parent_id;
</code></pre><p>查找有多少子级：</p>
<pre><code>select p.type_id ,p.type_name,COUNT(s.type_name) child_count from tdb_goods_types p left join tdb_goods_types s on p.type_id=s.parent_id GROUP BY p.type_name ORDER BY p.type_id;
</code></pre><h3 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h3><p>（1）多表删除，将重复记录删除，保留ID号比较小的项<br>（2）查找重复记录</p>
<pre><code>SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) &gt;= 2;
</code></pre><p>（3） 删除重复记录</p>
<pre><code>DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) &gt;= 2 ) AS t2 ON t1.goods_name = t2.goods_name WHERE t1.goods_id &gt; t2.goods_id;
</code></pre><h2 id="运算符和函数"><a href="#运算符和函数" class="headerlink" title="运算符和函数"></a>运算符和函数</h2><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><table>
<thead>
<tr>
<th style="text-align:left">函数名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CONCAT()</td>
<td style="text-align:center">字符连接</td>
</tr>
<tr>
<td style="text-align:left">CONCAT_WS()</td>
<td style="text-align:center">使用指定的分隔符进行字符连接</td>
</tr>
<tr>
<td style="text-align:left">FORMAT()</td>
<td style="text-align:center">数字格式化</td>
</tr>
<tr>
<td style="text-align:left">LOWER()</td>
<td style="text-align:center">转换成小写字母</td>
</tr>
<tr>
<td style="text-align:left">UPPER()</td>
<td style="text-align:center">转换成大写字母</td>
</tr>
<tr>
<td style="text-align:left">LEFT()</td>
<td style="text-align:center">获取左侧字符</td>
</tr>
<tr>
<td style="text-align:left">RIGHT()</td>
<td style="text-align:center">获取右侧字符</td>
</tr>
</tbody>
</table>
<h3 id="数值运算符和函数"><a href="#数值运算符和函数" class="headerlink" title="数值运算符和函数"></a>数值运算符和函数</h3><h3 id="比较运算符和函数"><a href="#比较运算符和函数" class="headerlink" title="比较运算符和函数"></a>比较运算符和函数</h3><h3 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h3><h3 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h3><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3>]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/2017/07/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h1><h2 id="命令的基本格式"><a href="#命令的基本格式" class="headerlink" title="命令的基本格式"></a>命令的基本格式</h2><p>命令 [选项] [参数]</p>
<p>注意:个别命令使用不遵循此格式<br>        当有多个选项时,可以写在一起<br>        简化选项等于完整选项<br>        -a 等于 –all</p>
<p>查询目录中内容:ls<br>ls [选项] [文件或目录]<br>选项：<br>-a 显示所有文件，包含隐藏文件<br>-l 显示详细信息<br>-d 查看目录本身属性<br>-h 人性化显示文件大小<br>-i 显示inode节点（储存时生成的编码，格式化硬盘时候，分成等大的内存块4k,同时生成相应的节点表）</p>
<h2 id="文件处理命令"><a href="#文件处理命令" class="headerlink" title="文件处理命令"></a>文件处理命令</h2><h3 id="目录和文件处理命令"><a href="#目录和文件处理命令" class="headerlink" title="目录和文件处理命令"></a>目录和文件处理命令</h3><h4 id="建立目录：mkdir"><a href="#建立目录：mkdir" class="headerlink" title="建立目录：mkdir"></a>建立目录：mkdir</h4><ul>
<li>mkdir -p [目录名]<br>-p 递归创建<br>命令英文原意:<strong>m</strong>a<strong>k</strong>e <strong>dir</strong>ectories</li>
</ul>
<h4 id="切换所在目录：cd"><a href="#切换所在目录：cd" class="headerlink" title="切换所在目录：cd"></a>切换所在目录：cd</h4><ul>
<li><p>cd [目录]<br>命令英文原意:<strong>c</strong>hange <strong>d</strong>irectory</p>
</li>
<li><p>简化命令<br>cd和cd ~进入当前用户的家目录<br>cd - 进入上次目录<br>cd .. 进入上一级目录<br>cd .  进入当前目录</p>
</li>
</ul>
<p>Ctrl+L 清屏<br>tab 可以补全目录或命令</p>
<h4 id="查询所在目录位置：pwd"><a href="#查询所在目录位置：pwd" class="headerlink" title="查询所在目录位置：pwd"></a>查询所在目录位置：pwd</h4><p>命令英文原意:<strong>p</strong>rint <strong>w</strong>orking <strong>d</strong>irectory</p>
<h4 id="删除空目录：rmdir"><a href="#删除空目录：rmdir" class="headerlink" title="删除空目录：rmdir"></a>删除空目录：rmdir</h4><ul>
<li>rmdir [目录名]<br>命令英文原意:<strong>r</strong>e<strong>m</strong>ove empty <strong>dir</strong>ectories</li>
</ul>
<h4 id="删除文件或目录：rm"><a href="#删除文件或目录：rm" class="headerlink" title="删除文件或目录：rm"></a>删除文件或目录：rm</h4><ul>
<li>rm -rf [目录名]<br>命令英文原意:<strong>r</strong>e<strong>m</strong>ove</li>
<li>选项：<br>-r 删除目录<br>-f 强制</li>
</ul>
<h4 id="复制命令：cp"><a href="#复制命令：cp" class="headerlink" title="复制命令：cp"></a>复制命令：cp</h4><ul>
<li>cp [选项] [原文件或目录] [目标目录]<br>命令英文原意：<strong>c</strong>op<strong>y</strong></li>
<li>选项：<br>-r   复制目录<br>-p   连带文件属性复制<br>-d   若源文件是链接文件,则复制链接属性<br>-a   相当于 -pdr</li>
</ul>
<h4 id="剪切或改名命令：mv"><a href="#剪切或改名命令：mv" class="headerlink" title="剪切或改名命令：mv"></a>剪切或改名命令：mv</h4><ul>
<li>mv [原文件或目录] [目标目录]<br>命令英文原意：<strong>m</strong>o<strong>v</strong>e</li>
</ul>
<p>ll 等于 ls -l</p>
<h4 id="常用目录的作用"><a href="#常用目录的作用" class="headerlink" title="常用目录的作用"></a>常用目录的作用</h4><ul>
<li>/根目录<ul>
<li>/bin命令保存目录（普通用户就可以读取的命令）</li>
<li>/boot启动目录，启动相关文件</li>
<li>/dev设备文件保存目录</li>
<li>/etc配置文件保存目录</li>
<li>/home普通用户的家目录</li>
<li>/lib系统库保存目录</li>
<li>/mnt系统挂载目录</li>
<li>/media挂载目录</li>
<li>/root超级用户的家目录</li>
<li>/tmp临时目录</li>
<li>/sbin命令保存目录（超级用户才能使用的目录）</li>
<li>/proc直接写入内存的</li>
<li>/sys</li>
<li>/usr系统软件资源目录<ul>
<li>/usr/bin/系统命令（普通用户）</li>
<li>/usr/sbin/（超级用户）</li>
</ul>
</li>
<li>/var系统相关文档内容</li>
</ul>
</li>
</ul>
<h3 id="链接命令"><a href="#链接命令" class="headerlink" title="链接命令"></a>链接命令</h3><ul>
<li>ln -s [原文件] [目标文件]<br>命令英文原意：<strong>l</strong>i<strong>n</strong>k</li>
<li>功能描述：生成链接文件</li>
<li>选项： -s 创建软链接</li>
</ul>
<p>硬链接特征：<br>1、拥有相同的i节点和存储block块，可以看作是同一个文件<br>2、可通过i节点识别<br>3、不能跨分区<br>4、不能针对目录使用</p>
<p>软链接特征：<br>1、类似Windows快捷方式<br>2、软链接拥有自己的i节点和Block块，但是数据块中只保存原文件的文件名和i节点号，并没有实际的文件数据<br>3、lrwxrwxrwx l 软链接<br>4、修改任意文件，另一个文件都改变<br>5、删除原文件，软链接不能使用</p>
<h2 id="文件搜索命令"><a href="#文件搜索命令" class="headerlink" title="文件搜索命令"></a>文件搜索命令</h2><h3 id="文件搜索命令-locate"><a href="#文件搜索命令-locate" class="headerlink" title="文件搜索命令 locate"></a>文件搜索命令 locate</h3><ul>
<li>locate 文件名<br>在后台数据库中安文件名搜索，搜索速度更快</li>
<li>updatedb<br>更新数据库</li>
</ul>
<h3 id="命令搜索命令-whereis-和-which"><a href="#命令搜索命令-whereis-和-which" class="headerlink" title="命令搜索命令 whereis 和 which"></a>命令搜索命令 whereis 和 which</h3><ul>
<li><p>whereis 命令名<br>搜索命令所在路径及帮助文档所在位置<br>选项：<br>-b：只查找可执行文件<br>-m：只查找帮助文档</p>
</li>
<li><p>which 文件名<br>搜索命令所在路径及别名</p>
</li>
</ul>
<h3 id="文件搜索命令-find"><a href="#文件搜索命令-find" class="headerlink" title="文件搜索命令 find"></a>文件搜索命令 find</h3><ul>
<li><p>find [搜索范围] [搜索条件]<br>搜索文件</p>
</li>
<li><p>find / -name install.log<br>避免大范围搜索，会非常消耗系统资源<br>find是在系统当中搜索符合条件的文件名。如果需要匹配，使用通配符匹配，通配符是完全匹配。</p>
</li>
<li><p>find / -iname install.log<br>不区分大小写</p>
</li>
<li><p>find / -user install.log<br>按照所有者搜索</p>
</li>
<li><p>find /root -nouser<br>查找没有所有者的文件</p>
</li>
<li><p>find /var/log/ -mtime +10<br>查找10天亲修改的文件</p>
<p>+10 10天以前<br>-10 10天内<br>10 10天当天<br>-mtime 修改文件内容<br>-ctime 修改文件属性<br>-atime 文件访问时间</p>
</li>
<li><p>find . -size 25k<br>查找文件大小是25KB的文件</p>
</li>
</ul>
<p>-25k 小于25KB的文件<br>25k 等于25KB的文件<br>+25k 大于25KB的文件</p>
<ul>
<li>find . -inum 262422<br>查找i几点是262422的文件</li>
</ul>
<p>find /ect -size +20k -a -size -50k<br>查找/etc/目录下，大于20KB并且小于50KB的文件<br>-a and 逻辑与<br>-o or 逻辑或</p>
<p>find /ect -size +20k -a -size -50k -exec ls -lh {} \;<br>查找/etc/目录下，大于20KB并且小于50KB的文件，并显示详细信息<br>-exec/-ok 命令 {} \; 对搜索结果执行操作</p>
<h3 id="字符串搜索命令-grep"><a href="#字符串搜索命令-grep" class="headerlink" title="字符串搜索命令 grep"></a>字符串搜索命令 grep</h3><ul>
<li>grep [选项] 字符串 文件名<br>在文件当中匹配符合条件的字符串</li>
</ul>
<p>选项：<br>-i 忽略大小写<br>-v 排除指定的字符串</p>
<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p>man 命令</p>
<p>查看命令拥有哪个级别的帮助<br>man -f 命令<br>相当于<br>whereis 命令</p>
<p>举例：<br>man -5 passwd</p>
<p>查看和命令相关的所有帮助<br>man -k 命令<br>相当于<br>apropos 命令</p>
<p>选项帮助<br>命令 –help</p>
<p>shell内部命令帮助<br>help shell内部命令</p>
<p>详细命令info<br>info 命令<br>回车：进入子帮助页面<br>u：进入上层页面<br>n：进入下一个帮助小节<br>p：进入上一个帮助小节<br>q：退出</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第12章 用户中心页面）</title>
    <url>/2017/08/16/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC12%E7%AB%A0-%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83%E9%A1%B5%E9%9D%A2%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第12章-用户中心页面）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第12章-用户中心页面）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第12章 用户中心页面）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第12章 用户中心页面）</h1><h2 id="用户中心页面布局和功能介绍"><a href="#用户中心页面布局和功能介绍" class="headerlink" title="用户中心页面布局和功能介绍"></a>用户中心页面布局和功能介绍</h2><p>组件基本dom结构<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-center"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 返回按钮 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-back"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 返回按钮 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- switch按钮 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"switches-wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- switch按钮 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 随机播放按钮 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"playBtn"</span> <span class="attr">class</span>=<span class="string">"play-btn"</span> @<span class="attr">click</span>=<span class="string">"random"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-play"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>随机播放全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 随机播放按钮 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 列表 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-wrapper"</span> <span class="attr">ref</span>=<span class="string">"listWrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 列表 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="用户中心页面收藏列表的Vuex数据设计和实现"><a href="#用户中心页面收藏列表的Vuex数据设计和实现" class="headerlink" title="用户中心页面收藏列表的Vuex数据设计和实现"></a>用户中心页面收藏列表的Vuex数据设计和实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// state</span></span><br><span class="line">favoriteList: loadFavorite()</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutation-type</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_FAVORITE_LIST = <span class="string">'SET_FAVORITE_LIST'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mutation</span></span><br><span class="line">[types.SET_FAVORITE_HISTORY](state, list) &#123;</span><br><span class="line">  state.favoriteList = list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getters</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> favoriteList = <span class="function"><span class="params">state</span> =&gt;</span> state.favoriteList</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> saveFavoriteList = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; commit &#125;, song</span>) </span>&#123;</span><br><span class="line">  commit(types.SET_FAVORITE_LIST, saveFavorite(song))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteFavoriteList = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; commit &#125;, song</span>) </span>&#123;</span><br><span class="line">  commit(types.SET_FAVORITE_LIST, deleteFavorite(song))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="用户中心页面收藏歌曲功能实现"><a href="#用户中心页面收藏歌曲功能实现" class="headerlink" title="用户中心页面收藏歌曲功能实现"></a>用户中心页面收藏歌曲功能实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-center"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 返回按钮 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-back"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 返回按钮 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- switch按钮 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"switches-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">switches</span> @<span class="attr">switch</span>=<span class="string">"swtichItem"</span> <span class="attr">:switches</span>=<span class="string">"switches"</span> <span class="attr">:currentIndex</span>=<span class="string">"currentIndex"</span>&gt;</span><span class="tag">&lt;/<span class="name">switches</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- switch按钮 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 随机播放按钮 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"playBtn"</span> <span class="attr">class</span>=<span class="string">"play-btn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-play"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>随机播放全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 随机播放按钮 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 列表 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-wrapper"</span> <span class="attr">ref</span>=<span class="string">"listWrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">ref</span>=<span class="string">"favoriteList"</span> <span class="attr">class</span>=<span class="string">"list-scroll"</span> <span class="attr">v-if</span>=<span class="string">"currentIndex===0"</span> <span class="attr">:data</span>=<span class="string">"favoriteList"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">song-list</span> <span class="attr">:songs</span>=<span class="string">"favoriteList"</span> @<span class="attr">select</span>=<span class="string">"selectSong"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">ref</span>=<span class="string">"playList"</span> <span class="attr">class</span>=<span class="string">"list-scroll"</span> <span class="attr">v-if</span>=<span class="string">"currentIndex===1"</span> <span class="attr">:data</span>=<span class="string">"playHistory"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">song-list</span> <span class="attr">:songs</span>=<span class="string">"playHistory"</span> @<span class="attr">select</span>=<span class="string">"selectSong"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 列表 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Switches <span class="keyword">from</span> <span class="string">'base/switches/switches'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">'base/scroll/scroll'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> SongList <span class="keyword">from</span> <span class="string">'base/song-list/song-list'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Song <span class="keyword">from</span> <span class="string">'common/js/song'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;mapGetters, mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        currentIndex: 0,</span><br><span class="line">        switches: [</span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">'我喜欢的'</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">'最近听的'</span>&#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      ...mapGetters([</span><br><span class="line"><span class="javascript">        <span class="string">'favoriteList'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">'playHistory'</span></span></span><br><span class="line">      ])</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      swtichItem(index) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.currentIndex = index</span></span><br><span class="line">      &#125;,</span><br><span class="line">      selectSong(song) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.insertSong(<span class="keyword">new</span> Song(song))</span></span><br><span class="line">      &#125;,</span><br><span class="line">      ...mapActions([</span><br><span class="line"><span class="javascript">        <span class="string">'insertSong'</span></span></span><br><span class="line">      ])</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Switches,</span><br><span class="line">      Scroll,</span><br><span class="line">      SongList</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="用户中心页面剩余功能实现"><a href="#用户中心页面剩余功能实现" class="headerlink" title="用户中心页面剩余功能实现"></a>用户中心页面剩余功能实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user-center"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 返回按钮 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back"</span> @<span class="attr">click</span>=<span class="string">"back"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-back"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 返回按钮 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- switch按钮 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"switches-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">switches</span> @<span class="attr">switch</span>=<span class="string">"swtichItem"</span> <span class="attr">:switches</span>=<span class="string">"switches"</span> <span class="attr">:currentIndex</span>=<span class="string">"currentIndex"</span>&gt;</span><span class="tag">&lt;/<span class="name">switches</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- switch按钮 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 随机播放按钮 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"playBtn"</span> <span class="attr">class</span>=<span class="string">"play-btn"</span> @<span class="attr">click</span>=<span class="string">"random"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-play"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>随机播放全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 随机播放按钮 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 列表 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-wrapper"</span> <span class="attr">ref</span>=<span class="string">"listWrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">ref</span>=<span class="string">"favoriteList"</span> <span class="attr">class</span>=<span class="string">"list-scroll"</span> <span class="attr">v-if</span>=<span class="string">"currentIndex===0"</span> <span class="attr">:data</span>=<span class="string">"favoriteList"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">song-list</span> <span class="attr">:songs</span>=<span class="string">"favoriteList"</span> @<span class="attr">select</span>=<span class="string">"selectSong"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">ref</span>=<span class="string">"playlist"</span> <span class="attr">class</span>=<span class="string">"list-scroll"</span> <span class="attr">v-if</span>=<span class="string">"currentIndex===1"</span> <span class="attr">:data</span>=<span class="string">"playHistory"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-inner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">song-list</span> <span class="attr">:songs</span>=<span class="string">"playHistory"</span> @<span class="attr">select</span>=<span class="string">"selectSong"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 列表 end --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"no-result-wrapper"</span> <span class="attr">v-show</span>=<span class="string">"noResult"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">no-result</span> <span class="attr">:title</span>=<span class="string">"noResultDesc"</span>&gt;</span><span class="tag">&lt;/<span class="name">no-result</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Switches <span class="keyword">from</span> <span class="string">'base/switches/switches'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">'base/scroll/scroll'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> SongList <span class="keyword">from</span> <span class="string">'base/song-list/song-list'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> NoResult <span class="keyword">from</span> <span class="string">'base/no-result/no-result'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Song <span class="keyword">from</span> <span class="string">'common/js/song'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;mapGetters, mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;playlistMixin&#125; <span class="keyword">from</span> <span class="string">'common/js/mixin'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    mixins: [playlistMixin],</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        currentIndex: 0,</span><br><span class="line">        switches: [</span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">'我喜欢的'</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">'最近听的'</span>&#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      noResult() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> !<span class="keyword">this</span>.favoriteList.length</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> !<span class="keyword">this</span>.playlist.length</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      noResultDesc() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="keyword">this</span>.currentIndex === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">'暂无收藏歌曲'</span></span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="string">'你还没有听过歌曲'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      ...mapGetters([</span><br><span class="line"><span class="javascript">        <span class="string">'favoriteList'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">'playHistory'</span></span></span><br><span class="line">      ])</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handlePlaylist(playlist) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> bottom = playlist.length &gt; <span class="number">0</span> ? <span class="string">'60px'</span> : <span class="string">''</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.listWrapper.style.bottom = bottom</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.$favoriteList &amp;&amp; <span class="keyword">this</span>.$refs.$favoriteList.refresh()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.$playlist &amp;&amp; <span class="keyword">this</span>.$refs.$playlist.refresh()</span></span><br><span class="line">      &#125;,</span><br><span class="line">      swtichItem(index) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.currentIndex = index</span></span><br><span class="line">      &#125;,</span><br><span class="line">      selectSong(song) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.insertSong(<span class="keyword">new</span> Song(song))</span></span><br><span class="line">      &#125;,</span><br><span class="line">      back() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$router.back()</span></span><br><span class="line">      &#125;,</span><br><span class="line">      random() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> list = <span class="keyword">this</span>.currentIndex === <span class="number">0</span> ? <span class="keyword">this</span>.favoriteList : <span class="keyword">this</span>.playHistory</span></span><br><span class="line">        if (list.length === 0) &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 为什么用song的实例, song的实例上不仅有属性, 还有方法</span></span></span><br><span class="line"><span class="javascript">        list = list.map(<span class="function"><span class="params">song</span> =&gt;</span> <span class="keyword">new</span> Song(song))</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.randomPlay(&#123;list&#125;)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      ...mapActions([</span><br><span class="line"><span class="javascript">        <span class="string">'insertSong'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">'randomPlay'</span></span></span><br><span class="line">      ])</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Switches,</span><br><span class="line">      Scroll,</span><br><span class="line">      SongList,</span><br><span class="line">      NoResult</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第11章 歌曲列表组件）</title>
    <url>/2017/08/16/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC11%E7%AB%A0-%E6%AD%8C%E6%9B%B2%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第11章-歌曲列表组件）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第11章-歌曲列表组件）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第11章 歌曲列表组件）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第11章 歌曲列表组件）</h1><h2 id="歌曲列表组件布局和功能介绍"><a href="#歌曲列表组件布局和功能介绍" class="headerlink" title="歌曲列表组件布局和功能介绍"></a>歌曲列表组件布局和功能介绍</h2><p>添加playlist组件<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"list-fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playlist"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"clear"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-clear"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">ref</span>=<span class="string">"listContent"</span> <span class="attr">class</span>=<span class="string">"list-content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">"list"</span> <span class="attr">tag</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">ref</span>=<span class="string">"listItem"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"current"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"like"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-not-favorite"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-delete"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-operate"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"add"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-add"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>添加歌曲到队列<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-close"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  @import "~common/stylus/mixin"</span><br><span class="line">  .playlist</span><br><span class="line">    position: fixed</span><br><span class="line">    left: 0</span><br><span class="line">    right: 0</span><br><span class="line">    top: 0</span><br><span class="line">    bottom: 0</span><br><span class="line">    z-index: 200</span><br><span class="line">    background-color: $color-background-d</span><br><span class="line">    &amp;.list-fade-enter-active, &amp;.list-fade-leave-active</span><br><span class="line">      transition: opacity 0.3s</span><br><span class="line">      .list-wrapper</span><br><span class="line">        transition: all 0.3s</span><br><span class="line">    &amp;.list-fade-enter, &amp;.list-fade-leave-to</span><br><span class="line">      opacity: 0</span><br><span class="line">      .list-wrapper</span><br><span class="line">        transform: translate3d(0, 100%, 0)</span><br><span class="line">    &amp;.list-fade-enter</span><br><span class="line">    .list-wrapper</span><br><span class="line">      position: absolute</span><br><span class="line">      left: 0</span><br><span class="line">      bottom: 0</span><br><span class="line">      width: 100%</span><br><span class="line">      background-color: $color-highlight-background</span><br><span class="line">      .list-header</span><br><span class="line">        position: relative</span><br><span class="line">        padding: 20px 30px 10px 20px</span><br><span class="line">        .title</span><br><span class="line">          display: flex</span><br><span class="line">          align-items: center</span><br><span class="line">          .icon</span><br><span class="line">            margin-right: 10px</span><br><span class="line">            font-size: 30px</span><br><span class="line">            color: $color-theme-d</span><br><span class="line">          .text</span><br><span class="line">            flex: 1</span><br><span class="line">            font-size: $font-size-medium</span><br><span class="line">            color: $color-text-l</span><br><span class="line">          .clear</span><br><span class="line">            extend-click()</span><br><span class="line">            .icon-clear</span><br><span class="line">              font-size: $font-size-medium</span><br><span class="line">              color: $color-text-d</span><br><span class="line">      .list-content</span><br><span class="line">        max-height: 240px</span><br><span class="line">        overflow: hidden</span><br><span class="line">        .item</span><br><span class="line">          display: flex</span><br><span class="line">          align-items: center</span><br><span class="line">          height: 40px</span><br><span class="line">          padding: 0 30px 0 20px</span><br><span class="line">          overflow: hidden</span><br><span class="line">          &amp;.list-enter-active, &amp;.list-leave-active</span><br><span class="line">            transition: all 0.1s</span><br><span class="line">          &amp;.list-enter, &amp;.list-leave-to</span><br><span class="line">            height: 0</span><br><span class="line">          .current</span><br><span class="line">            flex: 0 0 20px</span><br><span class="line">            width: 20px</span><br><span class="line">            font-size: $font-size-small</span><br><span class="line">            color: $color-theme-d</span><br><span class="line">          .text</span><br><span class="line">            flex: 1</span><br><span class="line">            no-wrap()</span><br><span class="line">            font-size: $font-size-medium</span><br><span class="line">            color: $color-text-d</span><br><span class="line">          .like</span><br><span class="line">            extend-click()</span><br><span class="line">            margin-right: 15px</span><br><span class="line">            font-size: $font-size-small</span><br><span class="line">            color: $color-theme</span><br><span class="line">            .icon-favorite</span><br><span class="line">              color: $color-sub-theme</span><br><span class="line">          .delete</span><br><span class="line">            extend-click()</span><br><span class="line">            font-size: $font-size-small</span><br><span class="line">            color: $color-theme</span><br><span class="line">      .list-operate</span><br><span class="line">        width: 140px</span><br><span class="line">        margin: 20px auto 30px auto</span><br><span class="line">        .add</span><br><span class="line">          display: flex</span><br><span class="line">          align-items: center</span><br><span class="line">          padding: 8px 16px</span><br><span class="line">          border: 1px solid $color-text-l</span><br><span class="line">          border-radius: 100px</span><br><span class="line">          color: $color-text-l</span><br><span class="line">          .icon-add</span><br><span class="line">            margin-right: 5px</span><br><span class="line">            font-size: $font-size-small-s</span><br><span class="line">          .text</span><br><span class="line">            font-size: $font-size-small</span><br><span class="line">      .list-close</span><br><span class="line">        text-align: center</span><br><span class="line">        line-height: 50px</span><br><span class="line">        background: $color-background</span><br><span class="line">        font-size: $font-size-medium-x</span><br><span class="line">        color: $color-text-l</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="歌曲列表组件显示和隐藏的控制"><a href="#歌曲列表组件显示和隐藏的控制" class="headerlink" title="歌曲列表组件显示和隐藏的控制"></a>歌曲列表组件显示和隐藏的控制</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 蒙层添加点击关闭事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playlist"</span> <span class="attr">v-show</span>=<span class="string">"showFlag"</span> @<span class="attr">click</span>=<span class="string">"hide"</span>&gt;</span></span><br><span class="line">	  <span class="comment">&lt;!-- 列表组件添加阻止冒泡事件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-wrapper"</span> @<span class="attr">click.stop</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        showFlag: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      show() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.showFlag = <span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      hide() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.showFlag = <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="歌曲列表组件播放列表的实现"><a href="#歌曲列表组件播放列表的实现" class="headerlink" title="歌曲列表组件播放列表的实现"></a>歌曲列表组件播放列表的实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      showFlag: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'sequenceList'</span>,</span><br><span class="line">      <span class="string">'currentSong'</span>,</span><br><span class="line">      <span class="string">'playlist'</span>,</span><br><span class="line">      <span class="string">'mode'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">      <span class="keyword">this</span>.showFlag = <span class="literal">true</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$refs.listContent.refresh()</span><br><span class="line">        <span class="keyword">this</span>.scrollToCurrent(<span class="keyword">this</span>.currentSong)</span><br><span class="line">      &#125;, <span class="number">20</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide() &#123;</span><br><span class="line">      <span class="keyword">this</span>.showFlag = <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getCurrentIcon(item) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.currentSong.id === item.id ? <span class="string">'icon-play'</span> : <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    selectItem(item, index) &#123;</span><br><span class="line">      <span class="comment">// 播放模式是随机播放, 找到歌曲索引</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.mode === playMode.random) &#123;</span><br><span class="line">        index = <span class="keyword">this</span>.playlist.findIndex(<span class="function">(<span class="params">song</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> song.id === item.id</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.setCurrentIndex(index)</span><br><span class="line">      <span class="keyword">this</span>.setPlayingState(<span class="literal">true</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    scrollToCurrent(current) &#123;</span><br><span class="line">      <span class="keyword">const</span> index = <span class="keyword">this</span>.sequenceList.findIndex(<span class="function">(<span class="params">song</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> current.id === song.id</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.$refs.listContent.scrollToElement(<span class="keyword">this</span>.$refs.listItem[index], <span class="number">300</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      <span class="string">'setCurrentIndex'</span>: <span class="string">'SET_CURRENT_INDEX'</span>,</span><br><span class="line">      <span class="string">'setPlayingState'</span>: <span class="string">'SET_PLAYING_STATE'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    currentSong(newSong, oldSong) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.showFlag || newSong.id === oldSong.id) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.scrollToCurrent(newSong)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Scroll</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加action, 清空playlist<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteSongList = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; commit &#125;</span>) </span>&#123;</span><br><span class="line">  commit(types.SET_PLAYLIST, [])</span><br><span class="line">  commit(types.SET_SEQUENCE_LIST, [])</span><br><span class="line">  commit(types.SET_CURRENT_INDEX, <span class="number">-1</span>)</span><br><span class="line">  commit(types.SET_PLAYING_STATE, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="歌曲列表组件-playerMixin的抽象"><a href="#歌曲列表组件-playerMixin的抽象" class="headerlink" title="歌曲列表组件 playerMixin的抽象"></a>歌曲列表组件 playerMixin的抽象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> playlistMixin = &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'playlist'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.handlePlaylist(<span class="keyword">this</span>.playlist)</span><br><span class="line">  &#125;,</span><br><span class="line">  activated() &#123;</span><br><span class="line">    <span class="keyword">this</span>.handlePlaylist(<span class="keyword">this</span>.playlist)</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    playlist(newVal) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handlePlaylist(newVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handlePlaylist() &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'component must implement handlePlaylist method'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> playerMixin = &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    iconMode() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.mode === playMode.sequence ? <span class="string">'icon-sequence'</span> : <span class="keyword">this</span>.mode === playMode.loop ? <span class="string">'icon-loop'</span> : <span class="string">'icon-random'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'sequenceList'</span>,</span><br><span class="line">      <span class="string">'currentSong'</span>,</span><br><span class="line">      <span class="string">'playlist'</span>,</span><br><span class="line">      <span class="string">'mode'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeMode() &#123;</span><br><span class="line">      <span class="keyword">const</span> mode = (<span class="keyword">this</span>.mode + <span class="number">1</span>) % <span class="number">3</span></span><br><span class="line">      <span class="keyword">this</span>.setPlayMode(mode)</span><br><span class="line">      <span class="keyword">let</span> list = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">if</span> (mode === playMode.random) &#123;</span><br><span class="line">        list = shuffle(<span class="keyword">this</span>.sequenceList)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        list = <span class="keyword">this</span>.sequenceList</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.resetCurrentIndex(list)</span><br><span class="line">      <span class="keyword">this</span>.setPlaylist(list)</span><br><span class="line">    &#125;,</span><br><span class="line">    resetCurrentIndex(list) &#123;</span><br><span class="line">      <span class="keyword">let</span> index = list.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.id === <span class="keyword">this</span>.currentSong.id</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.setCurrentIndex(index)</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      setPlayingState: <span class="string">'SET_PLAYING_STATE'</span>,</span><br><span class="line">      setCurrentIndex: <span class="string">'SET_CURRENT_INDEX'</span>,</span><br><span class="line">      setPlayMode: <span class="string">'SET_PLAY_MODE'</span>,</span><br><span class="line">      setPlaylist: <span class="string">'SET_PLAYLIST'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好处</p>
<ol>
<li>节省代码量</li>
<li>方便代码维护</li>
</ol>
<h2 id="歌曲列表组件add-song组件实现"><a href="#歌曲列表组件add-song组件实现" class="headerlink" title="歌曲列表组件add-song组件实现"></a>歌曲列表组件add-song组件实现</h2><p>组件add-song简单dom结构<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"add-song"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 添加歌曲header start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>添加歌曲到列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-close"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 添加歌曲header end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 搜索框 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-box-wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 搜索框 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 快速导航 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shortcut"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 快速导航 end --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 搜索结果 start --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-result"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 搜索结果 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>添加mixin, search和add-song组件公用<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> searchMixin = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      query: <span class="string">''</span>,</span><br><span class="line">      refreshDelay: <span class="number">120</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'searchHistory'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    blurInput() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.searchBox.blur()</span><br><span class="line">    &#125;,</span><br><span class="line">    saveSearch() &#123;</span><br><span class="line">      <span class="keyword">this</span>.saveSearchHistory(<span class="keyword">this</span>.query)</span><br><span class="line">    &#125;,</span><br><span class="line">    onQueryChange(query) &#123;</span><br><span class="line">      <span class="keyword">this</span>.query = query</span><br><span class="line">    &#125;,</span><br><span class="line">    addQuery(query) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.searchBox.setQuery(query)</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'saveSearchHistory'</span>,</span><br><span class="line">      <span class="string">'deleteSearchHistory'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>添加基础组件switches<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"switches"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"switch-item"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in switches"</span> <span class="attr">:class</span>=<span class="string">"&#123;'active':currentIndex === index&#125;"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"switchItem(index)"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.name&#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      switches: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: []</span></span><br><span class="line">      &#125;,</span><br><span class="line">      currentIndex: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="number">0</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      switchItem(index) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'switch'</span>, index)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .switches</span><br><span class="line">    display: flex</span><br><span class="line">    align-items: center</span><br><span class="line">    width: 240px</span><br><span class="line">    margin: 0 auto</span><br><span class="line">    border: 1px solid $color-highlight-background</span><br><span class="line">    border-radius: 5px</span><br><span class="line">    .switch-item</span><br><span class="line">      flex: 1</span><br><span class="line">      padding: 8px</span><br><span class="line">      text-align: center</span><br><span class="line">      font-size: $font-size-medium</span><br><span class="line">      color: $color-text-d</span><br><span class="line">      &amp;.active</span><br><span class="line">        background: $color-highlight-background</span><br><span class="line">        color: $color-text</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>实现最近播放<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll</span> <span class="attr">class</span>=<span class="string">"list-scroll"</span> <span class="attr">v-if</span>=<span class="string">"currentIndex===0"</span> <span class="attr">:data</span>=<span class="string">"playHistory"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-inner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">song-list</span> <span class="attr">:songs</span>=<span class="string">"playHistory"</span> @<span class="attr">select</span>=<span class="string">"selectSong"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>实现搜索历史<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll</span> <span class="attr">ref</span>=<span class="string">"searchList"</span> <span class="attr">class</span>=<span class="string">"list-scroll"</span> <span class="attr">v-if</span>=<span class="string">"currentIndex===1"</span> <span class="attr">:data</span>=<span class="string">"searchHistory"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-inner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">search-list</span> <span class="attr">:searches</span>=<span class="string">"searchHistory"</span> @<span class="attr">delete</span>=<span class="string">"deleteSearchHistory"</span> @<span class="attr">select</span>=<span class="string">"addQuery"</span>&gt;</span><span class="tag">&lt;/<span class="name">search-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="歌曲列表组件top-list组件实现"><a href="#歌曲列表组件top-list组件实现" class="headerlink" title="歌曲列表组件top-list组件实现"></a>歌曲列表组件top-list组件实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"drop"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top-tip"</span> <span class="attr">v-show</span>=<span class="string">"showFlag"</span> @<span class="attr">click.stop</span>=<span class="string">"hide"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      delay: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="number">2000</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        showFlag: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      show() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.showFlag = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        clearTimeout(<span class="keyword">this</span>.timer)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.hide()</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="keyword">this</span>.delay)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      hide() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.showFlag = <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .top-tip</span><br><span class="line">    position: fixed</span><br><span class="line">    top: 0</span><br><span class="line">    width: 100%</span><br><span class="line">    z-index: 500</span><br><span class="line">    background: $color-dialog-background</span><br><span class="line">    &amp;.drop-enter-active, &amp;.drop-leave-active</span><br><span class="line">      transition: all 0.3s</span><br><span class="line">    &amp;.drop-enter, &amp;.drop-leave-to</span><br><span class="line">      transform: translate3d(0, -100%, 0)</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>VS code ESLint 配置</title>
    <url>/2018/05/31/VS-code-ESLint-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>下面是说明如何在 VS Code 中对 vue 代码进行检查和自动修复</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>安装 VS code 插件 <a href="https://github.com/vuejs/vetur" target="_blank" rel="noopener">vetur</a> 和 <a href="https://github.com/Microsoft/vscode-eslint" target="_blank" rel="noopener">ESLint</a></p>
<ul>
<li>vetur 是 vue 官方的插件，集成了许多开发必要的功能</li>
<li>ESlint 是 检查工具</li>
</ul>
<h2 id="配置-浏览器设置"><a href="#配置-浏览器设置" class="headerlink" title="配置 浏览器设置"></a>配置 浏览器设置</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">      <span class="string">"javascript"</span>,</span><br><span class="line">      <span class="string">"javascriptreact"</span>,</span><br><span class="line">      <span class="comment">// 支持 *.vue</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">          <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 保存时设置文件的格式。格式化程序必须可用，不能自动保存文件，并且不能关闭编辑器。</span></span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="comment">// 在保存和关闭时自动修复代码</span></span><br><span class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// Vetur 自动使用 eslint-plugin-vue 检测 &lt;template&gt;。Linting配置基于 eslint-plugin-vue 的基本规则集。这是成 false 关闭它</span></span><br><span class="line">  <span class="attr">"vetur.validation.template"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add -D eslint eslint-plugin-vue</span><br></pre></td></tr></table></figure>
<h2 id="设置-ESLint-规则。下面是一个例子："><a href="#设置-ESLint-规则。下面是一个例子：" class="headerlink" title="设置 ESLint 规则。下面是一个例子："></a>设置 ESLint 规则。下面是一个例子：</h2><p>在 <code>.eslintrc</code> 中配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [</span><br><span class="line">    <span class="string">"eslint:recommended"</span>,</span><br><span class="line">    <span class="string">"plugin:vue/recommended"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"vue/html-self-closing"</span>: <span class="string">"off"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考链接</p>
<p><a href="https://vuejs.github.io/vetur/linting-error.html" target="_blank" rel="noopener">Vetur Linting 配置</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>VS Code</tag>
        <tag>ESLint</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code debug 配置</title>
    <url>/2018/05/31/VS-Code-debug-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>下面是说明通过 <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">Vue CLI</a> 生成的 Vue.js 应用程序中，如何使用 VS Code 的 <a href="https://github.com/Microsoft/VSCode-chrome-debug" target="_blank" rel="noopener">Debugger for Chrome</a> 扩展进行调试</p>
<h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><ol>
<li>安装好chrome 和 VSCode</li>
<li>通过 vue-cli 创建项目</li>
</ol>
<h3 id="在-Chrome-Devtools-中展示源代码"><a href="#在-Chrome-Devtools-中展示源代码" class="headerlink" title="在 Chrome Devtools 中展示源代码"></a>在 Chrome Devtools 中展示源代码</h3><p>打开 <code>config/index.js</code> 并找到 <code>devtool</code> 属性。将其更新为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">devtool: &apos;source-map&apos;,</span><br></pre></td></tr></table></figure>
<h3 id="从-VS-Code-启动应用"><a href="#从-VS-Code-启动应用" class="headerlink" title="从 VS Code 启动应用"></a>从 VS Code 启动应用</h3><p>配置 <code>.vscode/launch.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">  <span class="attr">"configurations"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"chrome"</span>,</span><br><span class="line">      <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"vuejs: chrome"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"http://localhost:8080"</span>,</span><br><span class="line">      <span class="attr">"webRoot"</span>: <span class="string">"$&#123;workspaceFolder&#125;/src"</span>,</span><br><span class="line">      <span class="attr">"breakOnLoad"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"sourceMapPathOverrides"</span>: &#123;</span><br><span class="line">        <span class="attr">"webpack:///src/*"</span>: <span class="string">"$&#123;webRoot&#125;/*"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><ol>
<li>设置断点</li>
<li>用终端工具输入 <code>npm start</code>启动项目 </li>
<li>来到 Debug 视图，选择 ‘vuejs: chrome’ 配置，然后按 F5 或点击那个绿色的 play 按钮。</li>
<li>随着一个新的 Chrome 实例打开 <a href="http://localhost:8080，你的断点现在应该被命中了。" target="_blank" rel="noopener">http://localhost:8080，你的断点现在应该被命中了。</a></li>
</ol>
<p>我在调试中碰到了返回 500 Internal Privoxy Error 的情况，后来发现是代理工具 <a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">shadowsocks</a> 代理模式设置为<strong>全局模式</strong>的原因，把模式修改为 <strong>PAC 模式</strong>后便可正常调试了。</p>
<blockquote>
<p>参考链接</p>
<p><a href="https://cn.vuejs.org/v2/cookbook/debugging-in-vscode.html" target="_blank" rel="noopener">vue官方配置说明</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>VS Code</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第13章 编译打包）</title>
    <url>/2017/08/16/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC13%E7%AB%A0-%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第13章-编译打包）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第13章-编译打包）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第13章 编译打包）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第13章 编译打包）</h1><h2 id="编译打包-项目编译打包及node服务测试"><a href="#编译打包-项目编译打包及node服务测试" class="headerlink" title="编译打包-项目编译打包及node服务测试"></a>编译打包-项目编译打包及node服务测试</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">let</span> config = <span class="built_in">require</span>(<span class="string">'./config/index'</span>)</span><br><span class="line"><span class="keyword">let</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apiRoutes = express.Router()</span><br><span class="line"></span><br><span class="line">apiRoutes.get(<span class="string">'/getDiscList'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'</span></span><br><span class="line">  axios.get(url, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      referer: <span class="string">'https://c.y.qq.com/'</span>,</span><br><span class="line">      host: <span class="string">'c.y.qq.com'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    params: req.query</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    res.json(response.data)</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">apiRoutes.get(<span class="string">'/lyric'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'https://c.y.qq.com/lyric/fcgi-bin/fcg_query_lyric_new.fcg'</span></span><br><span class="line"></span><br><span class="line">  axios.get(url, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      referer: <span class="string">'https://c.y.qq.com/'</span>,</span><br><span class="line">      host: <span class="string">'c.y.qq.com'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    params: req.query</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ret = response.data</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ret === <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> reg = <span class="regexp">/^\w+\((&#123;[^()]+&#125;)\)$/</span></span><br><span class="line">      <span class="keyword">var</span> matches = ret.match(reg)</span><br><span class="line">      <span class="keyword">if</span> (matches) &#123;</span><br><span class="line">        ret = <span class="built_in">JSON</span>.parse(matches[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.json(ret)</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/api'</span>, apiRoutes)</span><br><span class="line"></span><br><span class="line">app.use(express.static(<span class="string">'./dist'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> port = process.env.PORT || config.build.port</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app.listen(port, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (err) &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Listening at https://localhost:'</span> + port + <span class="string">'\n'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="编译打包-路由组件实现懒加载"><a href="#编译打包-路由组件实现懒加载" class="headerlink" title="编译打包-路由组件实现懒加载"></a>编译打包-路由组件实现懒加载</h2><p>修改router<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Recommend = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'components/recommend/recommend'</span>)</span><br><span class="line"><span class="keyword">const</span> Singer = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'components/singer/singer'</span>)</span><br><span class="line"><span class="keyword">const</span> Rank = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'components/rank/rank'</span>)</span><br><span class="line"><span class="keyword">const</span> Search = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'components/search/search'</span>)</span><br><span class="line"><span class="keyword">const</span> SingerDetail = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'components/singer-detail/singer-detail'</span>)</span><br><span class="line"><span class="keyword">const</span> Disc = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'components/disc/disc'</span>)</span><br><span class="line"><span class="keyword">const</span> TopList = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'components/top-list/top-list'</span>)</span><br><span class="line"><span class="keyword">const</span> UserCenter = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'components/user-center/user-center'</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>学习的价值不在于获得源码</li>
<li>组件化、模块化的本质都是分治(把复杂的项目拆分成一个个模块, 把模块拆分成组件, 把能复用的功能都抽象出js文件)</li>
<li>遇到问题要勇于面对、勤于思考</li>
<li>学会主动学习</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第三章 页面骨架开发）</title>
    <url>/2017/07/20/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%89%E7%AB%A0-%E9%A1%B5%E9%9D%A2%E9%AA%A8%E6%9E%B6%E5%BC%80%E5%8F%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第三章-页面骨架开发）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第三章-页面骨架开发）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第三章 页面骨架开发）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第三章 页面骨架开发）</h1><h2 id="页面入口-header-组件的编写"><a href="#页面入口-header-组件的编写" class="headerlink" title="页面入口+header 组件的编写"></a>页面入口+header 组件的编写</h2><h3 id="index-js-添加-viewport"><a href="#index-js-添加-viewport" class="headerlink" title="index.js 添加 viewport"></a>index.js 添加 viewport</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue-music<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="package-json-添加依赖"><a href="#package-json-添加依赖" class="headerlink" title="package.json 添加依赖"></a>package.json 添加依赖</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">	 <span class="attr">"babel-runtime"</span>: <span class="string">"^6.0.0"</span>, <span class="comment">// es语法转义</span></span><br><span class="line">    <span class="attr">"fastclick"</span>: <span class="string">"^1.0.6"</span> <span class="comment">// 解决 移动端点击300毫秒延迟的问题</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-polyfill"</span>: <span class="string">"^6.2.0"</span> <span class="comment">// babel补丁，可以使用es6的一些api</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="src-main-js-引入fastclick"><a href="#src-main-js-引入fastclick" class="headerlink" title="/src/main.js 引入fastclick"></a>/src/main.js 引入fastclick</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入fastclick</span></span><br><span class="line"><span class="keyword">import</span> fastclick <span class="keyword">from</span> <span class="string">'fastclick'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'common/stylus/index.styl'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用fastclick</span></span><br><span class="line">fastclick.attach(<span class="built_in">document</span>.body)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="创建m-header组件"><a href="#创建m-header组件" class="headerlink" title="创建m-header组件"></a>创建m-header组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>Chicken Music<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ecmascript-6"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  @import "~common/stylus/mixin"</span><br><span class="line">  .m-header</span><br><span class="line">    position: relative</span><br><span class="line">    height: 44px</span><br><span class="line">    text-align: center</span><br><span class="line">    color: $color-theme</span><br><span class="line">    font-size: 0</span><br><span class="line">    .icon</span><br><span class="line">      display: inline-block</span><br><span class="line">      vertical-align: top</span><br><span class="line">      margin-top: 6px</span><br><span class="line">      width: 30px</span><br><span class="line">      height: 32px</span><br><span class="line">      margin-right: 9px</span><br><span class="line">      bg-image('logo')</span><br><span class="line">      background-size: 30px 32px</span><br><span class="line">    .text</span><br><span class="line">      display: inline-block</span><br><span class="line">      vertical-align: top</span><br><span class="line">      line-height: 44px</span><br><span class="line">      font-size: $font-size-large</span><br><span class="line">    .mine</span><br><span class="line">      position: absolute</span><br><span class="line">      top: 0</span><br><span class="line">      right: 0</span><br><span class="line">      .icon-mine</span><br><span class="line">        display: block</span><br><span class="line">        padding: 12px</span><br><span class="line">        font-size: 20px</span><br><span class="line">        color: $color-theme</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="App-vue-引入Header组件"><a href="#App-vue-引入Header组件" class="headerlink" title="App.vue 引入Header组件"></a>App.vue 引入Header组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> @<span class="attr">touchmove.prevent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-header</span>&gt;</span><span class="tag">&lt;/<span class="name">m-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ecmascript-6"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> MHeader <span class="keyword">from</span> <span class="string">'components/m-header/m-header'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      MHeader</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="webpack-base-conf-js-别名配置"><a href="#webpack-base-conf-js-别名配置" class="headerlink" title="webpack.base.conf.js 别名配置"></a>webpack.base.conf.js 别名配置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">   extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">   alias: &#123;</span><br><span class="line">     <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">     <span class="string">'common'</span>: resolve(<span class="string">'src/common'</span>),</span><br><span class="line">     <span class="string">'components'</span>: resolve(<span class="string">'src/components'</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<h2 id="路由配置-tab-顶导组件开发"><a href="#路由配置-tab-顶导组件开发" class="headerlink" title="路由配置+ tab 顶导组件开发"></a>路由配置+ tab 顶导组件开发</h2><h3 id="router初始化"><a href="#router初始化" class="headerlink" title="router初始化"></a>router初始化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Recommend <span class="keyword">from</span> <span class="string">'components/recommend/recommend'</span></span><br><span class="line"><span class="keyword">import</span> Singer <span class="keyword">from</span> <span class="string">'components/singer/singer'</span></span><br><span class="line"><span class="keyword">import</span> Rank <span class="keyword">from</span> <span class="string">'components/rank/rank'</span></span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">'components/search/search'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">	 <span class="comment">// 根路径配置</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      redirect: <span class="string">'/recommend'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/recommend'</span>,</span><br><span class="line">      component: Recommend</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/singer'</span>,</span><br><span class="line">      component: Singer</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/rank'</span>,</span><br><span class="line">      component: Rank</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/search'</span>,</span><br><span class="line">      component: Search</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="main-js-引入router"><a href="#main-js-引入router" class="headerlink" title="main.js 引入router"></a>main.js 引入router</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> fastclick <span class="keyword">from</span> <span class="string">'fastclick'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'common/stylus/index.styl'</span></span><br><span class="line"></span><br><span class="line">fastclick.attach(<span class="built_in">document</span>.body)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="App-vue-中使用router"><a href="#App-vue-中使用router" class="headerlink" title="App.vue 中使用router"></a>App.vue 中使用router</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> @<span class="attr">touchmove.prevent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-header</span>&gt;</span><span class="tag">&lt;/<span class="name">m-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建tab-vue-组件"><a href="#创建tab-vue-组件" class="headerlink" title="创建tab.vue 组件"></a>创建tab.vue 组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab"</span>&gt;</span></span><br><span class="line">	// tag: 渲染的标签</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">"div"</span> <span class="attr">class</span>=<span class="string">"tab-item"</span> <span class="attr">to</span>=<span class="string">"/recommend"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tab-link"</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">"div"</span> <span class="attr">class</span>=<span class="string">"tab-item"</span> <span class="attr">to</span>=<span class="string">"/singer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tab-link"</span>&gt;</span>歌手<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">"div"</span> <span class="attr">class</span>=<span class="string">"tab-item"</span> <span class="attr">to</span>=<span class="string">"/rank"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tab-link"</span>&gt;</span>排行</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">"div"</span> <span class="attr">class</span>=<span class="string">"tab-item"</span> <span class="attr">to</span>=<span class="string">"/search"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tab-link"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ecmascript-6"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .tab</span><br><span class="line">    display: flex</span><br><span class="line">    height: 44px</span><br><span class="line">    line-height: 44px</span><br><span class="line">    font-size: $font-size-medium</span><br><span class="line">    .tab-item</span><br><span class="line">      flex: 1</span><br><span class="line">      text-align: center</span><br><span class="line">      .tab-link</span><br><span class="line">        padding-bottom: 5px</span><br><span class="line">        color: $color-text-l</span><br><span class="line">      &amp;.router-link-active</span><br><span class="line">        .tab-link</span><br><span class="line">          color: $color-theme</span><br><span class="line">          border-bottom: 2px solid $color-theme</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="App-vue-引入tab组件"><a href="#App-vue-引入tab组件" class="headerlink" title="App.vue 引入tab组件"></a>App.vue 引入tab组件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> @<span class="attr">touchmove.prevent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">m-header</span>&gt;</span><span class="tag">&lt;/<span class="name">m-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tab</span>&gt;</span><span class="tag">&lt;/<span class="name">tab</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ecmascript-6"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> MHeader <span class="keyword">from</span> <span class="string">'components/m-header/m-header'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Tab <span class="keyword">from</span> <span class="string">'components/tab/tab'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      MHeader,</span><br><span class="line">      Tab</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第七章 播放器内置组件开发）</title>
    <url>/2017/08/07/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%83%E7%AB%A0-%E6%92%AD%E6%94%BE%E5%99%A8%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第七章-播放器内置组件开发）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第七章-播放器内置组件开发）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第七章 播放器内置组件开发）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第七章 播放器内置组件开发）</h1><h2 id="播放器Vuex数据设计"><a href="#播放器Vuex数据设计" class="headerlink" title="播放器Vuex数据设计"></a>播放器Vuex数据设计</h2><ol>
<li>state<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  singer: &#123;&#125;,</span><br><span class="line">  playing: <span class="literal">false</span>,</span><br><span class="line">  fullScreen: <span class="literal">false</span>,</span><br><span class="line">  playlist: [],</span><br><span class="line">  sequenceList: [],</span><br><span class="line">  mode: playMode.sequence,</span><br><span class="line">  currentIndex: <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>state只保留最基础的数据, 计算属性放在getters中</p>
<ol start="2">
<li><p>getters</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> playing = <span class="function"><span class="params">state</span> =&gt;</span> state.playing</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fullScreen = <span class="function"><span class="params">state</span> =&gt;</span> state.fullScreen</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> playlist = <span class="function"><span class="params">state</span> =&gt;</span> state.playlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sequenceList = <span class="function"><span class="params">state</span> =&gt;</span> state.sequenceList</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mode = <span class="function"><span class="params">state</span> =&gt;</span> state.mode</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> currentIndex = <span class="function"><span class="params">state</span> =&gt;</span> state.currentIndex</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> currentSong = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> state.playlist[state.currentIndex] || &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mutation-types</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_PLAYING_STATE = <span class="string">'SET_PLAYING_STATE'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_FULL_SCREEN = <span class="string">'SET_FULL_SCREEN'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_PLAYLIST = <span class="string">'SET_PLAYLIST'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_SEQUENCE_LIST = <span class="string">'SET_SEQUENCE_LIST'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_PLAY_MODE = <span class="string">'SET_PLAY_MODE'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_CURRENT_INDEX = <span class="string">'SET_CURRENT_INDEX'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>mutations</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matutaions = &#123;</span><br><span class="line">  [types.SET_SINGER](state, singer) &#123;</span><br><span class="line">    state.singer = singer</span><br><span class="line">  &#125;,</span><br><span class="line">  [types.SET_PLAYING_STATE](state, flag) &#123;</span><br><span class="line">    state.playing = flag</span><br><span class="line">  &#125;,</span><br><span class="line">  [types.SET_FULL_SCREEN](state, flag) &#123;</span><br><span class="line">    state.fullScreen = flag</span><br><span class="line">  &#125;,</span><br><span class="line">  [types.SET_PLAYLIST](state, list) &#123;</span><br><span class="line">    state.playlist = list</span><br><span class="line">  &#125;,</span><br><span class="line">  [types.SET_SEQUENCE_LIST](state, list) &#123;</span><br><span class="line">    state.sequenceList = list</span><br><span class="line">  &#125;,</span><br><span class="line">  [types.SET_PLAY_MODE](state, mode) &#123;</span><br><span class="line">    state.mode = mode</span><br><span class="line">  &#125;,</span><br><span class="line">  [types.SET_CURRENT_INDEX](state, index) &#123;</span><br><span class="line">    state.currentIndex = index</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> matutaions</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>actions的操作通常有两种</p>
<ol>
<li>异步操作</li>
<li>对mutation的封装</li>
</ol>
<h2 id="播放器Vuex的相关应用"><a href="#播放器Vuex的相关应用" class="headerlink" title="播放器Vuex的相关应用"></a>播放器Vuex的相关应用</h2><ol>
<li><p>新建组件player.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"player"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal-player"</span>&gt;</span></span><br><span class="line">      播放器</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mini-player"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在App.vue中注册组件</p>
</li>
<li><p>在song-list.vue 中派发事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">selectItem(song, index) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'select'</span>, item, index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在actions定义动作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectPlay = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit, state&#125;, &#123;list, index&#125;</span>) </span>&#123;</span><br><span class="line">  commit(types.SET_SEQUENCE_LIST, list)</span><br><span class="line">  commit(types.SET_PLAYLIST, randomList)</span><br><span class="line">  commit(types.SET_CURRENT_INDEX, index)</span><br><span class="line">  commit(types.SET_FULL_SCREEN, <span class="literal">true</span>)</span><br><span class="line">  commit(types.SET_PLAYING_STATE, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在music-list.vue 接收事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">selectItem(item, index) &#123;</span><br><span class="line">  <span class="keyword">this</span>.selectPlay(&#123;</span><br><span class="line">    list: <span class="keyword">this</span>.songs,</span><br><span class="line">    index</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">...mapActions([</span><br><span class="line">  <span class="string">'selectPlay'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="播放器基础样式及歌曲数据的应用"><a href="#播放器基础样式及歌曲数据的应用" class="headerlink" title="播放器基础样式及歌曲数据的应用"></a>播放器基础样式及歌曲数据的应用</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"music-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back"</span> @<span class="attr">click</span>=<span class="string">"back"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-back"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">v-html</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-image"</span> <span class="attr">:style</span>=<span class="string">"bgStyle"</span> <span class="attr">ref</span>=<span class="string">"bgImage"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"play-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"playBtn"</span> <span class="attr">v-show</span>=<span class="string">"songs.length&gt;0"</span> <span class="attr">class</span>=<span class="string">"play"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-play"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>随机播放全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"filter"</span> <span class="attr">ref</span>=<span class="string">"filter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-layer"</span> <span class="attr">ref</span>=<span class="string">"layer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">:data</span>=<span class="string">"songs"</span> @<span class="attr">scroll</span>=<span class="string">"scroll"</span> <span class="attr">:listen-scroll</span>=<span class="string">"listenScroll"</span> <span class="attr">:probe-type</span>=<span class="string">"probeType"</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">ref</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song-list-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">song-list</span> @<span class="attr">select</span>=<span class="string">"selectItem"</span> <span class="attr">:songs</span>=<span class="string">"songs"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"!songs.length"</span> <span class="attr">class</span>=<span class="string">"loading-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loading</span>&gt;</span><span class="tag">&lt;/<span class="name">loading</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">'base/scroll/scroll'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">'base/loading/loading'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> SongList <span class="keyword">from</span> <span class="string">'base/song-list/song-list'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; prefixStyle &#125; <span class="keyword">from</span> <span class="string">'common/js/dom'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> RESERVED_HEIGHT = <span class="number">40</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> transform = prefixStyle(<span class="string">'transform'</span>)</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> backdrop = prefixStyle(<span class="string">'backdrop-filter'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    bgImage: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    songs: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: []</span></span><br><span class="line">    &#125;,</span><br><span class="line">    title: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      scrollY: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    bgStyle() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="string">`background-image:url(<span class="subst">$&#123;<span class="keyword">this</span>.bgImage&#125;</span>)`</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.probeType = <span class="number">3</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.listenScroll = <span class="literal">true</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.imageHeight = <span class="keyword">this</span>.$refs.bgImage.clientHeight</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.minTransalteY = -<span class="keyword">this</span>.imageHeight + RESERVED_HEIGHT</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$refs.list.$el.style.top = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.imageHeight&#125;</span>px`</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    scroll(pos) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.scrollY = pos.y</span></span><br><span class="line">    &#125;,</span><br><span class="line">    back() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$router.back()</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="comment">// 子组件行为和本身相关, 不要依赖外部组件使用定义子组件, 子组件行为和本身相关, 传item值是子组件点击时该做的事</span></span></span><br><span class="line">    selectItem(item, index) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.selectPlay(&#123;</span></span><br><span class="line"><span class="javascript">        list: <span class="keyword">this</span>.songs,</span></span><br><span class="line">        index</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapActions([</span><br><span class="line"><span class="javascript">      <span class="string">'selectPlay'</span></span></span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    scrollY(newVal) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> translateY = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.minTransalteY, newVal)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> scale = <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> zIndex = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> blur = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 计算图片放大比例</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> percent = <span class="built_in">Math</span>.abs(newVal / <span class="keyword">this</span>.imageHeight)</span></span><br><span class="line">      if (newVal &gt; 0) &#123;</span><br><span class="line">        scale = 1 + percent</span><br><span class="line">        zIndex = 10</span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 计算模糊比例</span></span></span><br><span class="line"><span class="javascript">        blur = <span class="built_in">Math</span>.min(<span class="number">20</span>, percent * <span class="number">20</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs.layer.style[transform] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs.filter.style[backdrop] = <span class="string">`blur(<span class="subst">$&#123;blur&#125;</span>px)`</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (newVal &lt; <span class="keyword">this</span>.minTransalteY) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 向上滑动超过minTransalteY, 改变图片zIndex和高度, 按钮消失</span></span></span><br><span class="line">        zIndex = 10</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="string">`<span class="subst">$&#123;RESERVED_HEIGHT&#125;</span>px`</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.playBtn.style.display = <span class="string">'none'</span></span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 反之, 重置</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="string">'70%'</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.playBtn.style.display = <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs.bgImage.style[transform] = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs.bgImage.style.zIndex = zIndex</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Scroll,</span><br><span class="line">    Loading,</span><br><span class="line">    SongList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="播放器展开收起动画"><a href="#播放器展开收起动画" class="headerlink" title="播放器展开收起动画"></a>播放器展开收起动画</h2><p>第三方库: <a href="https://github.com/HenrikJoreteg/create-keyframe-animation" target="_blank" rel="noopener">create-keyframe-animation</a><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"normal"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">enter</span>=<span class="string">"enter"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">after-enter</span>=<span class="string">"afterEnter"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">leave</span>=<span class="string">"leave"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">after-leave</span>=<span class="string">"afterLeave"</span>&gt;</span></span><br><span class="line">  ...normal</span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入插件</span></span><br><span class="line"><span class="keyword">import</span> animations <span class="keyword">from</span> <span class="string">'create-keyframe-animation'</span></span><br><span class="line"><span class="keyword">import</span> &#123;prefixStyle&#125; <span class="keyword">from</span> <span class="string">'common/js/dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> transform = prefixStyle(<span class="string">'transform'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加methods方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动画进入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;object&#125;</span>   </span>el   dom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Function&#125;</span> </span>done 回调函数, 即afterEnter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">enter(el, done) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;x, y, scale&#125; = <span class="keyword">this</span>._getPosAndScale()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> animation = &#123;</span><br><span class="line">    <span class="number">0</span>: &#123;</span><br><span class="line">      transform: <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,<span class="subst">$&#123;y&#125;</span>px,0) scale(<span class="subst">$&#123;scale&#125;</span>)`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">60</span>: &#123;</span><br><span class="line">      transform: <span class="string">`translate3d(0,0,0) scale(1.1)`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">100</span>: &#123;</span><br><span class="line">      transform: <span class="string">`translate3d(0,0,0) scale(1)`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  animations.registerAnimation(&#123;</span><br><span class="line">    name: <span class="string">'move'</span>,</span><br><span class="line">    animation,</span><br><span class="line">    presets: &#123;</span><br><span class="line">      duration: <span class="number">400</span>,</span><br><span class="line">      easing: <span class="string">'linear'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  animations.runAnimation(<span class="keyword">this</span>.$refs.cdWrapper, <span class="string">'move'</span>, done)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注销动画</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">afterEnter() &#123;</span><br><span class="line">  animations.unregisterAnimation(<span class="string">'move'</span>)</span><br><span class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style.animation = <span class="string">''</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动画离开</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;object&#125;</span>   </span>el   dom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;Function&#125;</span> </span>done 回调函数, 即afterLeave</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">leave(el, done) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style.transition = <span class="string">'all 0.4s'</span></span><br><span class="line">  <span class="keyword">const</span> &#123;x, y, scale&#125; = <span class="keyword">this</span>._getPosAndScale()</span><br><span class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;x&#125;</span>px,<span class="subst">$&#123;y&#125;</span>px,0) scale(<span class="subst">$&#123;scale&#125;</span>)`</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.cdWrapper.addEventListener(<span class="string">'transitionend'</span>, done)</span><br><span class="line">&#125;,</span><br><span class="line">afterLeave() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style.transition = <span class="string">''</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.cdWrapper.style[transform] = <span class="string">''</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算相对位置和缩放比例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;object&#125;</span> </span>宽度, 高度, 缩放比例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">_getPosAndScale() &#123;</span><br><span class="line">  <span class="keyword">const</span> targetWidth = <span class="number">40</span></span><br><span class="line">  <span class="keyword">const</span> paddingLeft = <span class="number">40</span></span><br><span class="line">  <span class="keyword">const</span> paddingBottom = <span class="number">30</span></span><br><span class="line">  <span class="keyword">const</span> paddingTop = <span class="number">80</span></span><br><span class="line">  <span class="keyword">const</span> width = <span class="built_in">window</span>.innerWidth * <span class="number">0.8</span></span><br><span class="line">  <span class="keyword">const</span> scale = targetWidth / width</span><br><span class="line">  <span class="keyword">const</span> x = -(<span class="built_in">window</span>.innerWidth / <span class="number">2</span> - paddingLeft)</span><br><span class="line">  <span class="keyword">const</span> y = <span class="built_in">window</span>.innerHeight - paddingTop - width / <span class="number">2</span> - paddingBottom</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    x,</span><br><span class="line">    y,</span><br><span class="line">    scale</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h2 id="播放器歌曲播放功能实现"><a href="#播放器歌曲播放功能实现" class="headerlink" title="播放器歌曲播放功能实现"></a>播放器歌曲播放功能实现</h2><ol>
<li><p>添加radio</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">ref</span>=<span class="string">"audio"</span> <span class="attr">:src</span>=<span class="string">"currentSong.url"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加methods: togglePlaying, watch: currentSong,<br>playing</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// methods</span></span><br><span class="line">togglePlaying() &#123;</span><br><span class="line">  <span class="keyword">this</span>.setPlayingState(!<span class="keyword">this</span>.playing)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watch</span></span><br><span class="line">currentSong(newSong, oldSong) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.audio.play()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">playing(newPlaying) &#123;</span><br><span class="line">  <span class="keyword">const</span> audio = <span class="keyword">this</span>.$refs.audio</span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    newPlaying ? audio.play() : audio.pause()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加计算属性, 计算图标</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">playIcon() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.playing ? <span class="string">'icon-pause'</span> : <span class="string">'icon-play'</span></span><br><span class="line">&#125;,</span><br><span class="line">miniIcon() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.playing ? <span class="string">'icon-pause-mini'</span> : <span class="string">'icon-play-mini'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加计算属性, 计算图标是否旋转</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cdCls() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.playing ? <span class="string">'play'</span> : <span class="string">'play pause'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.cd</span> &#123;</span><br><span class="line">	&amp;<span class="selector-class">.play</span> &#123;</span><br><span class="line">		<span class="attribute">animation</span>: rotate <span class="number">20s</span> linear infinite</span><br><span class="line">	&#125;</span><br><span class="line">	&amp;.pause &#123;</span><br><span class="line">		animation-play-state: paused</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes rotate &#123;</span><br><span class="line">	<span class="number">0%</span> &#123;</span><br><span class="line">		transform: rotate(<span class="number">0</span>)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">	    transform: rotate(<span class="number">360deg</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="播放器歌曲前进后退功能实现"><a href="#播放器歌曲前进后退功能实现" class="headerlink" title="播放器歌曲前进后退功能实现"></a>播放器歌曲前进后退功能实现</h2><ol>
<li>添加歌曲上一首, 下一首事件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 播放下一首歌</span></span><br><span class="line">next() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.songReady) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="keyword">this</span>.currentIndex + <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (index === <span class="keyword">this</span>.playlist.length) &#123;</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.setCurrentIndex(index)</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</span><br><span class="line">    <span class="keyword">this</span>.togglePlaying()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.songReady = <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 播放上一首歌</span></span><br><span class="line">prev() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.songReady) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="keyword">this</span>.currentIndex - <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">-1</span>) &#123;</span><br><span class="line">    index = <span class="keyword">this</span>.playlist.length - <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.setCurrentIndex(index)</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</span><br><span class="line">    <span class="keyword">this</span>.togglePlaying()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.songReady = <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">ready() &#123;</span><br><span class="line">  <span class="keyword">this</span>.songReady = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="播放器播放时间获取和更新"><a href="#播放器播放时间获取和更新" class="headerlink" title="播放器播放时间获取和更新"></a>播放器播放时间获取和更新</h2><p>添加事件<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取播放时间</span></span><br><span class="line">updateTime(e) &#123;</span><br><span class="line">  <span class="keyword">this</span>.currentTime = e.target.currentTime</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 补位</span></span><br><span class="line">_pad(num, n = <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = num.toString().length</span><br><span class="line">  <span class="keyword">while</span> (len &lt; n) &#123;</span><br><span class="line">    num = <span class="string">'0'</span> + num</span><br><span class="line">    len++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 格式化</span></span><br><span class="line">format(interval) &#123;</span><br><span class="line">  interval = interval | <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> minute = interval / <span class="number">60</span> | <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> second = <span class="keyword">this</span>._pad(interval % <span class="number">60</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;minute&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="播放器progress-bar进度条组件实现"><a href="#播放器progress-bar进度条组件实现" class="headerlink" title="播放器progress-bar进度条组件实现"></a>播放器progress-bar进度条组件实现</h2><ol>
<li><p>palyer.vue 添加计算属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">percent() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.currentTime / <span class="keyword">this</span>.currentSong.duration</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加基础组件progress-bar.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">ref</span>=<span class="string">"progressBar"</span> @<span class="attr">click</span>=<span class="string">"progressClick"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar-inner"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span> <span class="attr">ref</span>=<span class="string">"progress"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-btn-wrapper"</span> <span class="attr">ref</span>=<span class="string">"progressBtn"</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">touchstart.prevent</span>=<span class="string">"progressTouchStart"</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">touchmove.prevent</span>=<span class="string">"progressTouchMove"</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">touchend</span>=<span class="string">"progressTouchEnd"</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-btn"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;prefixStyle&#125; <span class="keyword">from</span> <span class="string">'common/js/dom'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> progressBtnWidth = <span class="number">16</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> transform = prefixStyle(<span class="string">'transform'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      percent: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="number">0</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.touch = &#123;&#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      progressTouchStart(e) &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 标识位, 表示已经初始化</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.touch.initiated = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 点击位置</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.touch.startX = e.touches[<span class="number">0</span>].pageX</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 进度条宽度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.touch.left = <span class="keyword">this</span>.$refs.progress.clientWidth</span></span><br><span class="line">      &#125;,</span><br><span class="line">      progressTouchMove(e) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="keyword">this</span>.touch.initiated) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="comment">// 偏移量</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> deltaX = e.touches[<span class="number">0</span>].pageX - <span class="keyword">this</span>.touch.startX</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 移动距离</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> offsetWidth = <span class="built_in">Math</span>.min(<span class="keyword">this</span>.$refs.progressBar.clientWidth - progressBtnWidth, <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="keyword">this</span>.touch.left + deltaX))</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>._offset(offsetWidth)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      progressTouchEnd() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.touch.initiated = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>._triggerPercent()</span></span><br><span class="line">      &#125;,</span><br><span class="line">      /**</span><br><span class="line">       * 点击进度条事件</span><br><span class="line"><span class="javascript">       * @param  &#123;<span class="built_in">Object</span>&#125; e event对象</span></span><br><span class="line">       */</span><br><span class="line">      progressClick(e) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> rect = <span class="keyword">this</span>.$refs.progressBar.getBoundingClientRect()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> offsetWidth = e.pageX - rect.left</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>._offset(offsetWidth)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 这里当我们点击 progressBtn 的时候，e.offsetX 获取不对</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// this._offset(e.offsetX)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>._triggerPercent()</span></span><br><span class="line">      &#125;,</span><br><span class="line">      _triggerPercent() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> barWidth = <span class="keyword">this</span>.$refs.progressBar.clientWidth - progressBtnWidth</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> percent = <span class="keyword">this</span>.$refs.progress.clientWidth / barWidth</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'percentChange'</span>, percent)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      _offset(offsetWidth) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.progress.style.width = <span class="string">`<span class="subst">$&#123;offsetWidth&#125;</span>px`</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.progressBtn.style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;offsetWidth&#125;</span>px,0,0)`</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      percent(newPercent) &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// 没有在拖动中</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (newPercent &gt;= <span class="number">0</span> &amp;&amp; !<span class="keyword">this</span>.touch.initiated) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 进度条宽度</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> barWidth = <span class="keyword">this</span>.$refs.progressBar.clientWidth - progressBtnWidth</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 偏移宽度</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> offsetWidth = newPercent * barWidth</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>._offset(offsetWidth)</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .progress-bar</span><br><span class="line">    height: 30px</span><br><span class="line">    .bar-inner</span><br><span class="line">      position: relative</span><br><span class="line">      top: 13px</span><br><span class="line">      height: 4px</span><br><span class="line">      background: rgba(0, 0, 0, 0.3)</span><br><span class="line">      .progress</span><br><span class="line">        position: absolute</span><br><span class="line">        height: 100%</span><br><span class="line">        background: $color-theme</span><br><span class="line">      .progress-btn-wrapper</span><br><span class="line">        position: absolute</span><br><span class="line">        left: -8px</span><br><span class="line">        top: -13px</span><br><span class="line">        width: 30px</span><br><span class="line">        height: 30px</span><br><span class="line">        .progress-btn</span><br><span class="line">          position: relative</span><br><span class="line">          top: 7px</span><br><span class="line">          left: 7px</span><br><span class="line">          box-sizing: border-box</span><br><span class="line">          width: 16px</span><br><span class="line">          height: 16px</span><br><span class="line">          border: 3px solid $color-text</span><br><span class="line">          border-radius: 50%</span><br><span class="line">          background: $color-theme</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>组件player.vue 添加事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onProgressBarChange(percent) &#123;</span><br><span class="line">  <span class="keyword">const</span> currentTime = <span class="keyword">this</span>.currentSong.duration * percent</span><br><span class="line">  <span class="keyword">this</span>.$refs.audio.currentTime = currentTime</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.playing) &#123;</span><br><span class="line">    <span class="keyword">this</span>.togglePlaying()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="播放器progress-circle-圆形进度条组件实现"><a href="#播放器progress-circle-圆形进度条组件实现" class="headerlink" title="播放器progress-circle 圆形进度条组件实现"></a>播放器progress-circle 圆形进度条组件实现</h1><p>添加基础组件progress-circle<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-circle"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- viewBox和r成比例 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">:width</span>=<span class="string">"radius"</span> <span class="attr">:height</span>=<span class="string">"radius"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 100 100"</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">class</span>=<span class="string">"progress-background"</span> <span class="attr">r</span>=<span class="string">"50"</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">r</span>=<span class="string">"50"</span> <span class="attr">cx</span>=<span class="string">"50"</span> <span class="attr">cy</span>=<span class="string">"50"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">:stroke-dasharray</span>=<span class="string">"dashArray"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:stroke-dashoffset</span>=<span class="string">"dashOffset"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      radius: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="number">100</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      percent: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="number">0</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        dashArray: <span class="built_in">Math</span>.PI * <span class="number">100</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      dashOffset() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (<span class="number">1</span> - <span class="keyword">this</span>.percent) * <span class="keyword">this</span>.dashArray</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .progress-circle</span><br><span class="line">    position: relative</span><br><span class="line">    circle</span><br><span class="line">      stroke-width: 8px</span><br><span class="line">      transform-origin: center</span><br><span class="line">      &amp;.progress-background</span><br><span class="line">        transform: scale(0.9)</span><br><span class="line">        stroke: $color-theme-d</span><br><span class="line">      &amp;.progress-bar</span><br><span class="line">        transform: scale(0.9) rotate(-90deg)</span><br><span class="line">        stroke: $color-theme</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="播放器模式切换功能实现"><a href="#播放器模式切换功能实现" class="headerlink" title="播放器模式切换功能实现"></a>播放器模式切换功能实现</h1><ol>
<li><p>添加common/js/util.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomInt</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>) + min)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">shuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> _arr = arr.slice()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; _arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = getRandomInt(<span class="number">0</span>, i)</span><br><span class="line">    <span class="keyword">let</span> t = _arr[i]</span><br><span class="line">    _arr[i] = _arr[j]</span><br><span class="line">    _arr[j] = t</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在play.vue中添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">changeMode() &#123;</span><br><span class="line">  <span class="keyword">const</span> mode = (<span class="keyword">this</span>.mode + <span class="number">1</span>) % <span class="number">3</span></span><br><span class="line">  <span class="keyword">this</span>.setPlayMode(mode)</span><br><span class="line">  <span class="keyword">let</span> list = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (mode === playMode.random) &#123;</span><br><span class="line">    list = shuffle(<span class="keyword">this</span>.sequenceList)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    list = <span class="keyword">this</span>.sequenceList</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.resetCurrentIndex(list)</span><br><span class="line">  <span class="keyword">this</span>.setPlaylist(list)</span><br><span class="line">&#125;,</span><br><span class="line">resetCurrentIndex(list) &#123;</span><br><span class="line">  <span class="keyword">let</span> index = list.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.id === <span class="keyword">this</span>.currentSong.id</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">this</span>.setCurrentIndex(index)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>在player.vue中添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">end() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.mode === playMode.loop) &#123;</span><br><span class="line">    <span class="keyword">this</span>.loop()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">loop() &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs.audio.currentTime = <span class="number">0</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.audio.play()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>在store/action中添加乱序播放方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> randomPlay = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit&#125;, &#123;list&#125;</span>) </span>&#123;</span><br><span class="line">  commit(types.SET_PLAY_MODE, playMode.random)</span><br><span class="line">  commit(types.SET_SEQUENCE_LIST, list)</span><br><span class="line">  <span class="keyword">let</span> randomList = shuffle(list)</span><br><span class="line">  commit(types.SET_PLAYLIST, randomList)</span><br><span class="line">  commit(types.SET_CURRENT_INDEX, <span class="number">0</span>)</span><br><span class="line">  commit(types.SET_FULL_SCREEN, <span class="literal">true</span>)</span><br><span class="line">  commit(types.SET_PLAYING_STATE, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在music-list.vue中添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">random() &#123;</span><br><span class="line">  <span class="keyword">this</span>.randomPlay(&#123;</span><br><span class="line">    list: <span class="keyword">this</span>.songs</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改store/action</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findIndex</span>(<span class="params">list, song</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> list.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.id === song.id</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> selectPlay = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; commit, state &#125;, &#123; list, index &#125;</span>) </span>&#123;</span><br><span class="line">  commit(types.SET_SEQUENCE_LIST, list)</span><br><span class="line">  <span class="keyword">if</span> (state.mode === playMode.random) &#123;</span><br><span class="line">    <span class="keyword">let</span> randomList = shuffle(list)</span><br><span class="line">    commit(types.SET_PLAYLIST, randomList)</span><br><span class="line">    index = findIndex(randomList, list[index])</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    commit(types.SET_PLAYLIST, list)</span><br><span class="line">  &#125;</span><br><span class="line">  commit(types.SET_CURRENT_INDEX, index)</span><br><span class="line">  commit(types.SET_FULL_SCREEN, <span class="literal">true</span>)</span><br><span class="line">  commit(types.SET_PLAYING_STATE, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="播放器歌词数据抓取"><a href="#播放器歌词数据抓取" class="headerlink" title="播放器歌词数据抓取"></a>播放器歌词数据抓取</h2><ol>
<li><p>添加api/song.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;commonParams&#125; <span class="keyword">from</span> <span class="string">'./config'</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getLyric</span>(<span class="params">mid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'/api/lyric'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class="line">    songmid: mid,</span><br><span class="line">    platform: <span class="string">'yqq'</span>,</span><br><span class="line">    hostUin: <span class="number">0</span>,</span><br><span class="line">    needNewCode: <span class="number">0</span>,</span><br><span class="line">    categoryId: <span class="number">10000000</span>,</span><br><span class="line">    pcachetime: +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    format: <span class="string">'json'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> axios.get(url, &#123;</span><br><span class="line">    params: data</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>build/dev-server.js添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">apiRoutes.get(<span class="string">'/lyric'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'https://c.y.qq.com/lyric/fcgi-bin/fcg_query_lyric_new.fcg'</span></span><br><span class="line"></span><br><span class="line">  axios.get(url, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      referer: <span class="string">'https://c.y.qq.com/'</span>,</span><br><span class="line">      host: <span class="string">'c.y.qq.com'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    params: req.query</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ret = response.data</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> ret === <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> reg = <span class="regexp">/^\w+\((&#123;[^()]+&#125;)\)$/</span></span><br><span class="line">      <span class="keyword">var</span> matches = ret.match(reg)</span><br><span class="line">      <span class="keyword">if</span> (matches) &#123;</span><br><span class="line">        ret = <span class="built_in">JSON</span>.parse(matches[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.json(ret)</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>song.js class 添加获取歌词方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getLyric() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.lyric) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="keyword">this</span>.lyric)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    getLyric(<span class="keyword">this</span>.mid).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.retcode === ERR_OK) &#123;</span><br><span class="line">        <span class="keyword">this</span>.lyric = Base64.decode(res.lyric)</span><br><span class="line">        resolve(<span class="keyword">this</span>.lyric)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'no lyric'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="播放器歌词滚动列表实现"><a href="#播放器歌词滚动列表实现" class="headerlink" title="播放器歌词滚动列表实现"></a>播放器歌词滚动列表实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">handleLyric(&#123;lineNum, txt&#125;) &#123;</span><br><span class="line">  <span class="keyword">this</span>.currentLineNum = lineNum</span><br><span class="line">  <span class="comment">// 超过5行, 滚动到lineNum - 5, 5行之内, 滚动到顶部</span></span><br><span class="line">  <span class="keyword">if</span> (lineNum &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> lineEl = <span class="keyword">this</span>.$refs.lyricLine[lineNum - <span class="number">5</span>]</span><br><span class="line">    <span class="keyword">this</span>.$refs.lyricList.scrollToElement(lineEl, <span class="number">1000</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.lyricList.scrollTo(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.playingLyric = txt</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h2 id="播放器歌词左右滑动实现"><a href="#播放器歌词左右滑动实现" class="headerlink" title="播放器歌词左右滑动实现"></a>播放器歌词左右滑动实现</h2><ol>
<li><p>created时添加变量touch</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">  <span class="keyword">this</span>.touch = &#123;&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加滑动事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">middleTouchStart(e) &#123;</span><br><span class="line">  <span class="keyword">this</span>.touch.initiated = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 用来判断是否是一次移动</span></span><br><span class="line">  <span class="keyword">this</span>.touch.moved = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">const</span> touch = e.touches[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">this</span>.touch.startX = touch.pageX</span><br><span class="line">  <span class="keyword">this</span>.touch.startY = touch.pageY</span><br><span class="line">&#125;,</span><br><span class="line">middleTouchMove(e) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.touch.initiated) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> touch = e.touches[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> deltaX = touch.pageX - <span class="keyword">this</span>.touch.startX</span><br><span class="line">  <span class="keyword">const</span> deltaY = touch.pageY - <span class="keyword">this</span>.touch.startY</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(deltaY) &gt; <span class="built_in">Math</span>.abs(deltaX)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.touch.moved) &#123;</span><br><span class="line">    <span class="keyword">this</span>.touch.moved = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> left = <span class="keyword">this</span>.currentShow === <span class="string">'cd'</span> ? <span class="number">0</span> : -<span class="built_in">window</span>.innerWidth</span><br><span class="line">  <span class="keyword">const</span> offsetWidth = <span class="built_in">Math</span>.min(<span class="number">0</span>, <span class="built_in">Math</span>.max(-<span class="built_in">window</span>.innerWidth, left + deltaX))</span><br><span class="line">  <span class="keyword">this</span>.touch.percent = <span class="built_in">Math</span>.abs(offsetWidth / <span class="built_in">window</span>.innerWidth)</span><br><span class="line">  <span class="keyword">this</span>.$refs.lyricList.$el.style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;offsetWidth&#125;</span>px,0,0)`</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.lyricList.$el.style[transitionDuration] = <span class="number">0</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.middleL.style.opacity = <span class="number">1</span> - <span class="keyword">this</span>.touch.percent</span><br><span class="line">  <span class="keyword">this</span>.$refs.middleL.style[transitionDuration] = <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line">middleTouchEnd() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.touch.moved) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> offsetWidth</span><br><span class="line">  <span class="keyword">let</span> opacity</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.currentShow === <span class="string">'cd'</span>) &#123;</span><br><span class="line">    <span class="comment">// 从右向左滑, 超过10%, 滚动屏幕</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.touch.percent &gt; <span class="number">0.1</span>) &#123;</span><br><span class="line">      offsetWidth = -<span class="built_in">window</span>.innerWidth</span><br><span class="line">      opacity = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.currentShow = <span class="string">'lyric'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      offsetWidth = <span class="number">0</span></span><br><span class="line">      opacity = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.touch.percent &lt; <span class="number">0.9</span>) &#123;</span><br><span class="line">      offsetWidth = <span class="number">0</span></span><br><span class="line">      <span class="keyword">this</span>.currentShow = <span class="string">'cd'</span></span><br><span class="line">      opacity = <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      offsetWidth = -<span class="built_in">window</span>.innerWidth</span><br><span class="line">      opacity = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> time = <span class="number">300</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.lyricList.$el.style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;offsetWidth&#125;</span>px,0,0)`</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.lyricList.$el.style[transitionDuration] = <span class="string">`<span class="subst">$&#123;time&#125;</span>ms`</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.middleL.style.opacity = opacity</span><br><span class="line">  <span class="keyword">this</span>.$refs.middleL.style[transitionDuration] = <span class="string">`<span class="subst">$&#123;time&#125;</span>ms`</span></span><br><span class="line">  <span class="keyword">this</span>.touch.initiated = <span class="literal">false</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="播放器歌词剩余功能实现"><a href="#播放器歌词剩余功能实现" class="headerlink" title="播放器歌词剩余功能实现"></a>播放器歌词剩余功能实现</h2><h2 id="播放器底部播放器适配-mixin的应用"><a href="#播放器底部播放器适配-mixin的应用" class="headerlink" title="播放器底部播放器适配+mixin的应用"></a>播放器底部播放器适配+mixin的应用</h2><p>添加common/js/mixin.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> playlistMixin = &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([</span><br><span class="line">      <span class="string">'playlist'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.handlePlaylist(<span class="keyword">this</span>.playlist)</span><br><span class="line">  &#125;,</span><br><span class="line">  activated() &#123;</span><br><span class="line">    <span class="keyword">this</span>.handlePlaylist(<span class="keyword">this</span>.playlist)</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    playlist(newVal) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handlePlaylist(newVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handlePlaylist() &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'component must implement handlePlaylist method'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入mixin</span></span><br><span class="line"><span class="keyword">import</span> &#123;playlistMixin&#125; <span class="keyword">from</span> <span class="string">'common/js/mixin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用mixin</span></span><br><span class="line">mixins: [playlistMixin],</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加handlePlaylist方法</span></span><br><span class="line">handlePlaylist(playlist) &#123;</span><br><span class="line"><span class="keyword">const</span> bottom = playlist.length &gt; <span class="number">0</span> ? <span class="string">'60px'</span> : <span class="string">''</span></span><br><span class="line">  <span class="comment">// this.$refs.list.$el 是 this.$refs.list的DOM元素</span></span><br><span class="line">  <span class="keyword">this</span>.$refs.list.$el.style.bottom = bottom</span><br><span class="line">  <span class="keyword">this</span>.$refs.list.refresh()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第一章 课程内容介绍）</title>
    <url>/2017/07/16/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AF%BE%E7%A8%8B%E5%86%85%E5%AE%B9%E4%BB%8B%E7%BB%8D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第一章-课程内容介绍）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第一章-课程内容介绍）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第一章 课程内容介绍）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第一章 课程内容介绍）</h1><h2 id="应用的分层逻辑结构模型-总体结构"><a href="#应用的分层逻辑结构模型-总体结构" class="headerlink" title="应用的分层逻辑结构模型(总体结构)"></a>应用的分层逻辑结构模型(总体结构)</h2><p><img src="http://ot2alabfu.bkt.clouddn.com/image/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/%E6%85%95%E8%AF%BE%E7%BD%91/vue2.0%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp/%E6%80%BB%E4%BD%93%E7%BB%93%E6%9E%84.png" alt="总体结构"></p>
<h2 id="课程收获"><a href="#课程收获" class="headerlink" title="课程收获"></a>课程收获</h2><ul>
<li>了解一个中度复杂的应用开发<ul>
<li>拆分目录</li>
<li>设计路由</li>
<li>设计数据结构</li>
</ul>
</li>
<li>掌握vue.js的高级应用<ul>
<li>vuex的状态管理</li>
<li>组件间的数据共享</li>
<li>在路由间跳转并传递复杂的数据</li>
<li>懒加载</li>
</ul>
</li>
<li>学会组件化, 模块化的开发方式<ul>
<li>什么时候该抽象一个组件, 该抽象基础组件还是通用组件还是应用组件</li>
<li>如何设计和开发一个组件</li>
</ul>
</li>
<li>了解原生App体验交互的实现原理</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第九章 排行榜及详情页开发）</title>
    <url>/2017/08/10/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8F%8A%E8%AF%A6%E6%83%85%E9%A1%B5%E5%BC%80%E5%8F%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第九章-排行榜及详情页开发）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第九章-排行榜及详情页开发）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第九章 排行榜及详情页开发）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第九章 排行榜及详情页开发）</h1><h2 id="排行页面布局介绍及排行榜数据抓取"><a href="#排行页面布局介绍及排行榜数据抓取" class="headerlink" title="排行页面布局介绍及排行榜数据抓取"></a>排行页面布局介绍及排行榜数据抓取</h2><p>添加api/rank.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jsonp <span class="keyword">from</span> <span class="string">'common/js/jsonp'</span></span><br><span class="line"><span class="keyword">import</span> &#123;commonParams, options&#125; <span class="keyword">from</span> <span class="string">'./config'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getTopList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/v8/fcg-bin/fcg_myqq_toplist.fcg'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class="line">    needNewCode: <span class="number">1</span>,</span><br><span class="line">    platform: <span class="string">'h5'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> jsonp(url, data, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="排行页排行榜数据应用"><a href="#排行页排行榜数据应用" class="headerlink" title="排行页排行榜数据应用"></a>排行页排行榜数据应用</h2><p>新建组件rank</p>
<h2 id="榜单详情页布局介绍及Vuex实现路由数据通讯"><a href="#榜单详情页布局介绍及Vuex实现路由数据通讯" class="headerlink" title="榜单详情页布局介绍及Vuex实现路由数据通讯"></a>榜单详情页布局介绍及Vuex实现路由数据通讯</h2><p>新建组件top-list</p>
<h2 id="榜单详情页数据抓取和应用"><a href="#榜单详情页数据抓取和应用" class="headerlink" title="榜单详情页数据抓取和应用"></a>榜单详情页数据抓取和应用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getMusicList</span>(<span class="params">topid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/v8/fcg-bin/fcg_v8_toplist_cp.fcg'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class="line">    topid,</span><br><span class="line">    needNewCode: <span class="number">1</span>,</span><br><span class="line">    uin: <span class="number">0</span>,</span><br><span class="line">    tpl: <span class="number">3</span>,</span><br><span class="line">    page: <span class="string">'detail'</span>,</span><br><span class="line">    type: <span class="string">'top'</span>,</span><br><span class="line">    platform: <span class="string">'h5'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> jsonp(url, data, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="带排行的song-list组件扩展和应用"><a href="#带排行的song-list组件扩展和应用" class="headerlink" title="带排行的song-list组件扩展和应用"></a>带排行的song-list组件扩展和应用</h2><ol>
<li><p>添加dom</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rank"</span> <span class="attr">v-show</span>=<span class="string">"rank"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">"getRankCls(index)"</span>&gt;</span>&#123;&#123;getRankText(index)&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加props</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rank: &#123;</span><br><span class="line">  type: <span class="built_in">Boolean</span>,</span><br><span class="line">  <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加methods</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getRankCls(index) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`icon icon<span class="subst">$&#123;index&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'text'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">getRankText(index) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> index + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>music-list添加props</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rank: &#123;</span><br><span class="line">  type: <span class="built_in">Boolean</span>,</span><br><span class="line">  <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第二章 项目准备工作）</title>
    <url>/2017/07/18/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第二章-项目准备工作）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第二章-项目准备工作）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第二章 项目准备工作）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第二章 项目准备工作）</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h2 id="vue-cli脚手架安装"><a href="#vue-cli脚手架安装" class="headerlink" title="vue-cli脚手架安装"></a>vue-cli脚手架安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack vue-music</span><br></pre></td></tr></table></figure>
<h2 id="项目目录介绍及图标字体、公共样式等资源准备"><a href="#项目目录介绍及图标字体、公共样式等资源准备" class="headerlink" title="项目目录介绍及图标字体、公共样式等资源准备"></a>项目目录介绍及图标字体、公共样式等资源准备</h2><p>src目录介绍</p>
<ul>
<li>src<ul>
<li>api （后端请求相关代买）</li>
<li>common （通用静态资源）<ul>
<li>fonts</li>
<li>image</li>
<li>js</li>
<li>stylus<ul>
<li>base.styl （基础样式）</li>
<li>icon.styl （图标字体文件）</li>
<li>index.styl （样式入口文件）</li>
<li>mixin.styl （函数）</li>
<li>reset.styl （重置样式文件）</li>
<li>variable.styl （变量配置）</li>
</ul>
</li>
</ul>
</li>
<li>components （通用组件）</li>
<li>router （路由相关文件）</li>
<li>store （vuex相关代码）</li>
<li>App.vue</li>
<li>main.js （入口文件）</li>
</ul>
</li>
</ul>
<p>variable.styl：设计都有一定的规范，保证风格统一。这个文件定义了颜色规范和字体规范。可以方便知道开发用什么样的颜色，保证开发的方便性。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第六章 歌手详情页开发）</title>
    <url>/2017/07/31/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%85%AD%E7%AB%A0-%E6%AD%8C%E6%89%8B%E8%AF%A6%E6%83%85%E9%A1%B5%E5%BC%80%E5%8F%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第六章-歌手详情页开发）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第六章-歌手详情页开发）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第六章 歌手详情页开发）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第六章 歌手详情页开发）</h1><h2 id="子路由配置以及转场动画实现"><a href="#子路由配置以及转场动画实现" class="headerlink" title="子路由配置以及转场动画实现"></a>子路由配置以及转场动画实现</h2><ol>
<li><p>添加组件singer-detail</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"singer-detail"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line"></span><br><span class="line">  .singer-detail</span><br><span class="line">    position: fixed</span><br><span class="line">    z-index: 100</span><br><span class="line">    top: 0</span><br><span class="line">    left: 0</span><br><span class="line">    right: 0</span><br><span class="line">    bottom: 0</span><br><span class="line">    background: $color-background</span><br><span class="line">  .slide-enter-active, .slide-leave-active</span><br><span class="line">    transition: all 0.3s</span><br><span class="line">  .slide-enter, .slide-leave-to</span><br><span class="line">    transform: translate3d(100%, 0, 0)</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>路由配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/singer'</span>,</span><br><span class="line">  component: Singer,</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">':id'</span>,</span><br><span class="line">      component: SingerDetail</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>singer.vue添加<code>&lt;view-router&gt;</code></p>
</li>
<li><p>listview.vue添加点击事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">selectItem(item) &#123;</span><br><span class="line"> <span class="keyword">this</span>.$emit(<span class="string">'select'</span>, item)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>基础组件不会有业务逻辑, 仅仅派发事件</p>
<ol start="5">
<li>singer.vue添加事件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">selectSinger(singer) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">    path: <span class="string">`/singer/<span class="subst">$&#123;singer.id&#125;</span>`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="初识-Vuex"><a href="#初识-Vuex" class="headerlink" title="初识 Vuex"></a>初识 Vuex</h2><p>学习一个技术栈时, 首先通过3w方式</p>
<ol>
<li>vuex是什么<br>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式</li>
<li>vuex解决什么问题<br>多个组件的数据共享<br>路由间的复杂数据传递</li>
<li>怎么使用vuex</li>
</ol>
<h2 id="Vuex-初始化及歌手数据的配置"><a href="#Vuex-初始化及歌手数据的配置" class="headerlink" title="Vuex 初始化及歌手数据的配置"></a>Vuex 初始化及歌手数据的配置</h2><p>创建目录</p>
<ul>
<li>store<ul>
<li>index.js 入口</li>
<li>state.js 所有状态</li>
<li>mutations.js</li>
<li>mutations-type.js mutations相关字符串常量</li>
<li>actions.js 异步操作, mutations封装</li>
<li>getter.js 获取state映射</li>
</ul>
</li>
</ul>
<p>为什么要有mutations-type</p>
<ol>
<li>书写方便</li>
<li><p>方便lint工具检测</p>
</li>
<li><p>index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span></span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span></span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  actions,</span><br><span class="line">  getters,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  strict: debug,</span><br><span class="line">  plugins: debug ? [createLogger()] : []</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>state.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  singer: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state</span><br></pre></td></tr></table></figure>
</li>
<li><p>mutation-types.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_SINGER = <span class="string">'SET_SINGER'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>mutations</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matutaions = &#123;</span><br><span class="line">  [types.SET_SINGER](state, singer) &#123;</span><br><span class="line">    state.singer = singer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> matutaions</span><br></pre></td></tr></table></figure>
</li>
<li><p>getters.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> singer = <span class="function"><span class="params">state</span> =&gt;</span> state.singer</span><br></pre></td></tr></table></figure>
</li>
<li><p>singer.vue 设置数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapMutations&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations(&#123;</span><br><span class="line">    setSinger: <span class="string">'SET_SINGER'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>singer.vue 设置数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapMutations&#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations(&#123;</span><br><span class="line">    setSinger: <span class="string">'SET_SINGER'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="歌手详情数据抓取"><a href="#歌手详情数据抓取" class="headerlink" title="歌手详情数据抓取"></a>歌手详情数据抓取</h2><ol>
<li>api/singer.js 添加方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSingerDetail</span>(<span class="params">singerId</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/v8/fcg-bin/fcg_v8_singer_track_cp.fcg'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class="line">    hostUin: <span class="number">0</span>,</span><br><span class="line">    needNewCode: <span class="number">0</span>,</span><br><span class="line">    platform: <span class="string">'yqq'</span>,</span><br><span class="line">    order: <span class="string">'listen'</span>,</span><br><span class="line">    begin: <span class="number">0</span>,</span><br><span class="line">    num: <span class="number">80</span>,</span><br><span class="line">    songstatus: <span class="number">1</span>,</span><br><span class="line">    singermid: singerId</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> jsonp(url, data, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="歌手详情数据处理和Song类的封装"><a href="#歌手详情数据处理和Song类的封装" class="headerlink" title="歌手详情数据处理和Song类的封装"></a>歌手详情数据处理和Song类的封装</h2><p>创建class Song<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(&#123;id, mid, singer, name, album, duration, image, url&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">    <span class="keyword">this</span>.mid = mid</span><br><span class="line">    <span class="keyword">this</span>.singer = singer</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.album = album</span><br><span class="line">    <span class="keyword">this</span>.duration = duration</span><br><span class="line">    <span class="keyword">this</span>.image = image</span><br><span class="line">    <span class="keyword">this</span>.url = url</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>设计成类的好处</p>
<ol>
<li>集中一处维护</li>
<li>面向对象的方式, 扩展性强</li>
</ol>
<p>添加工厂方法createSong<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createSong</span>(<span class="params">musicData</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Song(&#123;</span><br><span class="line">    id: musicData.songid,</span><br><span class="line">    mid: musicData.songmid,</span><br><span class="line">    singer: filterSinger(musicData.singer),</span><br><span class="line">    name: musicData.songname,</span><br><span class="line">    album: musicData.albumname,</span><br><span class="line">    duration: musicData.interval,</span><br><span class="line">    image: <span class="string">`https://y.gtimg.cn/music/photo_new/T002R300x300M000<span class="subst">$&#123;musicData.albummid&#125;</span>.jpg?max_age=2592000`</span>,</span><br><span class="line">    url: <span class="string">`http://ws.stream.qqmusic.qq.com/<span class="subst">$&#123;musicData.songid&#125;</span>.m4a?fromtag=46`</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">filterSinger</span>(<span class="params">singer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ret = []</span><br><span class="line">  <span class="keyword">if</span> (!singer) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">  singer.forEach(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">    ret.push(s.name)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> ret.join(<span class="string">'/'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="music-list-组件开发"><a href="#music-list-组件开发" class="headerlink" title="music-list 组件开发"></a>music-list 组件开发</h2><ol>
<li><p>添加业务组件music-list.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"music-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-back"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">v-html</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-image"</span> <span class="attr">:style</span>=<span class="string">"bgStyle"</span> <span class="attr">ref</span>=<span class="string">"bgImage"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"play-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"playBtn"</span> <span class="attr">v-show</span>=<span class="string">"songs.length&gt;0"</span> <span class="attr">class</span>=<span class="string">"play"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-play"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>随机播放全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"filter"</span> <span class="attr">ref</span>=<span class="string">"filter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      bgImage: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      songs: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: []</span></span><br><span class="line">      &#125;,</span><br><span class="line">      title: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      bgStyle() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`background-image:url(<span class="subst">$&#123;<span class="keyword">this</span>.bgImage&#125;</span>)`</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  @import "~common/stylus/mixin"</span><br><span class="line">  .music-list</span><br><span class="line">    position: fixed</span><br><span class="line">    z-index: 100</span><br><span class="line">    top: 0</span><br><span class="line">    left: 0</span><br><span class="line">    bottom: 0</span><br><span class="line">    right: 0</span><br><span class="line">    background: $color-background</span><br><span class="line">    .back</span><br><span class="line">      position absolute</span><br><span class="line">      top: 0</span><br><span class="line">      left: 6px</span><br><span class="line">      z-index: 50</span><br><span class="line">      .icon-back</span><br><span class="line">        display: block</span><br><span class="line">        padding: 10px</span><br><span class="line">        font-size: $font-size-large-x</span><br><span class="line">        color: $color-theme</span><br><span class="line">    .title</span><br><span class="line">      position: absolute</span><br><span class="line">      top: 0</span><br><span class="line">      left: 10%</span><br><span class="line">      z-index: 40</span><br><span class="line">      width: 80%</span><br><span class="line">      no-wrap()</span><br><span class="line">      text-align: center</span><br><span class="line">      line-height: 40px</span><br><span class="line">      font-size: $font-size-large</span><br><span class="line">      color: $color-text</span><br><span class="line">    .bg-image</span><br><span class="line">      position: relative</span><br><span class="line">      width: 100%</span><br><span class="line">      height: 0</span><br><span class="line">      padding-top: 70%</span><br><span class="line">      transform-origin: top</span><br><span class="line">      background-size: cover</span><br><span class="line">      .play-wrapper</span><br><span class="line">        position: absolute</span><br><span class="line">        bottom: 20px</span><br><span class="line">        z-index: 50</span><br><span class="line">        width: 100%</span><br><span class="line">        .play</span><br><span class="line">          box-sizing: border-box</span><br><span class="line">          width: 135px</span><br><span class="line">          padding: 7px 0</span><br><span class="line">          margin: 0 auto</span><br><span class="line">          text-align: center</span><br><span class="line">          border: 1px solid $color-theme</span><br><span class="line">          color: $color-theme</span><br><span class="line">          border-radius: 100px</span><br><span class="line">          font-size: 0</span><br><span class="line">          .icon-play</span><br><span class="line">            display: inline-block</span><br><span class="line">            vertical-align: middle</span><br><span class="line">            margin-right: 6px</span><br><span class="line">            font-size: $font-size-medium-x</span><br><span class="line">          .text</span><br><span class="line">            display: inline-block</span><br><span class="line">            vertical-align: middle</span><br><span class="line">            font-size: $font-size-small</span><br><span class="line">      .filter</span><br><span class="line">        position: absolute</span><br><span class="line">        top: 0</span><br><span class="line">        left: 0</span><br><span class="line">        width: 100%</span><br><span class="line">        height: 100%</span><br><span class="line">        background: rgba(7, 17, 27, 0.4)</span><br><span class="line">    .bg-layer</span><br><span class="line">      position: relative</span><br><span class="line">      height: 100%</span><br><span class="line">      background: $color-background</span><br><span class="line">    .list</span><br><span class="line">      position: fixed</span><br><span class="line">      top: 0</span><br><span class="line">      bottom: 0</span><br><span class="line">      width: 100%</span><br><span class="line">      background: $color-background</span><br><span class="line">      .song-list-wrapper</span><br><span class="line">        padding: 20px 30px</span><br><span class="line">      .loading-container</span><br><span class="line">        position: absolute</span><br><span class="line">        width: 100%</span><br><span class="line">        top: 50%</span><br><span class="line">        transform: translateY(-50%)</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加基础组件song-list.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"song in songs"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>&#123;&#123;song.name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>&#123;&#123;getDesc(song)&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      songs: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: []</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getDesc(song) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;song.singer&#125;</span>·<span class="subst">$&#123;song.album&#125;</span>`</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  @import "~common/stylus/mixin"</span><br><span class="line">  .song-list</span><br><span class="line">    .item</span><br><span class="line">      display: flex</span><br><span class="line">      align-items: center</span><br><span class="line">      box-sizing: border-box</span><br><span class="line">      height: 64px</span><br><span class="line">      font-size: $font-size-medium</span><br><span class="line">      .content</span><br><span class="line">        flex: 1</span><br><span class="line">        line-height: 20px</span><br><span class="line">        overflow: hidden</span><br><span class="line">        .name</span><br><span class="line">          no-wrap()</span><br><span class="line">          color: $color-text</span><br><span class="line">        .desc</span><br><span class="line">          no-wrap()</span><br><span class="line">          margin-top: 4px</span><br><span class="line">          color: $color-text-d</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>dom.js 添加 prefixStyle</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// js中的css前缀补全</span></span><br><span class="line"><span class="keyword">let</span> elementStyle = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>).style</span><br><span class="line"></span><br><span class="line"><span class="comment">// 浏览器能力检测</span></span><br><span class="line"><span class="keyword">let</span> vendor = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> transformNames = &#123;</span><br><span class="line">    webkit: <span class="string">'webkitTransform'</span>,</span><br><span class="line">    Moz: <span class="string">'MozTransform'</span>,</span><br><span class="line">    O: <span class="string">'OTransform'</span>,</span><br><span class="line">    ms: <span class="string">'msTransform'</span>,</span><br><span class="line">    standard: <span class="string">'transform'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> transformNames) &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementStyle[transformNames[key]] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> key</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">prefixStyle</span>(<span class="params">style</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (vendor === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (vendor === <span class="string">'standard'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> style</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> vendor + style.charAt(<span class="number">0</span>).toUpperCase() + style.substr(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>完善music-list.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"music-list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"back"</span> @<span class="attr">click</span>=<span class="string">"back"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-back"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">v-html</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-image"</span> <span class="attr">:style</span>=<span class="string">"bgStyle"</span> <span class="attr">ref</span>=<span class="string">"bgImage"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"play-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"playBtn"</span> <span class="attr">v-show</span>=<span class="string">"songs.length&gt;0"</span> <span class="attr">class</span>=<span class="string">"play"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-play"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>随机播放全部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"filter"</span> <span class="attr">ref</span>=<span class="string">"filter"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-layer"</span> <span class="attr">ref</span>=<span class="string">"layer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">:data</span>=<span class="string">"songs"</span> @<span class="attr">scroll</span>=<span class="string">"scroll"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:listen-scroll</span>=<span class="string">"listenScroll"</span> <span class="attr">:probe-type</span>=<span class="string">"probeType"</span> <span class="attr">class</span>=<span class="string">"list"</span> <span class="attr">ref</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"song-list-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">song-list</span> <span class="attr">:songs</span>=<span class="string">"songs"</span>&gt;</span><span class="tag">&lt;/<span class="name">song-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"!songs.length"</span> <span class="attr">class</span>=<span class="string">"loading-container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loading</span>&gt;</span><span class="tag">&lt;/<span class="name">loading</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">'base/scroll/scroll'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">'base/loading/loading'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> SongList <span class="keyword">from</span> <span class="string">'base/song-list/song-list'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;prefixStyle&#125; <span class="keyword">from</span> <span class="string">'common/js/dom'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> RESERVED_HEIGHT = <span class="number">40</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> transform = prefixStyle(<span class="string">'transform'</span>)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> backdrop = prefixStyle(<span class="string">'backdrop-filter'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      bgImage: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      songs: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: []</span></span><br><span class="line">      &#125;,</span><br><span class="line">      title: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        scrollY: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      bgStyle() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="string">`background-image:url(<span class="subst">$&#123;<span class="keyword">this</span>.bgImage&#125;</span>)`</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.probeType = <span class="number">3</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.listenScroll = <span class="literal">true</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.imageHeight = <span class="keyword">this</span>.$refs.bgImage.clientHeight</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.minTransalteY = -<span class="keyword">this</span>.imageHeight + RESERVED_HEIGHT</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$refs.list.$el.style.top = <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.imageHeight&#125;</span>px`</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      scroll(pos) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.scrollY = pos.y</span></span><br><span class="line">      &#125;,</span><br><span class="line">      back() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$router.back()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      scrollY(newVal) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> translateY = <span class="built_in">Math</span>.max(<span class="keyword">this</span>.minTransalteY, newVal)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> scale = <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> zIndex = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> blur = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 计算图片放大比例</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> percent = <span class="built_in">Math</span>.abs(newVal / <span class="keyword">this</span>.imageHeight)</span></span><br><span class="line">        if (newVal &gt; 0) &#123;</span><br><span class="line">          scale = 1 + percent</span><br><span class="line">          zIndex = 10</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 计算模糊比例</span></span></span><br><span class="line"><span class="javascript">          blur = <span class="built_in">Math</span>.min(<span class="number">20</span>, percent * <span class="number">20</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.layer.style[transform] = <span class="string">`translate3d(0,<span class="subst">$&#123;translateY&#125;</span>px,0)`</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.filter.style[backdrop] = <span class="string">`blur(<span class="subst">$&#123;blur&#125;</span>px)`</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (newVal &lt; <span class="keyword">this</span>.minTransalteY) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 向上滑动超过minTransalteY, 改变图片zIndex和高度, 按钮消失</span></span></span><br><span class="line">          zIndex = 10</span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="string">`<span class="subst">$&#123;RESERVED_HEIGHT&#125;</span>px`</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.playBtn.style.display = <span class="string">'none'</span></span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 反之, 重置</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.bgImage.style.paddingTop = <span class="string">'70%'</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.bgImage.style.height = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.playBtn.style.display = <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.bgImage.style[transform] = <span class="string">`scale(<span class="subst">$&#123;scale&#125;</span>)`</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.bgImage.style.zIndex = zIndex</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Scroll,</span><br><span class="line">      Loading,</span><br><span class="line">      SongList</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  @import "~common/stylus/mixin"</span><br><span class="line">  .music-list</span><br><span class="line">    position: fixed</span><br><span class="line">    z-index: 100</span><br><span class="line">    top: 0</span><br><span class="line">    left: 0</span><br><span class="line">    bottom: 0</span><br><span class="line">    right: 0</span><br><span class="line">    background: $color-background</span><br><span class="line">    .back</span><br><span class="line">      position absolute</span><br><span class="line">      top: 0</span><br><span class="line">      left: 6px</span><br><span class="line">      z-index: 50</span><br><span class="line">      .icon-back</span><br><span class="line">        display: block</span><br><span class="line">        padding: 10px</span><br><span class="line">        font-size: $font-size-large-x</span><br><span class="line">        color: $color-theme</span><br><span class="line">    .title</span><br><span class="line">      position: absolute</span><br><span class="line">      top: 0</span><br><span class="line">      left: 10%</span><br><span class="line">      z-index: 40</span><br><span class="line">      width: 80%</span><br><span class="line">      no-wrap()</span><br><span class="line">      text-align: center</span><br><span class="line">      line-height: 40px</span><br><span class="line">      font-size: $font-size-large</span><br><span class="line">      color: $color-text</span><br><span class="line">    .bg-image</span><br><span class="line">      position: relative</span><br><span class="line">      width: 100%</span><br><span class="line">      height: 0</span><br><span class="line">      padding-top: 70%</span><br><span class="line">      transform-origin: top</span><br><span class="line">      background-size: cover</span><br><span class="line">      .play-wrapper</span><br><span class="line">        position: absolute</span><br><span class="line">        bottom: 20px</span><br><span class="line">        z-index: 50</span><br><span class="line">        width: 100%</span><br><span class="line">        .play</span><br><span class="line">          box-sizing: border-box</span><br><span class="line">          width: 135px</span><br><span class="line">          padding: 7px 0</span><br><span class="line">          margin: 0 auto</span><br><span class="line">          text-align: center</span><br><span class="line">          border: 1px solid $color-theme</span><br><span class="line">          color: $color-theme</span><br><span class="line">          border-radius: 100px</span><br><span class="line">          font-size: 0</span><br><span class="line">          .icon-play</span><br><span class="line">            display: inline-block</span><br><span class="line">            vertical-align: middle</span><br><span class="line">            margin-right: 6px</span><br><span class="line">            font-size: $font-size-medium-x</span><br><span class="line">          .text</span><br><span class="line">            display: inline-block</span><br><span class="line">            vertical-align: middle</span><br><span class="line">            font-size: $font-size-small</span><br><span class="line">      .filter</span><br><span class="line">        position: absolute</span><br><span class="line">        top: 0</span><br><span class="line">        left: 0</span><br><span class="line">        width: 100%</span><br><span class="line">        height: 100%</span><br><span class="line">        background: rgba(7, 17, 27, 0.4)</span><br><span class="line">    .bg-layer</span><br><span class="line">      position: relative</span><br><span class="line">      height: 100%</span><br><span class="line">      background: $color-background</span><br><span class="line">    .list</span><br><span class="line">      position: fixed</span><br><span class="line">      top: 0</span><br><span class="line">      bottom: 0</span><br><span class="line">      width: 100%</span><br><span class="line">      background: $color-background</span><br><span class="line">      .song-list-wrapper</span><br><span class="line">        padding: 20px 30px</span><br><span class="line">      .loading-container</span><br><span class="line">        position: absolute</span><br><span class="line">        width: 100%</span><br><span class="line">        top: 50%</span><br><span class="line">        transform: translateY(-50%)</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第八章 歌单页面开发）</title>
    <url>/2017/08/07/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%AD%8C%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第八章-歌单页面开发）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第八章-歌单页面开发）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第八章 歌单页面开发）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第八章 歌单页面开发）</h1><h2 id="歌单详情页布局介绍及Vuex实现路由数据通讯"><a href="#歌单详情页布局介绍及Vuex实现路由数据通讯" class="headerlink" title="歌单详情页布局介绍及Vuex实现路由数据通讯"></a>歌单详情页布局介绍及Vuex实现路由数据通讯</h2><h2 id="歌单详情页数据抓取"><a href="#歌单详情页数据抓取" class="headerlink" title="歌单详情页数据抓取"></a>歌单详情页数据抓取</h2><p>api/recommend.js 添加方法<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSongList</span>(<span class="params">disstid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/qzone/fcg-bin/fcg_ucc_getcdinfo_byids_cp.fcg'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class="line">    disstid,</span><br><span class="line">    type: <span class="number">1</span>,</span><br><span class="line">    json: <span class="number">1</span>,</span><br><span class="line">    utf8: <span class="number">1</span>,</span><br><span class="line">    onlysong: <span class="number">0</span>,</span><br><span class="line">    platform: <span class="string">'yqq'</span>,</span><br><span class="line">    hostUin: <span class="number">0</span>,</span><br><span class="line">    needNewCode: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> jsonp(url, data, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="歌单详情页数据的处理和应用"><a href="#歌单详情页数据的处理和应用" class="headerlink" title="歌单详情页数据的处理和应用"></a>歌单详情页数据的处理和应用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_normalizeSongs(list) &#123;</span><br><span class="line">  <span class="keyword">let</span> ret = []</span><br><span class="line">  list.forEach(<span class="function">(<span class="params">musicData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (musicData.songid &amp;&amp; musicData.albummid) &#123;</span><br><span class="line">      ret.push(createSong(musicData))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第四章 推荐页面开发）</title>
    <url>/2017/07/26/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%8E%A8%E8%8D%90%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第四章-推荐页面开发）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第四章-推荐页面开发）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第四章 推荐页面开发）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第四章 推荐页面开发）</h1><h2 id="jsonp原理介绍-Promise封装"><a href="#jsonp原理介绍-Promise封装" class="headerlink" title="jsonp原理介绍+Promise封装"></a>jsonp原理介绍+Promise封装</h2><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p><a href="https://github.com/webmodules/jsonp" target="_blank" rel="noopener">jsonp github库</a></p>
<h3 id="Promise封装"><a href="#Promise封装" class="headerlink" title="Promise封装"></a>Promise封装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> originJsonp <span class="keyword">from</span> <span class="string">'jsonp'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, data, option</span>) </span>&#123;</span><br><span class="line">  url += (url.indexOf(<span class="string">'?'</span>) &lt; <span class="number">0</span> ? <span class="string">'?'</span> : <span class="string">'&amp;'</span>) + param(data)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    originJsonp(url, option, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = data[k] !== <span class="literal">undefined</span> ? data[k] : <span class="string">''</span></span><br><span class="line">    url += <span class="string">'&amp;'</span> + k + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> url ? url.substring(<span class="number">1</span>) : <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jsonp的应用-轮播图数据抓取"><a href="#jsonp的应用-轮播图数据抓取" class="headerlink" title="jsonp的应用+轮播图数据抓取"></a>jsonp的应用+轮播图数据抓取</h2><ol>
<li><p>添加请求通用配置文件src/api/config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> commonParams = &#123;</span><br><span class="line">  g_tk: <span class="number">5381</span>,</span><br><span class="line">  inCharset: <span class="string">'utf-8'</span>,</span><br><span class="line">  outCharset: <span class="string">'utf-8'</span>,</span><br><span class="line">  notice: <span class="number">0</span>,</span><br><span class="line">  format: <span class="string">'jsonp'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> options = &#123;</span><br><span class="line">  param: <span class="string">'jsonpCallback'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ERR_OK = <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加接口文件src/api/recommend.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jsonp <span class="keyword">from</span> <span class="string">'common/js/jsonp'</span></span><br><span class="line"><span class="keyword">import</span> &#123;commonParams, options&#125; <span class="keyword">from</span> <span class="string">'./config'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRecommend</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/musichall/fcgi-bin/fcg_yqqhomepagerecommend.fcg'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class="line">    platform: <span class="string">'h5'</span>,</span><br><span class="line">    uin: <span class="number">0</span>,</span><br><span class="line">    needNewCode: <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> jsonp(url, data, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 components/recommend/recommend.vue组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"recommend"</span> <span class="attr">ref</span>=<span class="string">"recommend"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;getRecommend&#125; <span class="keyword">from</span> <span class="string">'api/recommend'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;ERR_OK&#125; <span class="keyword">from</span> <span class="string">'api/config'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        recommends: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>._getRecommend()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      _getRecommend() &#123;</span><br><span class="line"><span class="javascript">        getRecommend().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line">          if (res.code === ERR_OK) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.recommends = res.data.slider</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .recommend</span><br><span class="line">    position: fixed</span><br><span class="line">    width: 100%</span><br><span class="line">    top: 88px</span><br><span class="line">    bottom: 0</span><br><span class="line">    .recommend-content</span><br><span class="line">      height: 100%</span><br><span class="line">      overflow: hidden</span><br><span class="line">      .slider-wrapper</span><br><span class="line">        position: relative</span><br><span class="line">        width: 100%</span><br><span class="line">        overflow: hidden</span><br><span class="line">      .recommend-list</span><br><span class="line">        .list-title</span><br><span class="line">          height: 65px</span><br><span class="line">          line-height: 65px</span><br><span class="line">          text-align: center</span><br><span class="line">          font-size: $font-size-medium</span><br><span class="line">          color: $color-theme</span><br><span class="line">        .item</span><br><span class="line">          display: flex</span><br><span class="line">          box-sizing: border-box</span><br><span class="line">          align-items: center</span><br><span class="line">          padding: 0 20px 20px 20px</span><br><span class="line">          .icon</span><br><span class="line">            flex: 0 0 60px</span><br><span class="line">            width: 60px</span><br><span class="line">            padding-right: 20px</span><br><span class="line">          .text</span><br><span class="line">            display: flex</span><br><span class="line">            flex-direction: column</span><br><span class="line">            justify-content: center</span><br><span class="line">            flex: 1</span><br><span class="line">            line-height: 20px</span><br><span class="line">            overflow: hidden</span><br><span class="line">            font-size: $font-size-medium</span><br><span class="line">            .name</span><br><span class="line">              margin-bottom: 10px</span><br><span class="line">              color: $color-text</span><br><span class="line">            .desc</span><br><span class="line">              color: $color-text-d</span><br><span class="line">      .loading-container</span><br><span class="line">        position: absolute</span><br><span class="line">        width: 100%</span><br><span class="line">        top: 50%</span><br><span class="line">        transform: translateY(-50%)</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="轮播图组件实现"><a href="#轮播图组件实现" class="headerlink" title="轮播图组件实现"></a>轮播图组件实现</h2><ol>
<li>创建基础组件 base/slider/slider.vue<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slider"</span> <span class="attr">ref</span>=<span class="string">"slider"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slider-group"</span> <span class="attr">ref</span>=<span class="string">"sliderGroup"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dots"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dot"</span> <span class="attr">:class</span>=<span class="string">"&#123;active: currentPageIndex === index &#125;"</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in dots"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .slider</span><br><span class="line">    min-height: 1px</span><br><span class="line">    .slider-group</span><br><span class="line">      position: relative</span><br><span class="line">      overflow: hidden</span><br><span class="line">      white-space: nowrap</span><br><span class="line">      .slider-item</span><br><span class="line">        float: left</span><br><span class="line">        box-sizing: border-box</span><br><span class="line">        overflow: hidden</span><br><span class="line">        text-align: center</span><br><span class="line">        a</span><br><span class="line">          display: block</span><br><span class="line">          width: 100%</span><br><span class="line">          overflow: hidden</span><br><span class="line">          text-decoration: none</span><br><span class="line">        img</span><br><span class="line">          display: block</span><br><span class="line">          width: 100%</span><br><span class="line">    .dots</span><br><span class="line">      position: absolute</span><br><span class="line">      right: 0</span><br><span class="line">      left: 0</span><br><span class="line">      bottom: 12px</span><br><span class="line">      text-align: center</span><br><span class="line">      font-size: 0</span><br><span class="line">      .dot</span><br><span class="line">        display: inline-block</span><br><span class="line">        margin: 0 4px</span><br><span class="line">        width: 8px</span><br><span class="line">        height: 8px</span><br><span class="line">        border-radius: 50%</span><br><span class="line">        background: $color-text-l</span><br><span class="line">        &amp;.active</span><br><span class="line">          width: 20px</span><br><span class="line">          border-radius: 5px</span><br><span class="line">          background: $color-text-ll</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="2">
<li>添加设置<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'slider'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 循环轮播</span></span><br><span class="line">    loop: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自动录播</span></span><br><span class="line">    autoPlay: &#123;</span><br><span class="line">      type: <span class="built_in">Boolean</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 轮播间隔</span></span><br><span class="line">    interval: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">4000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="3">
<li><p>引入better-scroll并设置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置sliderGroup宽度</span></span><br><span class="line">_setSliderWidth(isResize) &#123;</span><br><span class="line">        <span class="keyword">this</span>.children = <span class="keyword">this</span>.$refs.sliderGroup.children</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> width = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> sliderWidth = <span class="keyword">this</span>.$refs.slider.clientWidth</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.children.length; i++) &#123;</span><br><span class="line">          <span class="keyword">let</span> child = <span class="keyword">this</span>.children[i]</span><br><span class="line">          addClass(child, <span class="string">'slider-item'</span>)</span><br><span class="line"></span><br><span class="line">          child.style.width = sliderWidth + <span class="string">'px'</span></span><br><span class="line">          width += sliderWidth</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.loop &amp;&amp; !isResize) &#123;</span><br><span class="line">          width += <span class="number">2</span> * sliderWidth</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.$refs.sliderGroup.style.width = width + <span class="string">'px'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加common/js/dom.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">el, className</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|\\s)'</span> + className + <span class="string">'(\\s|$)'</span>)</span><br><span class="line">  <span class="keyword">return</span> reg.test(el.className)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">el, className</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (hasClass(el, className)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> newClass = el.className.split(<span class="string">' '</span>)</span><br><span class="line">  newClass.push(className)</span><br><span class="line">  el.className = newClass.join(<span class="string">' '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在mounted中添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般网页刷新为17毫秒</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">this</span>._setSliderWidth()</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.autoPlay) &#123;</span><br><span class="line">       <span class="keyword">this</span>._play()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在recommend.vue中使用组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// v-if确保slider中有元素后再执行</span></span><br><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">"recommends.length"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"slider-wrapper"</span> ref=<span class="string">"sliderWrapper"</span>&gt;</span><br><span class="line">  &lt;slider&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">for</span>=<span class="string">"item in recommends"</span>&gt;</span><br><span class="line">      &lt;a :href=<span class="string">"item.linkUrl"</span>&gt;</span><br><span class="line">        &lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"needsclick"</span> @load=<span class="string">"loadImage"</span> :src=<span class="string">"item.picUrl"</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/slider&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在slider.vue中初始化slider</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_initSlider() &#123;</span><br><span class="line">  <span class="keyword">this</span>.slider = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.slider, &#123;</span><br><span class="line">    scrollX: <span class="literal">true</span>,</span><br><span class="line">    scrollY: <span class="literal">false</span>,</span><br><span class="line">    momentum: <span class="literal">false</span>,</span><br><span class="line">    snap: <span class="literal">true</span>,</span><br><span class="line">    snapLoop: <span class="keyword">this</span>.loop,</span><br><span class="line">    snapThreshold: <span class="number">0.3</span>,</span><br><span class="line">    snapSpeed: <span class="number">400</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化dots</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加methods</span></span><br><span class="line">_initDots() &#123;</span><br><span class="line">  <span class="keyword">this</span>.dots = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="keyword">this</span>.children.length)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在_initSlider中添加监听事件</span></span><br><span class="line"><span class="keyword">this</span>.slider.on(<span class="string">'scrollEnd'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> pageIndex = <span class="keyword">this</span>.slider.getCurrentPage().pageX</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.loop) &#123;</span><br><span class="line">    pageIndex -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.currentPageIndex = pageIndex</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.autoPlay) &#123;</span><br><span class="line">    <span class="keyword">this</span>._play()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加自动播放事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加methods</span></span><br><span class="line">_initDots() &#123;</span><br><span class="line">  <span class="keyword">this</span>.dots = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="keyword">this</span>.children.length)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在_initSlider中添加监听事件</span></span><br><span class="line">_play() &#123;</span><br><span class="line">  <span class="keyword">let</span> pageIndex = <span class="keyword">this</span>.currentPageIndex + <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.loop) &#123;</span><br><span class="line">    pageIndex += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.slider.goToPage(pageIndex, <span class="number">0</span>, <span class="number">400</span>)</span><br><span class="line">  &#125;, <span class="keyword">this</span>.interval)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改_initSlider</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_initSlider() &#123;</span><br><span class="line">  <span class="keyword">this</span>.slider = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.slider, &#123;</span><br><span class="line">      scrollX: <span class="literal">true</span>,</span><br><span class="line">      scrollY: <span class="literal">false</span>,</span><br><span class="line">      momentum: <span class="literal">false</span>,</span><br><span class="line">      snap: <span class="literal">true</span>,</span><br><span class="line">      snapLoop: <span class="keyword">this</span>.loop,</span><br><span class="line">      snapThreshold: <span class="number">0.3</span>,</span><br><span class="line">      snapSpeed: <span class="number">400</span>,</span><br><span class="line">      click: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.slider.on(<span class="string">'scrollEnd'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> pageIndex = <span class="keyword">this</span>.slider.getCurrentPage().pageX</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.loop) &#123;</span><br><span class="line">          pageIndex -= <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.currentPageIndex = pageIndex</span><br><span class="line">      <span class="comment">// 添加自动播放</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.autoPlay) &#123;</span><br><span class="line">          <span class="keyword">this</span>._play()</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 手动滑动后清除定时器</span></span><br><span class="line">  <span class="keyword">this</span>.slider.on(<span class="string">'beforeScrollStart'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.autoPlay) &#123;</span><br><span class="line">          clearTimeout(<span class="keyword">this</span>.timer)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加窗口改变监听事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.slider) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._setSliderWidth(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">this</span>.slider.refresh()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="歌单数据接口-axios-介绍和后端接口代理"><a href="#歌单数据接口-axios-介绍和后端接口代理" class="headerlink" title="歌单数据接口, axios 介绍和后端接口代理"></a>歌单数据接口, axios 介绍和后端接口代理</h2><ol>
<li><p>在dev-server</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> apiRoutes = express.Router()</span><br><span class="line"></span><br><span class="line">apiRoutes.get(<span class="string">'/getDiscList'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'https://c.y.qq.com/splcloud/fcgi-bin/fcg_get_diss_by_tag.fcg'</span></span><br><span class="line">  axios.get(url, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      referer: <span class="string">'https://c.y.qq.com/'</span>,</span><br><span class="line">      host: <span class="string">'c.y.qq.com'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    params: req.query</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    res.json(response.data)</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/api'</span>, apiRoutes)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在src/api/recommend.js中添加接口getDiscList</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getDiscList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'/api/getDiscList'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class="line">    platform: <span class="string">'yqq'</span>,</span><br><span class="line">    hostUin: <span class="number">0</span>,</span><br><span class="line">    sin: <span class="number">0</span>,</span><br><span class="line">    ein: <span class="number">29</span>,</span><br><span class="line">    sortId: <span class="number">5</span>,</span><br><span class="line">    needNewCode: <span class="number">0</span>,</span><br><span class="line">    categoryId: <span class="number">10000000</span>,</span><br><span class="line">    rnd: <span class="built_in">Math</span>.random(),</span><br><span class="line">    format: <span class="string">'json'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> axios.get(url, &#123;</span><br><span class="line">    params: data</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res.data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在recommend.vue中添加列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"recommend-list"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"list-title"</span>&gt;</span>热门歌单推荐<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in discList"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"60"</span> <span class="attr">height</span>=<span class="string">"60"</span>  <span class="attr">:src</span>=<span class="string">"item.imgurl"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">      // v-html:转义</span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"name"</span> <span class="attr">v-html</span>=<span class="string">"item.creator.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc"</span> <span class="attr">v-html</span>=<span class="string">"item.dissname"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="scroll-组件的抽象和应用"><a href="#scroll-组件的抽象和应用" class="headerlink" title="scroll 组件的抽象和应用"></a>scroll 组件的抽象和应用</h2><ol>
<li><p>添加通用组件scroll</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> BScroll <span class="keyword">from</span> <span class="string">'better-scroll'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      probeType: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="number">1</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      click: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Boolean</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="literal">null</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="javascript">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>._initScroll()</span></span><br><span class="line">      &#125;, 20)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      _initScroll() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="keyword">this</span>.$refs.wrapper) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.scroll = <span class="keyword">new</span> BScroll(<span class="keyword">this</span>.$refs.wrapper, &#123;</span></span><br><span class="line"><span class="javascript">          probeType: <span class="keyword">this</span>.probeType,</span></span><br><span class="line"><span class="javascript">          click: <span class="keyword">this</span>.click</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      enable() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.scroll &amp;&amp; <span class="keyword">this</span>.scroll.enable()</span></span><br><span class="line">      &#125;,</span><br><span class="line">      disable() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.scroll &amp;&amp; <span class="keyword">this</span>.scroll.disable()</span></span><br><span class="line">      &#125;,</span><br><span class="line">      refresh() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.scroll &amp;&amp; <span class="keyword">this</span>.scroll.refresh()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.refresh()</span></span><br><span class="line">        &#125;, 20)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>recommend.vue中添加loadImage</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">loadImage() &#123;</span><br><span class="line">  <span class="comment">// this.checkloaded:标志位, 只计算一次</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.checkloaded) &#123;</span><br><span class="line">    <span class="keyword">this</span>.checkloaded = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.$refs.scroll.refresh()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="vue-lazyloadvue-lazyload-懒加载插件介绍和应用"><a href="#vue-lazyloadvue-lazyload-懒加载插件介绍和应用" class="headerlink" title="vue-lazyloadvue-lazyload 懒加载插件介绍和应用"></a>vue-lazyload<a href="https://github.com/hilongjw/vue-lazyload" target="_blank" rel="noopener">vue-lazyload</a> 懒加载插件介绍和应用</h2><ol>
<li><p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueLazyload <span class="keyword">from</span> <span class="string">'vue-lazyload'</span></span><br><span class="line">Vue.use(VueLazyload, &#123;</span><br><span class="line">  loading: <span class="built_in">require</span>(<span class="string">'common/image/default.png'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>recommend.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"60"</span> <span class="attr">height</span>=<span class="string">"60"</span>  <span class="attr">v-lazy</span>=<span class="string">"item.imgurl"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>fastclick避免拦截, 加class needsclick</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"needsclick"</span> @<span class="attr">load</span>=<span class="string">"loadImage"</span> <span class="attr">:src</span>=<span class="string">"item.picUrl"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="loading-基础组件的开发和应用"><a href="#loading-基础组件的开发和应用" class="headerlink" title="loading 基础组件的开发和应用"></a>loading 基础组件的开发和应用</h2><ol>
<li>添加基础组件loading.vue 在 recommend.vue中使用<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"24"</span> <span class="attr">height</span>=<span class="string">"24"</span> <span class="attr">src</span>=<span class="string">"./loading.gif"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      title: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">'正在载入...'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .loading</span><br><span class="line">    width: 100%</span><br><span class="line">    text-align: center</span><br><span class="line">    .desc</span><br><span class="line">      line-height: 20px</span><br><span class="line">      font-size: $font-size-small</span><br><span class="line">      color: $color-text-l</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第十章 搜索页面开发）</title>
    <url>/2017/08/16/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E5%8D%81%E7%AB%A0-%E6%90%9C%E7%B4%A2%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第十章-搜索页面开发）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第十章-搜索页面开发）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第十章 搜索页面开发）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第十章 搜索页面开发）</h1><h2 id="搜索页面search-box组件开发"><a href="#搜索页面search-box组件开发" class="headerlink" title="搜索页面search-box组件开发"></a>搜索页面search-box组件开发</h2><ol>
<li><p>添加基础组件search-box</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-search"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"query"</span> <span class="attr">v-model</span>=<span class="string">"query"</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">:placeholder</span>=<span class="string">"placeholder"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> @<span class="attr">click</span>=<span class="string">"clear"</span> <span class="attr">v-show</span>=<span class="string">"query"</span> <span class="attr">class</span>=<span class="string">"icon-dismiss"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;debounce&#125; <span class="keyword">from</span> <span class="string">'common/js/util'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      placeholder: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">'搜索歌曲、歌手'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        query: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      clear() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.query = <span class="string">''</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      setQuery(query) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.query = query</span></span><br><span class="line">      &#125;,</span><br><span class="line">      blur() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.query.blur()</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">// 监听query</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$watch(<span class="string">'query'</span>, debounce(<span class="function">(<span class="params">newQuery</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'query'</span>, newQuery)</span></span><br><span class="line">      &#125;, 200))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .search-box</span><br><span class="line">    display: flex</span><br><span class="line">    align-items: center</span><br><span class="line">    box-sizing: border-box</span><br><span class="line">    width: 100%</span><br><span class="line">    padding: 0 6px</span><br><span class="line">    height: 40px</span><br><span class="line">    background: $color-highlight-background</span><br><span class="line">    border-radius: 6px</span><br><span class="line">    .icon-search</span><br><span class="line">      font-size: 24px</span><br><span class="line">      color: $color-background</span><br><span class="line">    .box</span><br><span class="line">      flex: 1</span><br><span class="line">      margin: 0 5px</span><br><span class="line">      line-height: 18px</span><br><span class="line">      background: $color-highlight-background</span><br><span class="line">      color: $color-text</span><br><span class="line">      font-size: $font-size-medium</span><br><span class="line">      &amp;::placeholder</span><br><span class="line">        color: $color-text-d</span><br><span class="line">    .icon-dismiss</span><br><span class="line">      font-size: 16px</span><br><span class="line">      color: $color-background</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加业务组件search</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-box-wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">search-box</span> <span class="attr">ref</span>=<span class="string">"searchBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">search-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> SearchBox <span class="keyword">from</span> <span class="string">'base/search-box/search-box'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      SearchBox</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  @import "~common/stylus/mixin"</span><br><span class="line">  .search</span><br><span class="line">    .search-box-wrapper</span><br><span class="line">      margin: 20px</span><br><span class="line">    .shortcut-wrapper</span><br><span class="line">      position: fixed</span><br><span class="line">      top: 178px</span><br><span class="line">      bottom: 0</span><br><span class="line">      width: 100%</span><br><span class="line">      .shortcut</span><br><span class="line">        height: 100%</span><br><span class="line">        overflow: hidden</span><br><span class="line">        .hot-key</span><br><span class="line">          margin: 0 20px 20px 20px</span><br><span class="line">          .title</span><br><span class="line">            margin-bottom: 20px</span><br><span class="line">            font-size: $font-size-medium</span><br><span class="line">            color: $color-text-l</span><br><span class="line">          .item</span><br><span class="line">            display: inline-block</span><br><span class="line">            padding: 5px 10px</span><br><span class="line">            margin: 0 20px 10px 0</span><br><span class="line">            border-radius: 6px</span><br><span class="line">            background: $color-highlight-background</span><br><span class="line">            font-size: $font-size-medium</span><br><span class="line">            color: $color-text-d</span><br><span class="line">        .search-history</span><br><span class="line">          position: relative</span><br><span class="line">          margin: 0 20px</span><br><span class="line">          .title</span><br><span class="line">            display: flex</span><br><span class="line">            align-items: center</span><br><span class="line">            height: 40px</span><br><span class="line">            font-size: $font-size-medium</span><br><span class="line">            color: $color-text-l</span><br><span class="line">            .text</span><br><span class="line">              flex: 1</span><br><span class="line">            .clear</span><br><span class="line">              extend-click()</span><br><span class="line">              .icon-clear</span><br><span class="line">                font-size: $font-size-medium</span><br><span class="line">                color: $color-text-d</span><br><span class="line">    .search-result</span><br><span class="line">      position: fixed</span><br><span class="line">      width: 100%</span><br><span class="line">      top: 178px</span><br><span class="line">      bottom: 0</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="搜索页面热门搜索数据抓取和应用"><a href="#搜索页面热门搜索数据抓取和应用" class="headerlink" title="搜索页面热门搜索数据抓取和应用"></a>搜索页面热门搜索数据抓取和应用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getHotKey</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/splcloud/fcgi-bin/gethotkey.fcg'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class="line">    uin: <span class="number">0</span>,</span><br><span class="line">    needNewCode: <span class="number">1</span>,</span><br><span class="line">    platform: <span class="string">'h5'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> jsonp(url, data, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-box-wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">search-box</span> <span class="attr">ref</span>=<span class="string">"searchBox"</span>&gt;</span><span class="tag">&lt;/<span class="name">search-box</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"shortcutWrapper"</span> <span class="attr">class</span>=<span class="string">"shortcut-wrapper"</span> <span class="attr">v-show</span>=<span class="string">"!query"</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shortcut"</span>&gt;</span></span><br><span class="line">	      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hot-key"</span>&gt;</span></span><br><span class="line">	          <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>热门搜索<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	          <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">"addQuery(item.k)"</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"item in hotKey"</span>&gt;</span></span><br><span class="line">	              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.k&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> SearchBox <span class="keyword">from</span> <span class="string">'base/search-box/search-box'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;getHotKey&#125; <span class="keyword">from</span> <span class="string">'api/search'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;ERR_OK&#125; <span class="keyword">from</span> <span class="string">'api/config'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        hotKey: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>._getHotKey()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      addQuery(query) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs.searchBox.setQuery(query)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      _getHotKey() &#123;</span><br><span class="line"><span class="javascript">        getHotKey().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line">          if (res.code === ERR_OK) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.hotKey = res.data.hotkey.slice(<span class="number">0</span>, <span class="number">10</span>)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">      query(newQuery) &#123;</span><br><span class="line">        if (!newQuery) &#123;</span><br><span class="line"><span class="javascript">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$refs.shortcut.refresh()</span></span><br><span class="line">          &#125;, 20)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      SearchBox</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="搜索页面suggest组件开发"><a href="#搜索页面suggest组件开发" class="headerlink" title="搜索页面suggest组件开发"></a>搜索页面suggest组件开发</h2><ol>
<li><p>添加接口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">query, page, zhida, perpage</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/soso/fcgi-bin/search_for_qq_cp'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class="line">    w: query,</span><br><span class="line">    p: page,</span><br><span class="line">    perpage,</span><br><span class="line">    n: perpage,</span><br><span class="line">    catZhida: zhida ? <span class="number">1</span> : <span class="number">0</span>,</span><br><span class="line">    zhidaqu: <span class="number">1</span>,</span><br><span class="line">    t: <span class="number">0</span>,</span><br><span class="line">    flag: <span class="number">1</span>,</span><br><span class="line">    ie: <span class="string">'utf-8'</span>,</span><br><span class="line">    sem: <span class="number">1</span>,</span><br><span class="line">    aggr: <span class="number">0</span>,</span><br><span class="line">    remoteplace: <span class="string">'txt.mqq.all'</span>,</span><br><span class="line">    uin: <span class="number">0</span>,</span><br><span class="line">    needNewCode: <span class="number">1</span>,</span><br><span class="line">    platform: <span class="string">'h5'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> jsonp(url, data, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>实现上拉刷新, 扩展scroll组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// props</span></span><br><span class="line">pullup: &#123;</span><br><span class="line">  type: <span class="built_in">Boolean</span>,</span><br><span class="line">  <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// methods</span></span><br><span class="line"><span class="comment">// 当滚动结束时离底部还有50px时, 派发事件scrollToEnd</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.pullup) &#123;</span><br><span class="line">  <span class="keyword">this</span>.scroll.on(<span class="string">'scrollEnd'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.scroll.y &lt;= (<span class="keyword">this</span>.scroll.maxScrollY + <span class="number">50</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'scrollToEnd'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>suggest中添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">searchMore() &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.hasMore) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.page++</span><br><span class="line">  search(<span class="keyword">this</span>.query, <span class="keyword">this</span>.page, <span class="keyword">this</span>.showSinger, perpage).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.code === ERR_OK) &#123;</span><br><span class="line">      <span class="keyword">this</span>.result = <span class="keyword">this</span>.result.concat(<span class="keyword">this</span>._genResult(res.data))</span><br><span class="line">      <span class="keyword">this</span>._checkMore(res.data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">_checkMore(data) &#123;</span><br><span class="line">  <span class="keyword">const</span> song = data.song</span><br><span class="line">  <span class="keyword">if</span> (!song.list.length || (song.curnum + song.curpage * perpage) &gt;= song.totalnum) &#123;</span><br><span class="line">    <span class="keyword">this</span>.hasMore = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加actions</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> insertSong = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit, state&#125;, song</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> playlist = state.playlist.slice()</span><br><span class="line">  <span class="keyword">let</span> sequenceList = state.sequenceList.slice()</span><br><span class="line">  <span class="keyword">let</span> currentIndex = state.currentIndex</span><br><span class="line">  <span class="comment">// 记录当前歌曲</span></span><br><span class="line">  <span class="keyword">let</span> currentSong = playlist[currentIndex]</span><br><span class="line">  <span class="comment">// 查找当前列表中是否有待插入的歌曲并返回其索引</span></span><br><span class="line">  <span class="keyword">let</span> fpIndex = findIndex(playlist, song)</span><br><span class="line">  <span class="comment">// 因为是插入歌曲，所以索引+1</span></span><br><span class="line">  currentIndex++</span><br><span class="line">  <span class="comment">// 插入这首歌到当前索引位置</span></span><br><span class="line">  playlist.splice(currentIndex, <span class="number">0</span>, song)</span><br><span class="line">  <span class="comment">// 如果已经包含了这首歌</span></span><br><span class="line">  <span class="keyword">if</span> (fpIndex &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果当前插入的序号大于列表中的序号</span></span><br><span class="line">    <span class="keyword">if</span> (currentIndex &gt; fpIndex) &#123;</span><br><span class="line">      playlist.splice(fpIndex, <span class="number">1</span>)</span><br><span class="line">      currentIndex--</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      playlist.splice(fpIndex + <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 应该插入的位置</span></span><br><span class="line">  <span class="keyword">let</span> currentSIndex = findIndex(sequenceList, currentSong) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fsIndex = findIndex(sequenceList, song)</span><br><span class="line"></span><br><span class="line">  sequenceList.splice(currentSIndex, <span class="number">0</span>, song)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fsIndex &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentSIndex &gt; fsIndex) &#123;</span><br><span class="line">      sequenceList.splice(fsIndex, <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sequenceList.splice(fsIndex + <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  commit(types.SET_PLAYLIST, playlist)</span><br><span class="line">  commit(types.SET_SEQUENCE_LIST, sequenceList)</span><br><span class="line">  commit(types.SET_CURRENT_INDEX, currentIndex)</span><br><span class="line">  commit(types.SET_FULL_SCREEN, <span class="literal">true</span>)</span><br><span class="line">  commit(types.SET_PLAYING_STATE, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加通用组件no-result</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"no-result"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"no-result-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"no-result-text"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ecmascript-6"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      title: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  @import "~common/stylus/mixin"</span><br><span class="line">  .no-result</span><br><span class="line">    text-align: center</span><br><span class="line">    .no-result-icon</span><br><span class="line">      width: 86px</span><br><span class="line">      height: 90px</span><br><span class="line">      margin: 0 auto</span><br><span class="line">      bg-image('no-result')</span><br><span class="line">      background-size: 86px 90px</span><br><span class="line">    .no-result-text</span><br><span class="line">      margin-top: 30px</span><br><span class="line">      font-size: $font-size-medium</span><br><span class="line">      color: $color-text-d</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在common/js/util.js中添加节流函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      func.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="搜索页面搜索结果保存功能实现"><a href="#搜索页面搜索结果保存功能实现" class="headerlink" title="搜索页面搜索结果保存功能实现"></a>搜索页面搜索结果保存功能实现</h2><ol>
<li><p>suggest组件selectItem方法派发事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$emit(<span class="string">'select'</span>, item)</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加commom/js/cache.js 缓存操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertArray</span>(<span class="params">arr, val, compare, maxLen</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> index = arr.findIndex(compare)</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存在元素删除后插入, 没有直接插入</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  arr.unshift(val)</span><br><span class="line">  <span class="keyword">if</span> (maxLen &amp;&amp; arr.length &gt; maxLen) &#123;</span><br><span class="line">    arr.pop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">saveSearch</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> searches = storage.get(SEARCH_KEY, [])</span><br><span class="line">  insertArray(searches, query, (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> item === query</span><br><span class="line">  &#125;, SEARCH_MAX_LEN)</span><br><span class="line">  storage.set(SEARCH_KEY, searches)</span><br><span class="line">  <span class="keyword">return</span> searches</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加actions</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> saveSearchHistory = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit&#125;, query</span>) </span>&#123;</span><br><span class="line">  commit(types.SET_SEARCH_HISTORY, saveSearch(query))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="搜索页面search-list-组件功能实现"><a href="#搜索页面search-list-组件功能实现" class="headerlink" title="搜索页面search-list 组件功能实现"></a>搜索页面search-list 组件功能实现</h2><ol>
<li><p>添加组件search-list</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"search-list"</span> <span class="attr">v-show</span>=<span class="string">"searches.length"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"search-item"</span> @<span class="attr">click</span>=<span class="string">"selectItem(item)"</span> <span class="attr">v-for</span>=<span class="string">"item in searches"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span> @<span class="attr">click.stop</span>=<span class="string">"deleteOne(item)"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-delete"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      searches: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: []</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      selectItem(item) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'select'</span>, item)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      deleteOne(item) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'delete'</span>, item)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .search-list</span><br><span class="line">    .search-item</span><br><span class="line">      display: flex</span><br><span class="line">      align-items: center</span><br><span class="line">      height: 40px</span><br><span class="line">      .text</span><br><span class="line">        flex: 1</span><br><span class="line">        color: $color-text-l</span><br><span class="line">      .icon</span><br><span class="line">        extend-click()</span><br><span class="line">        .icon-delete</span><br><span class="line">          font-size: $font-size-small</span><br><span class="line">          color: $color-text-d</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>cache添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteFromArray</span>(<span class="params">arr, compare</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> index = arr.findIndex(compare)</span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    arr.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteSearch</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> searches = storage.get(SEARCH_KEY, [])</span><br><span class="line">  deleteFromArray(searches, (item) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> item === query</span><br><span class="line">  &#125;)</span><br><span class="line">  storage.set(SEARCH_KEY, searches)</span><br><span class="line">  <span class="keyword">return</span> searches</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加action</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteSearchHistory = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit&#125;, query</span>) </span>&#123;</span><br><span class="line">  commit(types.SET_SEARCH_HISTORY, deleteSearch(query))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加cache</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">clearSearch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  storage.remove(SEARCH_KEY)</span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加actions</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> clearSearchHistory = <span class="function"><span class="keyword">function</span> (<span class="params">&#123;commit&#125;</span>) </span>&#123;</span><br><span class="line">  commit(types.SET_SEARCH_HISTORY, clearSearch())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="搜索页面confirm-组件功能实现"><a href="#搜索页面confirm-组件功能实现" class="headerlink" title="搜索页面confirm 组件功能实现"></a>搜索页面confirm 组件功能实现</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"confirm-fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"confirm"</span> <span class="attr">v-show</span>=<span class="string">"showFlag"</span> @<span class="attr">click.stop</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"confirm-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"confirm-content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"operate"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"cancel"</span> <span class="attr">class</span>=<span class="string">"operate-btn left"</span>&gt;</span>&#123;&#123;cancelBtnText&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"confirm"</span> <span class="attr">class</span>=<span class="string">"operate-btn"</span>&gt;</span>&#123;&#123;confirmBtnText&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      text: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">''</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      confirmBtnText: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">'确定'</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      cancelBtnText: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: <span class="string">'取消'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        showFlag: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      show() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.showFlag = <span class="literal">true</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      hide() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.showFlag = <span class="literal">false</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      cancel() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.hide()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'cancel'</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      confirm() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.hide()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'confirm'</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .confirm</span><br><span class="line">    position: fixed</span><br><span class="line">    left: 0</span><br><span class="line">    right: 0</span><br><span class="line">    top: 0</span><br><span class="line">    bottom: 0</span><br><span class="line">    z-index: 998</span><br><span class="line">    background-color: $color-background-d</span><br><span class="line">    &amp;.confirm-fade-enter-active</span><br><span class="line">      animation: confirm-fadein 0.3s</span><br><span class="line">      .confirm-content</span><br><span class="line">        animation: confirm-zoom 0.3s</span><br><span class="line">    .confirm-wrapper</span><br><span class="line">      position: absolute</span><br><span class="line">      top: 50%</span><br><span class="line">      left: 50%</span><br><span class="line">      transform: translate(-50%, -50%)</span><br><span class="line">      z-index: 999</span><br><span class="line">      .confirm-content</span><br><span class="line">        width: 270px</span><br><span class="line">        border-radius: 13px</span><br><span class="line">        background: $color-highlight-background</span><br><span class="line">        .text</span><br><span class="line">          padding: 19px 15px</span><br><span class="line">          line-height: 22px</span><br><span class="line">          text-align: center</span><br><span class="line">          font-size: $font-size-large</span><br><span class="line">          color: $color-text-l</span><br><span class="line">        .operate</span><br><span class="line">          display: flex</span><br><span class="line">          align-items: center</span><br><span class="line">          text-align: center</span><br><span class="line">          font-size: $font-size-large</span><br><span class="line">          .operate-btn</span><br><span class="line">            flex: 1</span><br><span class="line">            line-height: 22px</span><br><span class="line">            padding: 10px 0</span><br><span class="line">            border-top: 1px solid $color-background-d</span><br><span class="line">            color: $color-text-d</span><br><span class="line">            &amp;.left</span><br><span class="line">              border-right: 1px solid $color-background-d</span><br><span class="line">  @keyframes confirm-fadein</span><br><span class="line">    0%</span><br><span class="line">      opacity: 0</span><br><span class="line">    100%</span><br><span class="line">      opacity: 1</span><br><span class="line">  @keyframes confirm-zoom</span><br><span class="line">    0%</span><br><span class="line">      transform: scale(0)</span><br><span class="line">    50%</span><br><span class="line">      transform: scale(1.1)</span><br><span class="line">    100%</span><br><span class="line">      transform: scale(1)</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="搜索页面剩余功能实现"><a href="#搜索页面剩余功能实现" class="headerlink" title="搜索页面剩余功能实现"></a>搜索页面剩余功能实现</h2><p>给滚动组件传值, 一个复合属性<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  shortcut() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.hotKey.concat(<span class="keyword">this</span>.searchHistory)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第五章 歌手页面开发）</title>
    <url>/2017/07/30/Vue-2-0-%E9%AB%98%E7%BA%A7%E5%AE%9E%E6%88%98-%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E4%B9%90WebApp-%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%BA%94%E7%AB%A0-%E6%AD%8C%E6%89%8B%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第五章-歌手页面开发）"><a href="#Vue-2-0-高级实战-开发移动端音乐WebApp-课程笔记（第五章-歌手页面开发）" class="headerlink" title="Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第五章 歌手页面开发）"></a>Vue 2.0 高级实战-开发移动端音乐WebApp 课程笔记（第五章 歌手页面开发）</h1><h2 id="歌手数据接口抓取"><a href="#歌手数据接口抓取" class="headerlink" title="歌手数据接口抓取"></a>歌手数据接口抓取</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jsonp <span class="keyword">from</span> <span class="string">'common/js/jsonp'</span></span><br><span class="line"><span class="keyword">import</span> &#123;commonParams, options&#125; <span class="keyword">from</span> <span class="string">'./config'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getSingerList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://c.y.qq.com/v8/fcg-bin/v8.fcg'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="built_in">Object</span>.assign(&#123;&#125;, commonParams, &#123;</span><br><span class="line">    channel: <span class="string">'singer'</span>,</span><br><span class="line">    page: <span class="string">'list'</span>,</span><br><span class="line">    key: <span class="string">'all_all_all'</span>,</span><br><span class="line">    pagesize: <span class="number">100</span>,</span><br><span class="line">    pagenum: <span class="number">1</span>,</span><br><span class="line">    hostUin: <span class="number">0</span>,</span><br><span class="line">    needNewCode: <span class="number">0</span>,</span><br><span class="line">    platform: <span class="string">'yqq'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> jsonp(url, data, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="歌手数据处理和-Singer-类的封装"><a href="#歌手数据处理和-Singer-类的封装" class="headerlink" title="歌手数据处理和 Singer 类的封装"></a>歌手数据处理和 Singer 类的封装</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_normalizeSinger(list) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;</span><br><span class="line">    hot: &#123;</span><br><span class="line">      title: HOT_NAME,</span><br><span class="line">      items: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 填充hot</span></span><br><span class="line">  list.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; HOT_SINGER_LEN) &#123;</span><br><span class="line">    	<span class="comment">// 封装 类Singer</span></span><br><span class="line">      map.hot.items.push(<span class="keyword">new</span> Singer(&#123;</span><br><span class="line">        name: item.Fsinger_name,</span><br><span class="line">        id: item.Fsinger_mid</span><br><span class="line">      &#125;))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 聚合</span></span><br><span class="line">    <span class="keyword">const</span> key = item.Findex</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    <span class="keyword">if</span> (!map[key]) &#123;</span><br><span class="line">      map[key] = &#123;</span><br><span class="line">        title: key,</span><br><span class="line">        items: []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map[key].items.push(<span class="keyword">new</span> Singer(&#123;</span><br><span class="line">      name: item.Fsinger_name,</span><br><span class="line">      id: item.Fsinger_mid</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 为了得到有序列表，我们需要处理 map</span></span><br><span class="line">  <span class="keyword">let</span> ret = []</span><br><span class="line">  <span class="keyword">let</span> hot = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> map) &#123;</span><br><span class="line">    <span class="keyword">let</span> val = map[key]</span><br><span class="line">    <span class="keyword">if</span> (val.title.match(<span class="regexp">/[a-zA-Z]/</span>)) &#123;</span><br><span class="line">      ret.push(val)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val.title === HOT_NAME) &#123;</span><br><span class="line">      hot.push(val)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ret.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.title.charCodeAt(<span class="number">0</span>) - b.title.charCodeAt(<span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> hot.concat(ret)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建common/js/singer.js<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Singer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(&#123;id, name&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.avatar = <span class="string">`https://y.gtimg.cn/music/photo_new/T001R300x300M000<span class="subst">$&#123;id&#125;</span>.jpg?max_age=2592000`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="listview-基础组件的开发和应用-滚动列表实现"><a href="#listview-基础组件的开发和应用-滚动列表实现" class="headerlink" title="listview 基础组件的开发和应用-滚动列表实现"></a>listview 基础组件的开发和应用-滚动列表实现</h2><p>新建通用组件 listview<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scroll</span> <span class="attr">:data</span>=<span class="string">"data"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"listview"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"group in data"</span> <span class="attr">class</span>=<span class="string">"list-group"</span> <span class="attr">ref</span>=<span class="string">"listGroup"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"list-group-title"</span>&gt;</span>&#123;&#123;group.title&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">uL</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in group.items"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"avatar"</span> <span class="attr">v-lazy</span>=<span class="string">"item.avatar"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">uL</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">scroll</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Scroll <span class="keyword">from</span> <span class="string">'base/scroll/scroll'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">        <span class="keyword">default</span>: []</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      Scroll</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"stylus"</span> <span class="attr">rel</span>=<span class="string">"stylesheet/stylus"</span>&gt;</span></span><br><span class="line">  @import "~common/stylus/variable"</span><br><span class="line">  .listview</span><br><span class="line">    position: relative</span><br><span class="line">    width: 100%</span><br><span class="line">    height: 100%</span><br><span class="line">    overflow: hidden</span><br><span class="line">    background: $color-background</span><br><span class="line">    .list-group</span><br><span class="line">      padding-bottom: 30px</span><br><span class="line">      .list-group-title</span><br><span class="line">        height: 30px</span><br><span class="line">        line-height: 30px</span><br><span class="line">        padding-left: 20px</span><br><span class="line">        font-size: $font-size-small</span><br><span class="line">        color: $color-text-l</span><br><span class="line">        background: $color-highlight-background</span><br><span class="line">      .list-group-item</span><br><span class="line">        display: flex</span><br><span class="line">        align-items: center</span><br><span class="line">        padding: 20px 0 0 30px</span><br><span class="line">        .avatar</span><br><span class="line">          width: 50px</span><br><span class="line">          height: 50px</span><br><span class="line">          border-radius: 50%</span><br><span class="line">        .name</span><br><span class="line">          margin-left: 20px</span><br><span class="line">          color: $color-text-l</span><br><span class="line">          font-size: $font-size-medium</span><br><span class="line">    .list-shortcut</span><br><span class="line">      position: absolute</span><br><span class="line">      z-index: 30</span><br><span class="line">      right: 0</span><br><span class="line">      top: 50%</span><br><span class="line">      transform: translateY(-50%)</span><br><span class="line">      width: 20px</span><br><span class="line">      padding: 20px 0</span><br><span class="line">      border-radius: 10px</span><br><span class="line">      text-align: center</span><br><span class="line">      background: $color-background-d</span><br><span class="line">      font-family: Helvetica</span><br><span class="line">      .item</span><br><span class="line">        padding: 3px</span><br><span class="line">        line-height: 1</span><br><span class="line">        color: $color-text-l</span><br><span class="line">        font-size: $font-size-small</span><br><span class="line">        &amp;.current</span><br><span class="line">          color: $color-theme</span><br><span class="line">    .list-fixed</span><br><span class="line">      position: absolute</span><br><span class="line">      top: 0</span><br><span class="line">      left: 0</span><br><span class="line">      width: 100%</span><br><span class="line">      .fixed-title</span><br><span class="line">        height: 30px</span><br><span class="line">        line-height: 30px</span><br><span class="line">        padding-left: 20px</span><br><span class="line">        font-size: $font-size-small</span><br><span class="line">        color: $color-text-l</span><br><span class="line">        background: $color-highlight-background</span><br><span class="line">    .loading-container</span><br><span class="line">      position: absolute</span><br><span class="line">      width: 100%</span><br><span class="line">      top: 50%</span><br><span class="line">      transform: translateY(-50%)</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="listview-基础组件的开发和应用-右侧快速入口实现"><a href="#listview-基础组件的开发和应用-右侧快速入口实现" class="headerlink" title="listview 基础组件的开发和应用-右侧快速入口实现"></a>listview 基础组件的开发和应用-右侧快速入口实现</h2><ol>
<li><p>dom.js 添加通用方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">el, name, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> prefix = <span class="string">'data-'</span></span><br><span class="line">  name = prefix + name</span><br><span class="line">  <span class="keyword">if</span> (val) &#123;</span><br><span class="line">    <span class="keyword">return</span> el.setAttribute(name, val)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> el.getAttribute(name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>scroll.vue 添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">scrollTo() &#123;</span><br><span class="line">  <span class="keyword">this</span>.scroll &amp;&amp; <span class="keyword">this</span>.scroll.scrollTo.apply(<span class="keyword">this</span>.scroll, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;,</span><br><span class="line">scrollToElement() &#123;</span><br><span class="line">  <span class="comment">// 用apply保证调用方法时上下文相同</span></span><br><span class="line">  <span class="keyword">this</span>.scroll &amp;&amp; <span class="keyword">this</span>.scroll.scrollToElement.apply(<span class="keyword">this</span>.scroll, <span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>viewlist.vue添加dom</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-shortcut"</span></span></span><br><span class="line"><span class="tag"> @<span class="attr">touchstart.stop.prevent</span>=<span class="string">"onShortcutTouchStart"</span> </span></span><br><span class="line"><span class="tag"> @<span class="attr">touchmove.stop.prevent</span>=<span class="string">"onShortcutTouchMove"</span></span></span><br><span class="line"><span class="tag"> @<span class="attr">touchend.stop</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in shortcutList"</span> <span class="attr">:data-index</span>=<span class="string">"index"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>viewlist.vue添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onShortcutTouchStart(e) &#123;</span><br><span class="line">  <span class="keyword">let</span> anchorIndex = getData(e.target, <span class="string">'index'</span>)</span><br><span class="line">  <span class="keyword">let</span> firstTouch = e.touches[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">this</span>.touch.y1 = firstTouch.pageY</span><br><span class="line">  <span class="keyword">this</span>.touch.anchorIndex = anchorIndex</span><br><span class="line">  <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[anchorIndex], <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">this</span>._scrollTo(anchorIndex)</span><br><span class="line">&#125;,</span><br><span class="line">onShortcutTouchMove(e) &#123;</span><br><span class="line">  <span class="keyword">let</span> firstTouch = e.touches[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">this</span>.touch.y2 = firstTouch.pageY</span><br><span class="line">  <span class="keyword">let</span> delta = (<span class="keyword">this</span>.touch.y2 - <span class="keyword">this</span>.touch.y1) / ANCHOR_HEIGHT | <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> anchorIndex = <span class="built_in">parseInt</span>(<span class="keyword">this</span>.touch.anchorIndex) + delta</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>._scrollTo(anchorIndex)</span><br><span class="line">&#125;,</span><br><span class="line">_scrollTo(index) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs.listview.scrollToElement(<span class="keyword">this</span>.$refs.listGroup[index], <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>计算所有group的高度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_calculateHeight() &#123;</span><br><span class="line">  <span class="keyword">this</span>.listHeight = []</span><br><span class="line">  <span class="keyword">const</span> list = <span class="keyword">this</span>.$refs.listGroup</span><br><span class="line">  <span class="keyword">let</span> height = <span class="number">0</span></span><br><span class="line">  <span class="keyword">this</span>.listHeight.push(height)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = list[i]</span><br><span class="line">    height += item.clientHeight</span><br><span class="line">    <span class="keyword">this</span>.listHeight.push(height)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>6 添加watch 计算 currentIndex<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line"> data() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 数据变化到dom的变化有一个延时</span></span><br><span class="line">      <span class="keyword">this</span>._calculateHeight()</span><br><span class="line">    &#125;, <span class="number">20</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  scrollY(newY) &#123;</span><br><span class="line">    <span class="keyword">const</span> listHeight = <span class="keyword">this</span>.listHeight</span><br><span class="line">    <span class="comment">// 当滚动到顶部，newY&gt;0</span></span><br><span class="line">    <span class="keyword">if</span> (newY &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.currentIndex = <span class="number">0</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在中间部分滚动</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listHeight.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> height1 = listHeight[i]</span><br><span class="line">      <span class="keyword">let</span> height2 = listHeight[i + <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">if</span> (-newY &gt;= height1 &amp;&amp; -newY &lt; height2) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentIndex = i</span><br><span class="line">        <span class="keyword">this</span>.diff = height2 + newY</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当滚动到底部，且-newY大于最后一个元素的上限</span></span><br><span class="line">    <span class="keyword">this</span>.currentIndex = listHeight.length - <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>总结:联动思路</p>
<ol>
<li>知道实时滚动位置</li>
<li>根据滚动位置计算落在哪个group区间</li>
<li>根据区间计算索引哪个高亮</li>
</ol>
<h2 id="listview-基础组件的开发和应用-滚动固定标题实现"><a href="#listview-基础组件的开发和应用-滚动固定标题实现" class="headerlink" title="listview 基础组件的开发和应用-滚动固定标题实现"></a>listview 基础组件的开发和应用-滚动固定标题实现</h2><ol>
<li><p>添加dom</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-fixed"</span> <span class="attr">ref</span>=<span class="string">"fixed"</span> <span class="attr">v-show</span>=<span class="string">"fixedTitle"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fixed-title"</span>&gt;</span>&#123;&#123;fixedTitle&#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加计算属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fixedTitle() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.scrollY &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.data[<span class="keyword">this</span>.currentIndex] ? <span class="keyword">this</span>.data[<span class="keyword">this</span>.currentIndex].title : <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加watch</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">diff(newVal) &#123;</span><br><span class="line">  <span class="keyword">let</span> fixedTop = (newVal &gt; <span class="number">0</span> &amp;&amp; newVal &lt; TITLE_HEIGHT) ? newVal - TITLE_HEIGHT : <span class="number">0</span></span><br><span class="line">  <span class="comment">// 减少dom操作的频度</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.fixedTop === fixedTop) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.fixedTop = fixedTop</span><br><span class="line">  <span class="keyword">this</span>.$refs.fixed.style.transform = <span class="string">`translate3d(0,<span class="subst">$&#123;fixedTop&#125;</span>px,0)`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>慕课网</tag>
      </tags>
  </entry>
  <entry>
    <title>css动画</title>
    <url>/2018/06/09/css%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h2 id="补间动画-transition"><a href="#补间动画-transition" class="headerlink" title="补间动画 transition"></a>补间动画 transition</h2><h2 id="关键帧动画-keyframes"><a href="#关键帧动画-keyframes" class="headerlink" title="关键帧动画 keyframes"></a>关键帧动画 keyframes</h2><ol>
<li>相当于多个补间动画</li>
<li>与元素状态的变化无关</li>
<li>定义更加灵活</li>
</ol>
<h2 id="逐帧动画"><a href="#逐帧动画" class="headerlink" title="逐帧动画"></a>逐帧动画</h2><ol>
<li>适用于无法补间计算的动画</li>
<li>资源较大</li>
<li>使用steps()</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css小技巧</title>
    <url>/2018/03/17/css%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<ol>
<li>移动端使用overflow-y: auto; 可以隐藏滚动条</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Vue.js 中，7种定义组件模板的方法</title>
    <url>/2017/07/24/Vue-js-%E4%B8%AD%EF%BC%8C7%E7%A7%8D%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%A8%A1%E6%9D%BF%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Vue-js-中，7种定义组件模板的方法-Codementor"><a href="#Vue-js-中，7种定义组件模板的方法-Codementor" class="headerlink" title="Vue.js 中，7种定义组件模板的方法 | Codementor"></a>Vue.js 中，7种定义组件模板的方法 | Codementor</h1><blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="noopener">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@Mcbai" target="_blank" rel="noopener">Mcbai</a><br>审校: <a href="http://www.zcfy.cc/@huangxiaolu" target="_blank" rel="noopener">huangxiaolu</a><br>链接：<a href="http://www.zcfy.cc/article/3644" target="_blank" rel="noopener">http://www.zcfy.cc/article/3644</a><br>原文：<a href="https://www.codementor.io/vuejsdevelopers/7-ways-to-define-a-component-template-in-vue-js-8wxxhmxo6" target="_blank" rel="noopener">https://www.codementor.io/vuejsdevelopers/7-ways-to-define-a-component-template-in-vue-js-8wxxhmxo6</a></p>
</blockquote>
<p><span style="font-size: 1rem;">有多种方式可以</span>在vue中定义模板组件。我算了一下，至少有7种不同的方法：</p>
<ul>
<li><p>字符串（String）</p>
</li>
<li><p>模板字符串（Template literal）</p>
</li>
<li><p>X-Templates</p>
</li>
<li><p>内联（Inline）</p>
</li>
<li><p>Render函数（Render functions）</p>
</li>
<li><p>JSX</p>
</li>
<li><p>单文件组件（Single page components）</p>
</li>
</ul>
<p>当然，可能还有更多方法!</p>
<p>在这篇文章里，我们将会展示每一个方法的示例，分析其优缺点，以便你能明白在特定的情形下，哪种方式是合适的。</p>
<blockquote>
<p>_注意: 这篇文章最初发表在<a href="http://vuejsdevelopers.com/2017/03/24/vue-js-component-templates/?jsdojo_id=cm_cot" target="_blank" rel="noopener">在Vue.js Developers blog上</a> on 2017/03/24_</p>
</blockquote>
<h2 id="1-字符串"><a href="#1-字符串" class="headerlink" title=" 1. 字符串"></a><a href="#1-strings"></a> 1. 字符串</h2><p>默认情况下，<span style="font-size: 1rem;">在JS文件里</span>模板会被定义为一个字符串。但是我觉得大家都会同意这种写法很难看懂，它除了有广泛的浏览器支持之外，并没有什么优势。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-checkbox'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;div class="checkbox-wrapper" @click="check"&gt;&lt;div :class="&#123; checkbox: true, checked: checked &#125;"&gt;&lt;/div&gt;&lt;div class="title"&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt;&lt;/div&gt;'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">checked</span>: <span class="literal">false</span>, <span class="attr">title</span>: <span class="string">'Check me'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    check() &#123; <span class="keyword">this</span>.checked = !<span class="keyword">this</span>.checked; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="2-模板字符串（Template-literals）"><a href="#2-模板字符串（Template-literals）" class="headerlink" title=" 2. 模板字符串（Template literals）"></a><a href="#2-template-literals"></a> 2. 模板字符串（Template literals）</h2><p>通过ES6的模板字符串（反引号）语法，你在定义模板时可以直接换行，这是通过常规的JavaScript字符串没法做到的。<br>这种写法更容易阅读，并且这种模板字符串语法得到了许多新版本浏览器的支持。当然，为了安全起见，你仍然应该把它转译为ES5的语法形式。</p>
<p>然而，这种方式并不完美，我发现大多数的IDE在语法高亮上做的差强人意，并且在缩进和换行等的格式方面，仍然很痛苦。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-checkbox'</span>, &#123;</span><br><span class="line">  template: <span class="string">`&lt;div class="checkbox-wrapper" @click="check"&gt;</span></span><br><span class="line"><span class="string">              &lt;div :class="&#123; checkbox: true, checked: checked &#125;"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">              &lt;div class="title"&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">checked</span>: <span class="literal">false</span>, <span class="attr">title</span>: <span class="string">'Check me'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    check() &#123; <span class="keyword">this</span>.checked = !<span class="keyword">this</span>.checked; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="3-X-Templates"><a href="#3-X-Templates" class="headerlink" title=" 3. X-Templates"></a><a href="#3-x-templates"></a> 3. X-Templates</h2><p>使用这种方法，你需要在<em>index.html</em>文件里的script标签中定义你的模板。script标签需要添加<code>text/x-template</code>类型作为标记，并且在定义组件时，通过id来引用。</p>
<p>我喜欢这种方式，它允许你使用真正的HTML标记来书写你的HTML文件，但是不足之处在于，这种方式会把模板和组件其它部分的定义分开。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-checkbox'</span>, &#123;</span><br><span class="line">  template: <span class="string">'#checkbox-template'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">checked</span>: <span class="literal">false</span>, <span class="attr">title</span>: <span class="string">'Check me'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    check() &#123; <span class="keyword">this</span>.checked = !<span class="keyword">this</span>.checked; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"checkbox-template"</span>&gt;</span></span><br><span class="line"><span class="javascript">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"checkbox-wrapper"</span> @click=<span class="string">"check"</span>&gt;</span></span><br><span class="line"><span class="javascript">    &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; checkbox: true, checked: checked &#125;"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="javascript">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span>&gt;&#123;&#123; title &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4-内联模板（Inline-Templates）"><a href="#4-内联模板（Inline-Templates）" class="headerlink" title=" 4. 内联模板（Inline Templates）"></a><a href="#4-inline-templates"></a> 4. 内联模板（Inline Templates）</h2><p>通过给组件添加<code>inline-template</code>属性来告诉Vue，里面的内容就是模板，而不是把它当作是分发内容(见 <a href="https://vuejs.org/v2/guide/components.html#Content-Distribution-with-Slots" target="_blank" rel="noopener">slots</a>)。</p>
<p>它的缺点和x-templates一样，但是有一个优点就是，它的内容就在HTML模板对应的位置，所以页面一加载就会渲染，而不用等到JavaScript执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-checkbox'</span>, &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">checked</span>: <span class="literal">false</span>, <span class="attr">title</span>: <span class="string">'Check me'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    check() &#123; <span class="keyword">this</span>.checked = !<span class="keyword">this</span>.checked; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-checkbox</span> <span class="attr">inline-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox-wrapper"</span> @<span class="attr">click</span>=<span class="string">"check"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; checkbox: true, checked: checked &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-Render-functions（渲染函数）"><a href="#5-Render-functions（渲染函数）" class="headerlink" title=" 5. Render functions（渲染函数）"></a><a href="#5-render-functions"></a> 5. Render functions（渲染函数）</h2><p>渲染函数需要你把模板当作一个JavaScript对象来进行定义，它们是一些复杂并且抽象的模板选项。</p>
<p>然而，它的优点是你定义的模板更接近编译器，你可以使用所有JavaScript方法，而不仅是指令提供的那些功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-checkbox'</span>, &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">checked</span>: <span class="literal">false</span>, <span class="attr">title</span>: <span class="string">'Check me'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    check() &#123; <span class="keyword">this</span>.checked = !<span class="keyword">this</span>.checked; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render(createElement) &#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(</span><br><span class="line">      <span class="string">'div'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          attrs: &#123;</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'checkbox-wrapper'</span></span><br><span class="line">          &#125;,</span><br><span class="line">          on: &#123;</span><br><span class="line">            click: <span class="keyword">this</span>.check</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        [</span><br><span class="line">          createElement(</span><br><span class="line">            <span class="string">'div'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">'class'</span>: &#123;</span><br><span class="line">                checkbox: <span class="literal">true</span>,</span><br><span class="line">                checked: <span class="keyword">this</span>.checked</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          ),</span><br><span class="line">          createElement(</span><br><span class="line">            <span class="string">'div'</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              attrs: &#123;</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'title'</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            [ <span class="keyword">this</span>.title ]</span><br><span class="line">          )</span><br><span class="line">        ]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="6-JSX"><a href="#6-JSX" class="headerlink" title=" 6. JSX"></a><a href="#6-jsx"></a> 6. JSX</h2><p>Vue中最有争议性的模板选项就是JSX，一些开发者认为JSX语法太丑，不直观，而且和Vue的简洁特性背道而驰。</p>
<p>JSX需要事先编译，因为浏览器并不支持JSX。但是如果你需要使用渲染函数，那么JSX语法绝对是一种更简洁的定义模板的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-checkbox'</span>, &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">checked</span>: <span class="literal">false</span>, <span class="attr">title</span>: <span class="string">'Check me'</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    check() &#123; <span class="keyword">this</span>.checked = !<span class="keyword">this</span>.checked; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox-wrapper"</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> <span class="attr">this.check</span> &#125;&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#123;&#123;</span> <span class="attr">checkbox:</span> <span class="attr">true</span>, <span class="attr">checked:</span> <span class="attr">this.checked</span> &#125;&#125;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123; this.title &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="7-单文件组件（Single-File-Components）"><a href="#7-单文件组件（Single-File-Components）" class="headerlink" title=" 7. 单文件组件（Single File Components）"></a><a href="#7-single-file-components"></a> 7. 单文件组件（<span style="font-family: inherit;">Single File Components）</span></h2><p>只要你愿意在项目中使用构建工具，那么单文件组件绝对是这些方法中的首选。它们有两个最好的优点：允许你使用标记，同时把所有组件定义都写在一个文件中。</p>
<p>尽管单文件组件需要编译，并且一些IDE不支持这种类型文件的语法高亮，但它仍然很难被其它方法战胜。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox-wrapper"</span> @<span class="attr">click</span>=<span class="string">"check"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; checkbox: true, checked: checked &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123; <span class="attr">checked</span>: <span class="literal">false</span>, <span class="attr">title</span>: <span class="string">'Check me'</span> &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      check() &#123; <span class="keyword">this</span>.checked = !<span class="keyword">this</span>.checked; &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>你可能会举出还有更多的方式来定义模板，因为你还可以使用一些模板预处理器，比如Pug！</p>
<h2 id="哪个最好"><a href="#哪个最好" class="headerlink" title=" 哪个最好?"></a><a href="#which-is-the-best"></a> 哪个最好?</h2><p>当然没有完美的方法，你应该根据你的实际情况来进行判断。我觉得一个好的程序员应该知道所有的方式，并把它们当作Vue.js技术栈里一种解决问题的工具。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>cocos UI 系统</title>
    <url>/2020/04/03/cocos-UI-%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>参考文档：<a href="https://docs.cocos.com/creator/manual/zh/" target="_blank" rel="noopener">cocos 文档</a></p>
</blockquote>
<h2 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h2><ol>
<li>Sprite(精灵) 就是图片</li>
<li>Label(文字) </li>
</ol>
<h2 id="基本布局"><a href="#基本布局" class="headerlink" title="基本布局"></a>基本布局</h2><h3 id="Widget-对齐挂件"><a href="#Widget-对齐挂件" class="headerlink" title="Widget(对齐挂件)"></a>Widget(对齐挂件)</h3><p>操作元素相对目标元素(默认父元素)的定位, 相当于css的绝对定位</p>
<h3 id="Layout-自动布局"><a href="#Layout-自动布局" class="headerlink" title="Layout(自动布局)"></a>Layout(自动布局)</h3><p>用于元素排列布局<br>type: 控制元素方向 横排, 竖排, 网格<br>padding: 和父元素的边距<br>Spacing: 元素间的间距<br>direction: 排列方向</p>
<h3 id="scrollView-滚动视图"><a href="#scrollView-滚动视图" class="headerlink" title="scrollView(滚动视图)"></a>scrollView(滚动视图)</h3><p>目录结构<br>scrollView</p>
<ul>
<li>scrollBar 滚动条</li>
<li>view 上面添加了 mask 组件, 这样只显示元素内的内容<ul>
<li>content 滚动元素容器</li>
<li>item 滚动元素</li>
</ul>
</li>
</ul>
<h3 id="Prefab-预制资源"><a href="#Prefab-预制资源" class="headerlink" title="Prefab(预制资源)"></a>Prefab(预制资源)</h3><p>把视图变成资源, 相当于组件</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>charles本地调试之map功能</title>
    <url>/2017/11/01/charles%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E4%B9%8Bmap%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="charles本地调试之map功能"><a href="#charles本地调试之map功能" class="headerlink" title="charles本地调试之map功能"></a>charles本地调试之map功能</h1><h2 id="map功能介绍"><a href="#map功能介绍" class="headerlink" title="map功能介绍"></a>map功能介绍</h2><p> map功能，顾名思义就是将某个请求进行重定向，用重定向后的内容来响应请求的内容；<br>map功能分为<strong>map Local</strong>和<strong>map Remote</strong>, 二者区分是：</p>
<ul>
<li><strong>map Local</strong>：是将某个网络请求重定向到本地的某个文件</li>
<li><strong>map Remote</strong>：是将某个网络请求重定向到另一个网络请求</li>
</ul>
<p>二者除了重定向文件的位置不同之外，其他功能都是一样的。他们都可以对js、css、html以及api接口均可重定向，此外也可以使用通配符来进行简单的批量匹配，达到批量重定向的目的。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>这里介绍一下我最常用的功能<strong>api重定向</strong></p>
<p>为了mock数据；一般使用<strong>map Remote</strong>功能来将本地的请求重定向到测试或者线上环境的网络请求。</p>
<p> 例子如下:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/api/foo/bar ---&gt; http://test.com/api/foo/bar</span><br></pre></td></tr></table></figure></p>
<p>配置如下<br><img src="/2017/11/01/charles本地调试之map功能/edit map.PNG" alt="edit map"></p>
<blockquote>
<p>注意上面map From中的Path配置项使用了<code>*</code>通配符，表示匹配127.0.0.1:8080/api/下的所有文件及子路径，将其重定向到test.com下的/api/路径下</p>
</blockquote>
<h2 id="map通配符"><a href="#map通配符" class="headerlink" title="map通配符"></a>map通配符</h2><p>map隐射可以使用的模式匹配符有三种：</p>
<ul>
<li><p><code>*</code>: 可以匹配0个或者多个字符</p>
</li>
<li><p><code>?</code>: 可以匹配一个字符</p>
</li>
<li><p><code>[...]</code>: 范围选择符，可以匹配范围中的任意一个字符</p>
</li>
</ul>
<h2 id="map配置实例"><a href="#map配置实例" class="headerlink" title="map配置实例"></a>map配置实例</h2><p>假设<code>Map From</code>配置中的各个项为空，表示匹配所有请求，然后<code>Map To</code>项的配置不同，代表不同含义，下表列出一个简单例子</p>
<table>
<thead>
<tr>
<th style="text-align:left">Host配置值</th>
<th style="text-align:left">Path配置值</th>
<th style="text-align:left">配置产生的结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">charlesproxy.com</td>
<td style="text-align:left"></td>
<td style="text-align:left">匹配所有的请求重定向到charlesproxy.com主机</td>
</tr>
<tr>
<td style="text-align:left">*.charlesproxy.com</td>
<td style="text-align:left"></td>
<td style="text-align:left">匹配所有的请求重定向到以.charlesproxy.com结尾的主机</td>
</tr>
<tr>
<td style="text-align:left">charlesproxy.com</td>
<td style="text-align:left">/charles/</td>
<td style="text-align:left">匹配所有请求只重定向到charlesproxy.com/charles/路径下</td>
</tr>
<tr>
<td style="text-align:left">charlesproxy.com</td>
<td style="text-align:left">/charles/*</td>
<td style="text-align:left">匹配所有请求只重定向到charlesproxy.com/charles/路径下,包括路径下的文件及其路径的子路径</td>
</tr>
<tr>
<td style="text-align:left">charlesproxy.com</td>
<td style="text-align:left">/charles</td>
<td style="text-align:left">匹配所有请求只重定向到charlesproxy.com/charles下</td>
</tr>
<tr>
<td style="text-align:left">charlesproxy.com</td>
<td style="text-align:left">/index.html</td>
<td style="text-align:left">匹配所有请求重定向到charlesproxy.com/index.html</td>
</tr>
<tr>
<td style="text-align:left"></td>
<td style="text-align:left">/charles/*.html</td>
<td style="text-align:left">匹配所有请求重定向到任意主机下的以.html结尾的文件，该文件存放在主机的/charles/及其子目录下</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>charles</tag>
        <tag>代理</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>css工程化</title>
    <url>/2018/06/09/css%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
    <content><![CDATA[<h2 id="工程化特性"><a href="#工程化特性" class="headerlink" title="工程化特性"></a>工程化特性</h2><ul>
<li>组织</li>
<li>优化</li>
<li>构建</li>
<li>维护</li>
</ul>
<h2 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol>
<li>模块化</li>
<li>加前缀</li>
<li>兼容性</li>
<li>…</li>
</ol>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>PostCSS本身只有解析能力</li>
<li>各种特性全靠插件</li>
<li>目前至少有200多个插件</li>
</ol>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><ul>
<li>import 模块合并</li>
<li>autoprefixier 自动添加前缀</li>
<li>cssnano 压缩代码</li>
<li>cssnext 使用css新特性</li>
<li>precss 变量、mixin、循环等</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>css布局</title>
    <url>/2018/06/09/css%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="布局重点"><a href="#布局重点" class="headerlink" title="布局重点"></a>布局重点</h2><ol>
<li>table布局</li>
<li>技巧性布局</li>
<li>flexbox/grid布局</li>
<li>响应式布局</li>
</ol>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>content + padding + border + margin</p>
<p>? box-sizing</p>
<h2 id="display-position"><a href="#display-position" class="headerlink" title="display/position"></a>display/position</h2><p>display 确定元素的显示类型</p>
<p>block/inline/inline-block</p>
<p>position 确定元素的位置</p>
<p>static/relative/absolute/fixed</p>
<h2 id="flexbox-布局"><a href="#flexbox-布局" class="headerlink" title="flexbox 布局"></a>flexbox 布局</h2><h2 id="float-margin-布局"><a href="#float-margin-布局" class="headerlink" title="float + margin 布局"></a>float + margin 布局</h2><ul>
<li>元素“浮动”</li>
<li>脱离文档流</li>
<li>但不脱离文本流</li>
</ul>
<h3 id="对自身对影响"><a href="#对自身对影响" class="headerlink" title="对自身对影响"></a>对自身对影响</h3><ul>
<li>形成“块”（BFC）</li>
<li>位置尽量考上</li>
<li>位置尽量靠左（右）</li>
</ul>
<h3 id="对兄弟元素的影响"><a href="#对兄弟元素的影响" class="headerlink" title="对兄弟元素的影响"></a>对兄弟元素的影响</h3><ul>
<li>上面贴非float元素（一般）</li>
<li>旁边贴float元素</li>
<li>不影响其他块级元素的位置</li>
<li>影响其他块级元素的内部文本</li>
</ul>
<h3 id="对父级"><a href="#对父级" class="headerlink" title="对父级"></a>对父级</h3><ul>
<li>从布局上消失</li>
<li>高度塌陷</li>
</ul>
<h3 id="修复高度塌陷"><a href="#修复高度塌陷" class="headerlink" title="修复高度塌陷"></a>修复高度塌陷</h3><ol>
<li>把父元素变为BFC（如加上 overflow：auto）</li>
<li>添加元素（一般加上伪元素）</li>
</ol>
<h3 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h3><p>用 float + margin<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:800px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* float:left; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* height:100%; */</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">float</span><span class="selector-pseudo">:right</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.middle</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-left</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">margin-right</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">            左</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">            右</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">            中间</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>布局的核心是–如何进行元素的横向排列</p>
<h2 id="inline-block-布局"><a href="#inline-block-布局" class="headerlink" title="inline-block 布局"></a>inline-block 布局</h2><ol>
<li>像文本一样排 block 元素</li>
<li>没有清除浮动的问题</li>
<li>需要处理间隙<ol>
<li>父元素字体大小设为0</li>
<li>去除元素间的空白</li>
</ol>
</li>
</ol>
<h2 id="响应式设计和布局"><a href="#响应式设计和布局" class="headerlink" title="响应式设计和布局"></a>响应式设计和布局</h2><ol>
<li>在不同设备上正常使用</li>
<li>一般处理大小问题</li>
<li>主要方法<ol>
<li>隐藏 + 折行 + 自适应空间</li>
<li>rem/viewprot/media query</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>css面试题</title>
    <url>/2018/06/09/css%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="如何确定css优先级"><a href="#如何确定css优先级" class="headerlink" title="如何确定css优先级"></a>如何确定css优先级</h3><ol>
<li>选择器权重(id+100,类/属性/伪类+10,元素/伪元素+1,其他+0)</li>
<li>!important</li>
<li>内联样式</li>
<li>相同权重，后写的高</li>
</ol>
<h3 id="伪类和伪元素的区别"><a href="#伪类和伪元素的区别" class="headerlink" title="伪类和伪元素的区别"></a>伪类和伪元素的区别</h3><ol>
<li>伪类是状态，伪元素是元素</li>
<li>伪类用<code>:</code>，伪元素用<code>::</code></li>
</ol>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="如何用一个div画XXX"><a href="#如何用一个div画XXX" class="headerlink" title="如何用一个div画XXX"></a>如何用一个div画XXX</h3><ul>
<li>box-shadow 无限投影</li>
<li>::before</li>
<li>::after</li>
</ul>
<h3 id="如何产生不占空间的边框"><a href="#如何产生不占空间的边框" class="headerlink" title="如何产生不占空间的边框"></a>如何产生不占空间的边框</h3><ol>
<li>box-shadow</li>
<li>outline</li>
</ol>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="transtion-keyframes-如何写"><a href="#transtion-keyframes-如何写" class="headerlink" title="transtion/keyframes 如何写"></a>transtion/keyframes 如何写</h3><p>略</p>
<h3 id="css动画实现方式有几种"><a href="#css动画实现方式有几种" class="headerlink" title="css动画实现方式有几种"></a>css动画实现方式有几种</h3><ul>
<li>transtion</li>
<li>keyframes(animation)</li>
</ul>
<h3 id="过度动画和关键帧动画的区别"><a href="#过度动画和关键帧动画的区别" class="headerlink" title="过度动画和关键帧动画的区别"></a>过度动画和关键帧动画的区别</h3><ol>
<li>过渡动画需要有状态变化</li>
<li>关键帧动画不需要状态变化</li>
<li>关键帧动画能控制更精细</li>
</ol>
<h3 id="如何实现逐帧动画"><a href="#如何实现逐帧动画" class="headerlink" title="如何实现逐帧动画"></a>如何实现逐帧动画</h3><ol>
<li>使用关键帧动画</li>
<li>去掉补间（steps）</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客引用本地图片</title>
    <url>/2017/11/01/hexo%E5%8D%9A%E5%AE%A2%E5%BC%95%E7%94%A8%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><ol>
<li><p>设置 _config.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">post_asset_folder:<span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>引入图片</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![avatar](图片目录/logo.jpg)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/2017/11/01/hexo博客引用本地图片/avatar.jpg" alt="avatar"></p>
<h2 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用标签</h2><ol>
<li><p>设置 _config.yml</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">post_asset_folder:<span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用标签</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br><span class="line"></span><br><span class="line">如:</span><br><span class="line">&#123;% asset_img avatar.jpg avatar %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<img src="/2017/11/01/hexo博客引用本地图片/11/01/hexo博客引用本地图片/avatar.jpg" title="avatar">
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp 基础知识</title>
    <url>/2020/04/03/gulp-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>参考文档：<a href="https://www.gulpjs.com.cn/" target="_blank" rel="noopener">gulp 官网</a></p>
</blockquote>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装-gulp，作为开发时依赖项"><a href="#安装-gulp，作为开发时依赖项" class="headerlink" title="安装 gulp，作为开发时依赖项"></a>安装 gulp，作为开发时依赖项</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev gulp</span><br></pre></td></tr></table></figure>
<h3 id="在根目录创建-gulpfile-js"><a href="#在根目录创建-gulpfile-js" class="headerlink" title="在根目录创建 gulpfile.js"></a>在根目录创建 gulpfile.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultTask</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// place code for your default task here</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = defaultTask</span><br></pre></td></tr></table></figure>
<h3 id="执行gulp-命令"><a href="#执行gulp-命令" class="headerlink" title="执行gulp 命令"></a>执行gulp 命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure>
<h2 id="创建任务（task）"><a href="#创建任务（task）" class="headerlink" title="创建任务（task）"></a>创建任务（task）</h2><p>gulp 提供了两个组合方法： series() 和 parallel()，允许将多个独立的任务组合为一个更大的操作。</p>
<ol>
<li>series() 是按顺序执行任务, parallel() 是并发执行任务.</li>
<li>这两个方法都可以接受任意数目的任务（task）函数或已经组合的操作.</li>
<li>series() 和 parallel() 可以互相嵌套至任意深度。</li>
</ol>
<p>举例<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; series, parallel &#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">javascript</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.build = series(clean, parallel(css, javascript));</span><br></pre></td></tr></table></figure></p>
<h2 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h2><h3 id="使用callback"><a href="#使用callback" class="headerlink" title="使用callback"></a>使用callback</h3><p>如果任务（task）不返回任何内容，则必须使用 callback 来指示任务已完成。在如下示例中，callback 将作为唯一一个名为 cb() 的参数传递给你的任务（task）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callbackTask</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `cb()` should be called by some async work</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = callbackTask;</span><br></pre></td></tr></table></figure>
<p>你通常会将此 callback 函数传递给另一个 API ，而不是自己调用它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passingCallback</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  fs.access(<span class="string">'gulpfile.js'</span>, cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = passingCallback;</span><br></pre></td></tr></table></figure>
<h3 id="使用-async-await"><a href="#使用-async-await" class="headerlink" title="使用 async/await"></a>使用 async/await</h3><p>如果不使用前面提供到几种方式，你还可以将任务（task）定义为一个 async 函数，它将利用 promise 对你的任务（task）进行包装。这将允许你使用 <code>await</code> 处理 promise，并使用其他同步代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncAwaitTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; version &#125; = fs.readFileSync(<span class="string">'package.json'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(version);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">'some result'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = asyncAwaitTask;</span><br></pre></td></tr></table></figure>
<h2 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h2><p>gulp 暴露了 src() 和 dest() 方法用于处理计算机上存放的文件。</p>
<ol>
<li>src() 接受 <a href="https://www.gulpjs.com.cn/docs/getting-started/explaining-globs/" target="_blank" rel="noopener">glob</a> 参数，并从文件系统中读取文件然后生成一个 Node 流（stream）。 </li>
<li>流（stream）所提供的主要的 API 是 .pipe() 方法, 大多数情况下，利用 .pipe() 方法将插件放置在 src() 和 dest() 之间，并转换流（stream）中的文件。</li>
<li>dest() 接受一个输出目录作为参数，并且它还会产生一个 Node 流（stream）。它会将文件内容及文件属性写入到指定的目录中。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">'gulp-babel'</span>);</span><br><span class="line"></span><br><span class="line">exports.default = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">'src/*.js'</span>)</span><br><span class="line">    .pipe(babel())</span><br><span class="line">    .pipe(dest(<span class="string">'output/'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>Gulp 插件实质上是 Node 转换流（Transform Streams），它封装了通过管道（pipeline）转换文件的常见功能，通常是使用 .pipe() 方法并放在 src() 和 dest() 之间。他们可以更改经过流（stream）的每个文件的文件名、元数据或文件内容。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</span><br><span class="line"></span><br><span class="line">exports.default = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">'src/*.js'</span>)</span><br><span class="line">    <span class="comment">// gulp-uglify 插件并不改变文件名</span></span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    <span class="comment">// 因此使用 gulp-rename 插件修改文件的扩展名</span></span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">'.min.js'</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">'output/'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="条件插件"><a href="#条件插件" class="headerlink" title="条件插件"></a>条件插件</h3><p>因为插件的操作不应该针对特定文件类型，因此你可能需要使用像 gulp-if 之类的插件来完成转换某些文件的操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">const</span> gulpif = <span class="built_in">require</span>(<span class="string">'gulp-if'</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isJavaScript</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断文件的扩展名是否是 '.js'</span></span><br><span class="line">  <span class="keyword">return</span> file.extname === <span class="string">'.js'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在同一个管道（pipeline）上处理 JavaScript 和 CSS 文件</span></span><br><span class="line">  <span class="keyword">return</span> src([<span class="string">'src/*.js'</span>, <span class="string">'src/*.css'</span>])</span><br><span class="line">    <span class="comment">// 只对 JavaScript 文件应用 gulp-uglify 插件</span></span><br><span class="line">    .pipe(gulpif(isJavaScript, uglify()))</span><br><span class="line">    .pipe(dest(<span class="string">'output/'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文件监控"><a href="#文件监控" class="headerlink" title="文件监控"></a>文件监控</h2><p>watch() 将 globs 与 任务（task） 进行关联。它对匹配 glob 的文件进行监控，如果有文件被修改了就执行关联的任务（task）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; watch, series &#125; = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">javascript</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以只关联一个任务</span></span><br><span class="line">watch(<span class="string">'src/*.css'</span>, css);</span><br><span class="line"><span class="comment">// 或者关联一个任务组合</span></span><br><span class="line">watch(<span class="string">'src/*.js'</span>, series(clean, javascript));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端知识</category>
        <category>构建工具</category>
      </categories>
      <tags>
        <tag>gulp</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>js高级面试</title>
    <url>/2018/06/11/js%E9%AB%98%E7%BA%A7%E9%9D%A2%E8%AF%95/</url>
    <content><![CDATA[<h2 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h2><h3 id="模块化的使用和编译环境"><a href="#模块化的使用和编译环境" class="headerlink" title="模块化的使用和编译环境"></a>模块化的使用和编译环境</h3><p>…</p>
<h3 id="Class-与-JS-构造函数的区别"><a href="#Class-与-JS-构造函数的区别" class="headerlink" title="Class 与 JS 构造函数的区别"></a>Class 与 JS 构造函数的区别</h3><h3 id="Promise的用法"><a href="#Promise的用法" class="headerlink" title="Promise的用法"></a>Promise的用法</h3><ol>
<li>new Promise 实例，而且要 return</li>
<li>new Promise 时要传入函数，函数有 reslove reject 两个参数</li>
<li>成功时执行 resolve() 失败时执行 reject()</li>
<li>then 监听结果</li>
</ol>
<h3 id="ES6-其他常用功能"><a href="#ES6-其他常用功能" class="headerlink" title="ES6 其他常用功能"></a>ES6 其他常用功能</h3><ol>
<li>let/const</li>
<li>多行字符串/模版变量</li>
<li>结构赋值</li>
<li>块级作用域</li>
<li>函数默认参数</li>
<li>箭头函数</li>
</ol>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><h3 id="什么是单线程，和异步有何关系"><a href="#什么是单线程，和异步有何关系" class="headerlink" title="什么是单线程，和异步有何关系"></a>什么是单线程，和异步有何关系</h3><ul>
<li>单线程 - 只有一个线程，同时只能做一件事</li>
<li>原因 - 避免 DOM 渲染的冲突</li>
<li>解决方案 - 异步</li>
</ul>
<h3 id="什么是-event-loop"><a href="#什么是-event-loop" class="headerlink" title="什么是 event-loop"></a>什么是 event-loop</h3><ul>
<li>事件轮询，JS 实现异步的具体解决方案</li>
<li>同步代码，直接执行</li>
<li>异步函数先放在 异步队列 中</li>
<li>待同步函数执行完毕，轮询执行 异步队列 的函数</li>
</ul>
<p>JS中的异步操作：</p>
<ol>
<li>定时器都是异步操作</li>
<li>事件绑定都是异步操作</li>
<li>AJAX中一般我们都采取异步操作（也可以同步）</li>
<li>回调函数可以理解为异步（不是严谨的异步操作）<br>剩下的都是同步处理</li>
</ol>
<h3 id="Promise-的标准"><a href="#Promise-的标准" class="headerlink" title="Promise 的标准"></a>Promise 的标准</h3><p>all/race</p>
<ul>
<li>Promise.all 待全部完成后,执行then</li>
<li>Promise.race 一个promise 完成后,执行then</li>
</ul>
<p>状态</p>
<p>三种状态：pending fulfilled rejected</p>
<p>then</p>
<ul>
<li>Promise 实例必须实现 then 这个方法</li>
<li>then() 必须可以接收两个函数作为参数</li>
<li>then() 返回的必须是一个 Promise 实例</li>
</ul>
<h3 id="async-await-的使用"><a href="#async-await-的使用" class="headerlink" title="async/await 的使用"></a>async/await 的使用</h3><ul>
<li>基本语法</li>
<li>使用了 Promise ，并没有和 Promise 冲突</li>
<li>完全是同步的写法，再也没有回调函数</li>
<li>但是：改变不了 JS 单线程、异步的本质</li>
</ul>
<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="原型如何实际应用"><a href="#原型如何实际应用" class="headerlink" title="原型如何实际应用"></a>原型如何实际应用</h3><h3 id="原型如何满足扩展"><a href="#原型如何满足扩展" class="headerlink" title="原型如何满足扩展"></a>原型如何满足扩展</h3><h2 id="vdom"><a href="#vdom" class="headerlink" title="vdom"></a>vdom</h2><p>…</p>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h3 id="之前使用jquery和现在使用vue或React框架的区别"><a href="#之前使用jquery和现在使用vue或React框架的区别" class="headerlink" title="之前使用jquery和现在使用vue或React框架的区别"></a>之前使用jquery和现在使用vue或React框架的区别</h3><ul>
<li>数据和视图的分离，解耦（开放封闭原则）</li>
<li>以数据驱动视图，只关心数据变化，DOM 操作被封装</li>
</ul>
<h3 id="你如何理解MVVM"><a href="#你如何理解MVVM" class="headerlink" title="你如何理解MVVM"></a>你如何理解MVVM</h3><ul>
<li>Model - 模型、数据</li>
<li>View - 视图、模板（视图和模型是分离的）</li>
<li>ViewModel - 连接 Model 和 View </li>
</ul>
<h3 id="vue-如何实现响应式"><a href="#vue-如何实现响应式" class="headerlink" title="vue 如何实现响应式"></a>vue 如何实现响应式</h3><p>vue 三要素</p>
<ul>
<li>响应式：vue 如何监听到 data 的每个属性变化？</li>
<li>模板引擎：vue 的模板如何被解析，指令如何处理？</li>
<li>渲染：vue 的模板如何被渲染成 html ？以及渲染过程</li>
</ul>
<p>答案</p>
<ul>
<li>关键是理解 Object.defineProperty</li>
<li>将 data 的属性代理到 vm 上</li>
</ul>
<h3 id="vue-如何解析模版"><a href="#vue-如何解析模版" class="headerlink" title="vue 如何解析模版"></a>vue 如何解析模版</h3><ul>
<li>模板：字符串，有逻辑，嵌入 JS 变量……</li>
<li>模板必须转换为 JS 代码（有逻辑、渲染 html、JS 变量）</li>
<li>render 函数是什么样子的</li>
<li>render 函数执行是返回 vnode</li>
<li>updateComponent</li>
</ul>
<h3 id="介绍-vue-的实现流程"><a href="#介绍-vue-的实现流程" class="headerlink" title="介绍 vue 的实现流程"></a>介绍 vue 的实现流程</h3><ol>
<li>解析模板成 render 函数</li>
<li>响应式开始监听</li>
<li>首次渲染，显示页面，且绑定依赖</li>
<li>data 属性变化，触发 rerender</li>
</ol>
<h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>…</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title> hexo-设置阅读全文</title>
    <url>/2017/11/08/hexo-%E8%AE%BE%E7%BD%AE%E9%98%85%E8%AF%BB%E5%85%A8%E6%96%87/</url>
    <content><![CDATA[<h1 id="hexo-设置阅读全文"><a href="#hexo-设置阅读全文" class="headerlink" title="hexo-设置阅读全文"></a>hexo-设置阅读全文</h1><ol>
<li><p>在文章中使用<code>&lt;!--more--&gt;</code>手动进行截断<br>这种方法可以根据文章的内容，自己在合适的位置添加<code>&lt;!--more--&gt;</code>标签，使用灵活，也是Hexo推荐的方法 ，这种方式也可以让 Hexo 中的插件更好的识别。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">---</span><br><span class="line">Welcome to [<span class="string">Hexo</span>](<span class="link">https://hexo.io/</span>)! This is your very first post. Check [<span class="string">documentation</span>](<span class="link">https://hexo.io/docs/</span>) for more info. If you get any problems when using Hexo, you can find the answer in [<span class="string">troubleshooting</span>](<span class="link">https://hexo.io/docs/troubleshooting.html</span>) or you can ask me on [<span class="string">GitHub</span>](<span class="link">https://github.com/hexojs/hexo/issues</span>).</span><br><span class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span></span><br><span class="line"><span class="section">## Quick Start</span></span><br><span class="line"></span><br><span class="line"><span class="section">### Create a new post</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在文章中的front-matter中添加description，并提供文章摘录<br>这种方式只会在首页列表中显示文章的摘要内容，进入文章详情后不会再显示。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">description: 这是摘要,进入文章详情后不会再显示。</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动形成摘要，在主题配置文件中添加<br>默认截取的长度为 150 字符，可以根据需要自行设定</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">	<span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>bash示例和书写流程</title>
    <url>/2017/07/14/bash%E7%A4%BA%E4%BE%8B%E5%92%8C%E4%B9%A6%E5%86%99%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="bash示例和书写流程"><a href="#bash示例和书写流程" class="headerlink" title="bash示例和书写流程"></a>bash示例和书写流程</h1><h2 id="新建文件test-sh"><a href="#新建文件test-sh" class="headerlink" title="新建文件test.sh"></a>新建文件test.sh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch test.sh</span><br></pre></td></tr></table></figure>
<h2 id="添加可执行权限"><a href="#添加可执行权限" class="headerlink" title="添加可执行权限"></a>添加可执行权限</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod +x test.sh</span><br></pre></td></tr></table></figure>
<h2 id="编辑test-sh，test-sh内容如下："><a href="#编辑test-sh，test-sh内容如下：" class="headerlink" title="编辑test.sh，test.sh内容如下："></a>编辑test.sh，test.sh内容如下：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello bash"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>#!/bin/bash : 它是bash文件声明语句，表示是以/bin/bash程序执行该文件。它必须写在文件的第一行！</li>
<li>echo “hello bash” : 表示在终端输出“hello bash”</li>
<li>exit 0 : 表示返回0。在bash中，0表示执行成功，其他表示失败。</li>
</ul>
<h2 id="执行bash脚本"><a href="#执行bash脚本" class="headerlink" title="执行bash脚本"></a>执行bash脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./test.sh</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">sh test.sh</span><br><span class="line">bash test.sh</span><br></pre></td></tr></table></figure>
<p>在终端输出“bash hello”</p>
<p>参考：<br><a href="http://www.cnblogs.com/skywang12345/archive/2013/05/30/3106570.html" target="_blank" rel="noopener">linux bash总结</a></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>react native 导航器</title>
    <url>/2020/08/21/react-native-%E5%AF%BC%E8%88%AA%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://reactnavigation.org/" target="_blank" rel="noopener">https://reactnavigation.org/</a></p>
</blockquote>
<h2 id="安装导航器"><a href="#安装导航器" class="headerlink" title="安装导航器"></a>安装导航器</h2><p>安装核心包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add @react-navigation/native</span><br></pre></td></tr></table></figure></p>
<p>安装其它依赖<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view</span><br></pre></td></tr></table></figure></p>
<p>处理原生内容<br>ios<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx pod-install ios</span><br></pre></td></tr></table></figure></p>
<p>android</p>
<p>处理手势库</p>
<blockquote>
<p><a href="https://docs.swmansion.com/react-native-gesture-handler/docs/" target="_blank" rel="noopener">https://docs.swmansion.com/react-native-gesture-handler/docs/</a></p>
</blockquote>
<p><code>MainActivity.java</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.swmansion.gesturehandler.react.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.facebook.react.ReactActivity;</span><br><span class="line">+ <span class="keyword">import</span> com.facebook.react.ReactActivityDelegate;</span><br><span class="line">+ <span class="keyword">import</span> com.facebook.react.ReactRootView;</span><br><span class="line">+ <span class="keyword">import</span> com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">ReactActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> String <span class="title">getMainComponentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Example"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">+  <span class="meta">@Override</span></span><br><span class="line">+  <span class="function"><span class="keyword">protected</span> ReactActivityDelegate <span class="title">createReactActivityDelegate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">+    <span class="keyword">return</span> <span class="keyword">new</span> ReactActivityDelegate(<span class="keyword">this</span>, getMainComponentName()) &#123;</span><br><span class="line">+      <span class="meta">@Override</span></span><br><span class="line">+      <span class="function"><span class="keyword">protected</span> ReactRootView <span class="title">createRootView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">+       <span class="keyword">return</span> <span class="keyword">new</span> RNGestureHandlerEnabledRootView(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">+      &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>导入 index.js 或 App.js<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;react-native-gesture-handler&apos;;</span><br></pre></td></tr></table></figure></p>
<h2 id="堆栈式导航器"><a href="#堆栈式导航器" class="headerlink" title="堆栈式导航器"></a>堆栈式导航器</h2><blockquote>
<p><a href="https://reactnavigation.org/docs/hello-react-navigation" target="_blank" rel="noopener">https://reactnavigation.org/docs/hello-react-navigation</a></p>
</blockquote>
<p>安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add @react-navigation/stack</span><br></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// In App.js in a new project</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NavigationContainer &#125; <span class="keyword">from</span> <span class="string">'@react-navigation/native'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStackNavigator &#125; <span class="keyword">from</span> <span class="string">'@react-navigation/stack'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HomeScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;&#123; <span class="attr">flex</span>: <span class="number">1</span>, <span class="attr">alignItems</span>: <span class="string">'center'</span>, <span class="attr">justifyContent</span>: <span class="string">'center'</span> &#125;&#125;&gt;</span><br><span class="line">      &lt;Text&gt;Home Screen&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Stack = createStackNavigator();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;NavigationContainer&gt;</span><br><span class="line">      &lt;Stack.Navigator&gt;</span><br><span class="line">        &lt;Stack.Screen name=<span class="string">"Home"</span> component=&#123;HomeScreen&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Stack.Navigator&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>NavigationContainer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></p>
<h2 id="底部导航器"><a href="#底部导航器" class="headerlink" title="底部导航器"></a>底部导航器</h2><blockquote>
<p><a href="https://reactnavigation.org/docs/bottom-tab-navigator" target="_blank" rel="noopener">https://reactnavigation.org/docs/bottom-tab-navigator</a></p>
</blockquote>
<p>安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add @react-navigation/bottom-tabs</span><br></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createBottomTabNavigator &#125; <span class="keyword">from</span> <span class="string">'@react-navigation/bottom-tabs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Tab = createBottomTabNavigator();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyTabs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Tab.Navigator&gt;</span><br><span class="line">      &lt;Tab.Screen name=<span class="string">"Home"</span> component=&#123;HomeScreen&#125; /&gt;</span><br><span class="line">      &lt;Tab.Screen name=<span class="string">"Settings"</span> component=&#123;SettingsScreen&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Tab.Navigator&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react native</tag>
      </tags>
  </entry>
  <entry>
    <title>react native 图标字体</title>
    <url>/2020/08/21/react-native-%E5%9B%BE%E6%A0%87%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://developer.aliyun.com/mirror/npm/package/react-native-iconfont-cli" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/npm/package/react-native-iconfont-cli</a></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add react-native-svg</span><br></pre></td></tr></table></figure>
<p>因为涉及到原生代码, 需要重新安装应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新安装 ios</span></span><br><span class="line"><span class="built_in">cd</span> ios</span><br><span class="line">pod install</span><br><span class="line">npm run ios</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新安装 andorid</span></span><br><span class="line">npm run android</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add -D react-native-iconfont-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line">npx iconfont-init</span><br></pre></td></tr></table></figure>
<p>根据需求配置 <code>iconfont.json</code><br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"symbol_url"</span>: <span class="string">"//at.alicdn.com/t/font_2018217_2h9xudzdl62.js"</span>,</span><br><span class="line">    <span class="attr">"use_typescript"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"save_dir"</span>: <span class="string">"./src/components/iconfont"</span>,</span><br><span class="line">    <span class="attr">"trim_icon_prefix"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"default_icon_size"</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="生成组件"><a href="#生成组件" class="headerlink" title="生成组件"></a>生成组件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx iconfont-rn</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react native</tag>
      </tags>
  </entry>
  <entry>
    <title>install_ftp</title>
    <url>/2017/07/09/install-ftp/</url>
    <content><![CDATA[<h1 id="安装ftp服务"><a href="#安装ftp服务" class="headerlink" title="安装ftp服务"></a>安装ftp服务</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep vsftp</span><br><span class="line">yum install vsftpd -y</span><br></pre></td></tr></table></figure>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service vsftpd start</span><br></pre></td></tr></table></figure>
<h2 id="添加ftp用户"><a href="#添加ftp用户" class="headerlink" title="添加ftp用户"></a>添加ftp用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser <span class="built_in">test</span></span><br><span class="line">passwd <span class="built_in">test</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>js 执行机制</title>
    <url>/2018/07/24/js-%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p><img src="/2018/07/24/js-执行机制/js执行机制概览.png" alt="normal"></p>
<h2 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h2><p>Js 中，有两类任务队列：宏任务队列（macro tasks）和微任务队列（micro tasks）。宏任务队列可以有多个，微任务队列只有一个。那么什么任务，会分到哪个队列呢？</p>
<ul>
<li>宏任务：script（全局任务）, setTimeout, setInterval, setImmediate, I/O, UI rendering.</li>
<li>微任务：process.nextTick, Promise, Object.observer, MutationObserver.</li>
</ul>
<h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><p>先执行主线程，再取微任务，再取宏任务</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>linux服务器配置</title>
    <url>/2017/08/16/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="linux服务器配置"><a href="#linux服务器配置" class="headerlink" title="linux服务器配置"></a>linux服务器配置</h1><h2 id="更新-yum"><a href="#更新-yum" class="headerlink" title="更新:yum"></a>更新:yum</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>
<h2 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure>
<h2 id="解压软件"><a href="#解压软件" class="headerlink" title="解压软件"></a>解压软件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install tar</span><br></pre></td></tr></table></figure>
<h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install vim</span><br></pre></td></tr></table></figure>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure>
<h2 id="nodejs版本管理"><a href="#nodejs版本管理" class="headerlink" title="nodejs版本管理"></a>nodejs版本管理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/creationix/nvm.git ~/.nvm &amp;&amp; <span class="built_in">cd</span> ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags`</span><br><span class="line">. ~/.nvm/nvm.sh</span><br><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="comment"># 加一句</span></span><br><span class="line"><span class="built_in">source</span> ~/.nvm/nvm.sh</span><br></pre></td></tr></table></figure>
<h2 id="安装-Nodejs"><a href="#安装-Nodejs" class="headerlink" title="安装 Nodejs"></a>安装 Nodejs</h2><p>nvm install 4.4.3</p>
<h2 id="淘宝镜像"><a href="#淘宝镜像" class="headerlink" title="淘宝镜像"></a>淘宝镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h2 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install pm2 -g</span><br></pre></td></tr></table></figure>
<h2 id="写入配置文件"><a href="#写入配置文件" class="headerlink" title="写入配置文件"></a>写入配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入配置文件目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/nginx/conf.d/</span><br><span class="line"><span class="comment"># 新建配置</span></span><br><span class="line">vi blog.conf</span><br></pre></td></tr></table></figure>
<p>服务配置<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name blog.taohong.space; <span class="comment">#域名</span></span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">     proxy_pass http://127.0.0.1:3000; <span class="comment"># 端口</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>静态文件配置<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 80;</span><br><span class="line">   server_name resume.taohong.space; <span class="comment">#域名</span></span><br><span class="line"></span><br><span class="line">   location / &#123;</span><br><span class="line">     root   /project/resume/docs; <span class="comment">#静态文件地址</span></span><br><span class="line">     index  index.html index.htm; <span class="comment">#入口文件</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>npm npx 使用指南</title>
    <url>/2018/04/27/npm-npx-%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="npm-npx-使用指南"><a href="#npm-npx-使用指南" class="headerlink" title="npm npx 使用指南"></a>npm npx 使用指南</h1><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>npm 脚本的原理非常简单。每当执行 <code>npm run</code>，就会自动新建一个 Shell，在这个 Shell 里面执行指定的脚本命令。因此，只要是 Shell（一般是 Bash）可以运行的命令，就可以写在 npm 脚本里面。</p>
<p>比较特别的是，<code>npm run</code> 新建的这个 Shell，会将当前目录的 <code>node_modules/.bin</code> 子目录加入 <code>PATH</code> 变量，执行结束后，再将PATH变量恢复原样。</p>
<p>这意味着，当前目录的 <code>node_modules/.bin</code> 子目录里面的所有脚本，都可以直接用脚本名调用，而不必加上路径。比如，当前项目的依赖里面有 Mocha，只要直接写 <code>mocha test</code> 就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"test"</span>: <span class="string">"mocha test"</span></span><br></pre></td></tr></table></figure>
<p>而不用写成下面这样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"test"</span>: <span class="string">"./node_modules/.bin/mocha test"</span></span><br></pre></td></tr></table></figure>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>如果是并行执行（即同时的平行执行），可以使用 <code>&amp;</code> 符号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run script1.js &amp; npm run script2.js</span><br></pre></td></tr></table></figure>
<p>如果是继发执行（即只有前一个任务成功，才执行下一个任务），可以使用 <code>&amp;&amp;</code> 符号。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run script1.js &amp;&amp; npm run script2.js</span><br></pre></td></tr></table></figure>
<h3 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h3><p>npm 脚本有<code>pre</code>和<code>post</code>两个钩子。举例来说，<code>build</code>脚本命令的钩子就是<code>prebuild</code>和<code>postbuild</code>。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"prebuild": "echo I run before the build script",</span><br><span class="line">"build": "cross-env NODE_ENV=production webpack",</span><br><span class="line">"postbuild": "echo I run after the build script"</span><br></pre></td></tr></table></figure>
<p>用户执行<code>npm run build</code>的时候，会自动按照下面的顺序执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run prebuild &amp;&amp; npm run build &amp;&amp; npm run postbuild</span><br></pre></td></tr></table></figure>
<p>因此，可以在这两个钩子里面，完成一些准备工作和清理工作。下面是一个例子。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"clean": "rimraf ./dist &amp;&amp; mkdir dist",</span><br><span class="line">"prebuild": "npm run clean",</span><br><span class="line">"build": "cross-env NODE_ENV=production webpack"</span><br></pre></td></tr></table></figure>
<h3 id="常用脚本示例"><a href="#常用脚本示例" class="headerlink" title="常用脚本示例"></a>常用脚本示例</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除目录</span></span><br><span class="line">"clean": "rimraf dist/*",</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地搭建一个 HTTP 服务</span></span><br><span class="line">"serve": "http-server -p 9090 dist/",</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开浏览器</span></span><br><span class="line">"open:dev": "opener http://localhost:9090",</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实时刷新</span></span><br><span class="line"> "livereload": "live-reload --port 9091 dist/",</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建 HTML 文件</span></span><br><span class="line">"build:html": "jade index.jade &gt; dist/index.html",</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只要 CSS 文件有变动，就重新执行构建</span></span><br><span class="line">"watch:css": "watch 'npm run build:css' assets/styles/",</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只要 HTML 文件有变动，就重新执行构建</span></span><br><span class="line">"watch:html": "watch 'npm run build:html' assets/html",</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署到 Amazon S3</span></span><br><span class="line">"deploy:prod": "s3-cli sync ./dist/ s3://example-com/prod-site/",</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建 favicon</span></span><br><span class="line">"build:favicon": "node scripts/favicon.js",</span><br></pre></td></tr></table></figure>
<h2 id="npx"><a href="#npx" class="headerlink" title="npx"></a>npx</h2><h3 id="执行依赖包里的二进制文件"><a href="#执行依赖包里的二进制文件" class="headerlink" title="执行依赖包里的二进制文件"></a>执行依赖包里的二进制文件</h3><p>举例来说，之前我们可能会写这样的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D webpack</span><br><span class="line">./node_modules/.bin/webpack -v</span><br></pre></td></tr></table></figure>
<p>有了 npx，你只需要这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -D webpack</span><br><span class="line">npx webpack -v</span><br></pre></td></tr></table></figure>
<p>npx 会自动查找当前依赖包中的可执行文件，如果找不到，就会去 PATH 里找。如果依然找不到，就会帮你临时安装(one-off commands)</p>
<p>这条命令会临时安装 <code>create-react-app</code> 包，命令完成后 <code>create-react-app</code> 会删掉，不会出现在 global 中。下次再执行，还是会重新临时安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx create-react-app my-cool-new-app</span><br></pre></td></tr></table></figure>
<p>再比如 npx http-server 可以一句话帮你开启一个静态服务器<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npx http-server</span><br></pre></td></tr></table></figure></p>
<h3 id="运行远程仓库的可执行文件"><a href="#运行远程仓库的可执行文件" class="headerlink" title="运行远程仓库的可执行文件"></a>运行远程仓库的可执行文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx github:piuccio/cowsay hello</span><br></pre></td></tr></table></figure>
<h3 id="运行不同Node-js版本的命令"><a href="#运行不同Node-js版本的命令" class="headerlink" title="运行不同Node.js版本的命令"></a>运行不同Node.js版本的命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx node@6 -v</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考链接<br><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">阮一峰的网络日志&gt;npm scripts 使用指南</a></p>
<p><a href="https://blog.csdn.net/whh181/article/details/78363544" target="_blank" rel="noopener">介绍npx：一个npm包执行器</a><br><a href="https://zhuanlan.zhihu.com/p/27840803" target="_blank" rel="noopener">npx 是什么</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>npx</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime常用插件</title>
    <url>/2017/07/16/sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="sublime常用插件"><a href="#sublime常用插件" class="headerlink" title="sublime常用插件"></a>sublime常用插件</h1><h2 id="设置-setting"><a href="#设置-setting" class="headerlink" title="设置(setting)"></a>设置(setting)</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"auto_complete_triggers"</span>:</span><br><span class="line">	[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">"characters"</span>: <span class="string">"1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.&lt;"</span>,</span><br><span class="line">			<span class="attr">"selector"</span>: <span class="string">"text.html"</span></span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line">	<span class="attr">"font_size"</span>: <span class="number">14</span>,</span><br><span class="line">	<span class="attr">"ignored_packages"</span>:</span><br><span class="line">	[</span><br><span class="line">		<span class="string">"Vintage"</span></span><br><span class="line">	],</span><br><span class="line">	<span class="attr">"tab_size"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl+shirt+p</span><br></pre></td></tr></table></figure>
<p>install package control</p>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><h4 id="emmet"><a href="#emmet" class="headerlink" title="emmet"></a>emmet</h4><p>介绍：仿选择器语法生成代码</p>
<h4 id="docBlock"><a href="#docBlock" class="headerlink" title="docBlock"></a>docBlock</h4><p>介绍：自动补全注释</p>
<h4 id="html-css-js-prettify"><a href="#html-css-js-prettify" class="headerlink" title="html/css/js prettify"></a>html/css/js prettify</h4><p>介绍：整理代码</p>
<h4 id="CSScomb"><a href="#CSScomb" class="headerlink" title="CSScomb"></a>CSScomb</h4><p>介绍：规范css，整理css顺序<br>配置网站：<a href="http://csscomb.com/config" target="_blank" rel="noopener">http://csscomb.com/config</a><br>配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"node-path"</span> : <span class="string">"C:\\Program Files\\nodejs.node.exe"</span>,</span><br><span class="line">    <span class="attr">"config"</span>: &#123;</span><br><span class="line">        <span class="attr">"remove-empty-rulesets"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"always-semicolon"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"color-case"</span>: <span class="string">"lower"</span>,</span><br><span class="line">        <span class="attr">"block-indent"</span>: <span class="string">"\t"</span>,</span><br><span class="line">        <span class="attr">"color-shorthand"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"element-case"</span>: <span class="string">"lower"</span>,</span><br><span class="line">        <span class="attr">"eof-newline"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"leading-zero"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"quotes"</span>: <span class="string">"single"</span>,</span><br><span class="line">        <span class="attr">"sort-order-fallback"</span>: <span class="string">"abc"</span>,</span><br><span class="line">        <span class="attr">"space-before-colon"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"space-after-colon"</span>: <span class="string">" "</span>,</span><br><span class="line">        <span class="attr">"space-before-combinator"</span>: <span class="string">" "</span>,</span><br><span class="line">        <span class="attr">"space-after-combinator"</span>: <span class="string">" "</span>,</span><br><span class="line">        <span class="attr">"space-between-declarations"</span>: <span class="string">"\n"</span>,</span><br><span class="line">        <span class="attr">"space-before-opening-brace"</span>: <span class="string">" "</span>,</span><br><span class="line">        <span class="attr">"space-after-opening-brace"</span>: <span class="string">"\n"</span>,</span><br><span class="line">        <span class="attr">"space-after-selector-delimiter"</span>: <span class="string">"\n"</span>,</span><br><span class="line">        <span class="attr">"space-before-selector-delimiter"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"space-before-closing-brace"</span>: <span class="string">"\n"</span>,</span><br><span class="line">        <span class="attr">"strip-spaces"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"tab-size"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"unitless-zero"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"vendor-prefix-align"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="file-header"><a href="#file-header" class="headerlink" title="file header"></a>file header</h4><p>介绍：添加文件header</p>
<h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><p>介绍：jquery代码提示</p>
<h4 id="Bootstrap-3-Snippets"><a href="#Bootstrap-3-Snippets" class="headerlink" title="Bootstrap 3 Snippets"></a>Bootstrap 3 Snippets</h4><p>介绍：bootstrap3 代码片段</p>
<h4 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h4><p>介绍：scss代码提示</p>
<h4 id="ES6-Toolkit"><a href="#ES6-Toolkit" class="headerlink" title="ES6-Toolkit"></a>ES6-Toolkit</h4><p>介绍：es6转es5,es6代码片段</p>
<h4 id="SideBarEnhancements"><a href="#SideBarEnhancements" class="headerlink" title="SideBarEnhancements"></a>SideBarEnhancements</h4><p>介绍：打开浏览器</p>
<h4 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h4><p>介绍：打开命令行工具</p>
]]></content>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>react native 项目初始化</title>
    <url>/2020/08/21/react-native-%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx react-native init projectname --template react-native-template-typescript</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动项目 </span></span><br><span class="line">yarn ios</span><br><span class="line">yarn android</span><br></pre></td></tr></table></figure>
<h2 id="多环境"><a href="#多环境" class="headerlink" title="多环境"></a>多环境</h2><blockquote>
<p><a href="https://js.coach/package/react-native-config" target="_blank" rel="noopener">https://js.coach/package/react-native-config</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add react-native-config</span><br></pre></td></tr></table></figure>
<p>根目录下新建 <code>.env</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">API_URL=https://myapi.com</span><br><span class="line">GOOGLE_MAPS_API_KEY=abcdefgh</span><br></pre></td></tr></table></figure></p>
<p>使用<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Config <span class="keyword">from</span> <span class="string">"react-native-config"</span>;</span><br><span class="line"></span><br><span class="line">Config.API_URL; <span class="comment">// 'https://myapi.com'</span></span><br><span class="line">Config.GOOGLE_MAPS_API_KEY; <span class="comment">// 'abcdefgh'</span></span><br></pre></td></tr></table></figure></p>
<p>安装</p>
<p>ios<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(cd ios; pod install)</span><br></pre></td></tr></table></figure></p>
<p>android<br>android/app/build.gradle<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 2nd line, add a new apply:</span><br><span class="line">apply from: project(&apos;:react-native-config&apos;).projectDir.getPath() + &quot;/dotenv.gradle&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><blockquote>
<p><a href="https://www.npmjs.com/package/babel-plugin-module-resolver" target="_blank" rel="noopener">https://www.npmjs.com/package/babel-plugin-module-resolver</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add babel-plugin-module-resolver</span><br></pre></td></tr></table></figure>
<p>配置 <code>.babelrc</code> 或 <code>babel.config.js</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [<span class="string">'module:metro-react-native-babel-preset'</span>],</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'module-resolver'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        root: [<span class="string">'./src'</span>],</span><br><span class="line">        alias: &#123;</span><br><span class="line">          <span class="string">'@'</span>: <span class="string">'./src'</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>配置 <code>tsconfig.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"baseUrl"</span>: <span class="string">"./src"</span>,                       </span><br><span class="line">  <span class="attr">"paths"</span>: &#123;</span><br><span class="line">    <span class="attr">"@/*"</span>: [<span class="string">"*"</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>react natvie</tag>
      </tags>
  </entry>
  <entry>
    <title>sublime快捷键设置</title>
    <url>/2017/07/16/sublime%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="sublime快捷键设置"><a href="#sublime快捷键设置" class="headerlink" title="sublime快捷键设置"></a>sublime快捷键设置</h1><h2 id="快捷键设计原则"><a href="#快捷键设计原则" class="headerlink" title="快捷键设计原则"></a>快捷键设计原则</h2><ol>
<li>尽量不改变原有快捷键</li>
<li>手指跨幅不要太大</li>
<li>语义化表达</li>
<li>相反操作用ctrl和ctrl+alt操作</li>
</ol>
<h2 id="快捷键配置"><a href="#快捷键配置" class="headerlink" title="快捷键配置"></a>快捷键配置</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">	<span class="comment">// 字母大小写</span></span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+u"</span>], <span class="attr">"command"</span>: <span class="string">"title_case"</span> &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+u"</span>, <span class="string">"ctrl+u"</span>], <span class="attr">"command"</span>: <span class="string">"upper_case"</span> &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+l"</span>], <span class="attr">"command"</span>: <span class="string">"lower_case"</span> &#125;,</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 折叠代码操作</span></span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+shift+["</span>], <span class="attr">"command"</span>: <span class="string">"fold"</span> &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+shift+]"</span>], <span class="attr">"command"</span>: <span class="string">"unfold"</span> &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+1"</span>], <span class="attr">"command"</span>: <span class="string">"fold_by_level"</span>, <span class="attr">"args"</span>: &#123;<span class="attr">"level"</span>: <span class="number">1</span>&#125; &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+2"</span>], <span class="attr">"command"</span>: <span class="string">"fold_by_level"</span>, <span class="attr">"args"</span>: &#123;<span class="attr">"level"</span>: <span class="number">2</span>&#125; &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+3"</span>], <span class="attr">"command"</span>: <span class="string">"fold_by_level"</span>, <span class="attr">"args"</span>: &#123;<span class="attr">"level"</span>: <span class="number">3</span>&#125; &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+4"</span>], <span class="attr">"command"</span>: <span class="string">"fold_by_level"</span>, <span class="attr">"args"</span>: &#123;<span class="attr">"level"</span>: <span class="number">4</span>&#125; &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+5"</span>], <span class="attr">"command"</span>: <span class="string">"fold_by_level"</span>, <span class="attr">"args"</span>: &#123;<span class="attr">"level"</span>: <span class="number">5</span>&#125; &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+6"</span>], <span class="attr">"command"</span>: <span class="string">"fold_by_level"</span>, <span class="attr">"args"</span>: &#123;<span class="attr">"level"</span>: <span class="number">6</span>&#125; &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+7"</span>], <span class="attr">"command"</span>: <span class="string">"fold_by_level"</span>, <span class="attr">"args"</span>: &#123;<span class="attr">"level"</span>: <span class="number">7</span>&#125; &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+8"</span>], <span class="attr">"command"</span>: <span class="string">"fold_by_level"</span>, <span class="attr">"args"</span>: &#123;<span class="attr">"level"</span>: <span class="number">8</span>&#125; &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+9"</span>], <span class="attr">"command"</span>: <span class="string">"fold_by_level"</span>, <span class="attr">"args"</span>: &#123;<span class="attr">"level"</span>: <span class="number">9</span>&#125; &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+0"</span>], <span class="attr">"command"</span>: <span class="string">"unfold_all"</span> &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+alt+k"</span>, <span class="string">"ctrl+alt+0"</span>], <span class="attr">"command"</span>: <span class="string">"fold_all"</span> &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+k"</span>, <span class="string">"ctrl+j"</span>], <span class="attr">"command"</span>: <span class="string">"unfold_all"</span> &#125;,</span><br><span class="line">	&#123; <span class="attr">"keys"</span>: [<span class="string">"ctrl+alt+k"</span>, <span class="string">"ctrl+alt+j"</span>], <span class="attr">"command"</span>: <span class="string">"fold_tag_attributes"</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="导航-跳转"><a href="#导航-跳转" class="headerlink" title="导航/跳转"></a>导航/跳转</h3><p>ctrl+p:根据文件名快速打开文件<br>+@:跳转到所定义模块<br>+#:跳转到关键字<br>+:跳转到行</p>
<h3 id="tabs"><a href="#tabs" class="headerlink" title="tabs"></a>tabs</h3><p>ctrl+shift+t:打开最近关闭的tab<br>ctrl+pgUp:逆序显示tab<br>ctrl+pgUp:顺序序显示tab<br>ctrl+w:关闭tab</p>
<h3 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h3><p>alt+shift+2<br>alt+shift+1</p>
<h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><p>删除<br>ctrl+x:删除行<br>ctrl+kk:删除光标后所有内容<br>ctrl+j:将下一行与当前行连接</p>
<p>移位<br>ctrl+回车:在当前行下方另起一行<br>ctrl+shift+回车:在当前行上方另起一行<br>ctrl+shift+上下键:交换上下行</p>
<p>选中<br>ctrl+方向键:选中<br>ctrl+shift+左右键:以词为单位选中<br>ctrl+shift+m:选中封闭模块内容<br>ctrl+m:跳转到模块处<br>ctrl+d:选中相同词<br>ctrl+K,ctrl+d:跳过最后选中的词<br>alt+f3:选择全部相同单词<br>ctrl+l:选中行<br>ctrl+shift+l</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>ctrl+f:查找<br>ctrl+h:替换</p>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>ctrl+f2:设置书签<br>f2:上一个书签<br>shift:下一个书签<br>ctrl+shift+f2:清除所有书签</p>
<h3 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h3><p>ctrl+ku 首字母大小写<br>ctrl+uu 大写<br>ctrl+kl 小写</p>
<h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h3><p>ctrl+shift+[:折叠<br>ctrl+shift+]:取消折叠<br>ctrl+k, ctrl+0:取消所有折叠<br>ctrl+alt+k, ctrl+alt+0:折叠全部<br>ctrl+k, ctrl+j:取消所有折叠<br>ctrl+alt+k, ctrl+alt+j:折叠所有标签</p>
]]></content>
      <tags>
        <tag>sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>scss基础</title>
    <url>/2017/07/16/scss%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="scss基础"><a href="#scss基础" class="headerlink" title="scss基础"></a>scss基础</h1><p>找一个点看官网的demo入手，入手后边用边找对应的API。只要学会最基本的东西，如何编译，嵌套的写法，如何计算。就和学js一样，最开始只要学习变量，判断，循环，随着项目过程，不断的看api，慢慢就熟了，然后可以看一看背后的东西。<br>只要知道是什么，和最基本的东西就行。</p>
<p>前端技术发展的很快，要不断的学一些新东西，这样以这些东西为基础的新东西发展出来时，才能很快知道和学习。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>scss中可以定义变量，方便统一修改和维护。<br><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scss style</span></span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br><span class="line"><span class="variable">$fontStack</span>:    Helvetica, sans-serif;</span><br><span class="line"><span class="variable">$primaryColor</span>: <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="variable">$fontStack</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$primaryColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>scss可以进行选择器的嵌套，表示层级关系，看起来很优雅整齐。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scss style</span></span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">li</span> &#123; <span class="attribute">display</span>: inline-block; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">scss中如导入其他scss文件，最后编译为一个css文件，优于纯css的<span class="keyword">@import</span></span><br><span class="line">//scss style</span><br><span class="line">//-----------------------------------</span><br><span class="line">// _reset.scss</span><br><span class="line"></span><br><span class="line">html,</span><br><span class="line">body,</span><br><span class="line">ul,</span><br><span class="line">ol &#123;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scss style</span></span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br><span class="line"><span class="comment">// base.scss </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">'reset'</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span> Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span> Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h2><p>scss中可用mixin定义一些代码片段，且可传参数，方便日后根据需求调用。从此处理css3的前缀兼容轻松便捷。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scss style</span></span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br><span class="line"><span class="keyword">@mixin</span> box-sizing (<span class="variable">$sizing</span>) &#123;</span><br><span class="line">    -webkit-<span class="attribute">box-sizing</span>:<span class="variable">$sizing</span>;     </span><br><span class="line">       -moz-<span class="attribute">box-sizing</span>:<span class="variable">$sizing</span>;</span><br><span class="line">            <span class="attribute">box-sizing</span>:<span class="variable">$sizing</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-border</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="keyword">@include</span> box-sizing(border-box);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line"><span class="selector-class">.box-border</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扩展-继承"><a href="#扩展-继承" class="headerlink" title="扩展/继承"></a>扩展/继承</h2><p>scss可通过@extend来实现代码组合声明，使代码更加优越简洁。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scss style</span></span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .message;</span><br><span class="line">  <span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .message;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="keyword">@extend</span> .message;</span><br><span class="line">  <span class="attribute">border-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line"><span class="selector-class">.message</span>, <span class="selector-class">.success</span>, <span class="selector-class">.error</span>, <span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#cccccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>scss可进行简单的加减乘除运算等</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scss style</span></span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br><span class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">width</span>: <span class="number">100%</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[role="main"]</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span> / <span class="number">960px</span> * <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span><span class="selector-attr">[role="complimentary"]</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span> / <span class="number">960px</span> * <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[role=<span class="string">"main"</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">62.5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span><span class="selector-attr">[role=<span class="string">"complimentary"</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">31.25%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>scss中集成了大量的颜色函数，让变换颜色更加简单。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scss style</span></span><br><span class="line"><span class="comment">//-----------------------------------</span></span><br><span class="line"><span class="variable">$linkColor</span>: <span class="number">#08c</span>;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:none;</span><br><span class="line">    <span class="attribute">color</span>:<span class="variable">$linkColor</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:darken(<span class="variable">$linkColor</span>,<span class="number">10%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//css style</span><br><span class="line">//-----------------------------------</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0088cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#006699</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="compass"><a href="#compass" class="headerlink" title="compass"></a>compass</h2><p>compass由scss的核心团队成员Chris Eppstein创建，是一个非常丰富的样式框架，包括大量定义好的mixin，函数，以及对scss的扩展。</p>
]]></content>
      <tags>
        <tag>scss</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode快速定位文件和方法</title>
    <url>/2019/01/08/vscode%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E6%96%87%E4%BB%B6%E5%92%8C%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://code.visualstudio.com/docs/editor/editingevolved" target="_blank" rel="noopener">官方文档-代码导航</a></p>
</blockquote>
<h2 id="主命令框"><a href="#主命令框" class="headerlink" title="主命令框"></a>主命令框</h2><p>最重要的功能就是<code>F1</code>或<code>Ctrl+Shift+P</code>打开的命令面板了，在这个命令框里可以执行VSCode的任何一条命令，甚至关闭这个编辑器。<br>按一下<code>Backspace</code>会进入到<code>Ctrl+P</code>模式里<br>在<code>Ctrl+P</code>下输入<code>&gt;</code>又可以回到<code>Ctrl+Shift+P</code>模式。<br>在<code>Ctrl+P</code>窗口下还可以直接输入文件名，跳转到文件</p>
<h2 id="快速文件导航"><a href="#快速文件导航" class="headerlink" title="快速文件导航"></a>快速文件导航</h2><p>在浏览项目时，Explorer非常适合在文件之间导航。但是，当您处理任务时，您会发现自己在同一组文件之间快速跳转。VS Code提供了两个功能强大的命令，可以通过易于使用的键绑定在文件中导航和跨文件导航。</p>
<p>按住<code>Ctrl</code>键并按<code>Tab</code>键查看编辑器组中打开的所有文件的列表。要打开其中一个文件，请再次使用<code>Tab</code>选择要导航到的文件，然后释放<code>Ctrl</code>以将其打开。</p>
<p><img src="/2019/01/08/vscode快速定位文件和方法/quicknav.png" alt="quicknav"></p>
<p>或者，您可以使用<code>Alt + Left</code>和<code>Alt + Right</code>在文件和编辑位置之间导航。如果您在同一文件的不同行之间跳转，这些快捷方式允许您轻松地在这些位置之间导航。</p>
<blockquote>
<p>提示：键入<code>Ctrl + P</code>（快速打开）时，可以按名称打开任何文件。</p>
</blockquote>
<h2 id="转到定义"><a href="#转到定义" class="headerlink" title="转到定义"></a>转到定义</h2><p>如果某种语言支持它，您可以按F12转到符号的定义。</p>
<p>如果按<code>Ctrl</code>键并将鼠标悬停在符号上，将显示声明的预览：</p>
<p><img src="/2019/01/08/vscode快速定位文件和方法/ctrlhover.png" alt="ctrlhover"></p>
<blockquote>
<p>提示：您可以使用<code>Ctrl +单击</code>跳转到定义，或使用<code>Ctrl + Alt +单击</code>打开侧面的定义。</p>
</blockquote>
<h2 id="转到类型定义"><a href="#转到类型定义" class="headerlink" title="转到类型定义"></a>转到类型定义</h2><p>某些语言还支持通过从编辑器上下文菜单或命令选项板运行“ 转到类型定义”命令来跳转到符号的类型定义。这将带您到符号类型的定义。命令<code>editor.action.goToTypeDefinition</code>默认情况下不绑定到键盘快捷键，但您可以添加自己的自定义键绑定。</p>
<h2 id="转到引用"><a href="#转到引用" class="headerlink" title="转到引用"></a>转到引用</h2><p>语言还可以通过按<code>Ctrl+F12</code>支持跳转到符号的实现。对于接口，它显示了该接口的所有实现者，对于抽象方法，这显示了该方法的所有具体实现。</p>
<h2 id="转到符号"><a href="#转到符号" class="headerlink" title="转到符号"></a>转到符号</h2><p>您可以使用<code>Ctrl+Shift+O</code>在文件内导航符号。通过键入：符号将按类别分组。按<code>向上</code>或<code>向下</code>键并导航到所需的位置。</p>
<h2 id="按名称打开符号"><a href="#按名称打开符号" class="headerlink" title="按名称打开符号"></a>按名称打开符号</h2><p>某些语言支持使用<code>Ctrl+T</code>跨文件跳转到符号。键入要导航到的类型的第一个字母，无论哪个文件包含它，然后按Enter键。</p>
<h2 id="窥视"><a href="#窥视" class="headerlink" title="窥视"></a>窥视</h2><p>我们认为没有什么比一个大的上下文切换更糟糕了，当你想要的只是快速检查一些东西。 这就是为什么我们支持偷看的编辑。 当您执行Peek References搜索（通过Shift+F12 ）或Peek Definition （通过Alt+F12 ）时，我们将结果嵌入到内联中：</p>
<p><img src="/2019/01/08/vscode快速定位文件和方法/references.png" alt="references"></p>
<p>您可以在窥视编辑器中的不同引用之间导航，并在那里进行快速编辑。 单击隐藏的编辑器文件名或双击结果列表将在外部编辑器中打开引用。</p>
<blockquote>
<p>提示：此外，如果您按下<code>Escape</code>或在<code>peek</code>编辑器区域中双击，则会关闭查看窗口。您可以使用<code>editor.stablePeek</code> 设置禁用此行为。</p>
</blockquote>
<p>##错误和警告<br>警告或错误可以通过已配置的任务，丰富的语言服务或者在后台不断分析代码的连接器(linters)生成。由于我们喜欢无错误的代码，警告和错误会出现在多个地方：</p>
<ul>
<li>在状态栏中，有一个所有错误和警告计数的摘要。</li>
<li>您可以单击摘要或按<code>Ctrl+Shift+M</code>以显示“问题”面板，其中包含所有当前错误的列表。</li>
<li>如果打开包含错误或警告的文件，它们将与文本和概述标尺一起呈现。</li>
</ul>
<p><img src="/2019/01/08/vscode快速定位文件和方法/errors.png" alt="errors"></p>
<blockquote>
<p>提示：要循环显示当前文件中的错误或警告，可以按<code>F8</code>或<code>Shift+F8</code> ，这将显示详细说明问题的内联区域和可能的代码操作（如果可用）：</p>
</blockquote>
<p><img src="/2019/01/08/vscode快速定位文件和方法/errorsinline.png" alt="errorsinline"></p>
<p>警告和错误可以提供代码操作（也称为快速修复）以帮助解决问题。 这些将作为灯泡显示在左边距的编辑器中。 单击灯泡将显示“代码操作”选项或执行操作。</p>
<h2 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h2><ul>
<li>查找 Ctrl+F</li>
<li>查找替换 Ctrl+H</li>
<li>整个文件夹中查找 Ctrl+Shift+F</li>
<li>匹配符：<ul>
<li>* to match one or more characters in a path segment</li>
<li>? to match on one character in a path segment</li>
<li>** to match any number of path segments ,including none</li>
<li>{} to group conditions (e.g. {**/*.html,**/*.txt} matches all html and txt files)</li>
<li>[] to declare a range of characters to match (e.g., example.[0-9] to match on example.0,example.1,…</li>
</ul>
</li>
</ul>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="Bookmarks"><a href="#Bookmarks" class="headerlink" title="Bookmarks"></a>Bookmarks</h3><p>这是一款给文件打上书签, 方便快速跳转的插件</p>
<table>
<thead>
<tr>
<th>常用快捷键</th>
<th>效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>ctrl+alt+k</td>
<td>添加或取消标签</td>
</tr>
<tr>
<td>ctrl+alt+j</td>
<td>跳转到上一个标签</td>
</tr>
<tr>
<td>ctrl+alt+l</td>
<td>跳转到下一个标签</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>vue基础</title>
    <url>/2018/06/07/vue%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="内部指令"><a href="#内部指令" class="headerlink" title="内部指令"></a>内部指令</h2><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>v-if v-else</td>
<td>是否加载html中的DOM</td>
</tr>
<tr>
<td>v-show</td>
<td>是否用display属性显示出来</td>
</tr>
<tr>
<td>v-for</td>
<td>循环渲染</td>
</tr>
<tr>
<td>v-text v-html</td>
<td>输出text 输出html</td>
</tr>
<tr>
<td>v-on</td>
<td>绑定事件监听，缩写<code>@</code></td>
</tr>
<tr>
<td>v-model</td>
<td>双向绑定，修饰符<code>.lazy</code>、<code>.number</code>、<code>.trim</code></td>
</tr>
<tr>
<td>v-bind</td>
<td>绑定标签的属性，缩写<code>:</code></td>
</tr>
<tr>
<td>其它 v-pre，v-cloak，v-once</td>
<td>输出原始值，渲染整个DOM后再显示，渲染一次</td>
</tr>
</tbody>
</table>
<h2 id="全局API"><a href="#全局API" class="headerlink" title="全局API"></a>全局API</h2><p>什么是全局API？</p>
<p>全局API并不在构造器里，而是先声明全局变量或者直接在Vue上定义一些新功能，Vue内置了一些全局API，比如Vue.directive。说的简单些就是，在构造器外部用Vue提供给我们的API函数来定义新的功能。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Vue.extend</td>
<td>使用基础 Vue 构造器，创建一个“子类”</td>
</tr>
<tr>
<td>Vue.nextTick</td>
<td>在下次 DOM 更新循环结束之后执行延迟回调</td>
</tr>
<tr>
<td>Vue.set</td>
<td>向响应式对象中添加一个属性</td>
</tr>
<tr>
<td>Vue.delete</td>
<td>删除对象的属性</td>
</tr>
<tr>
<td>Vue.directive</td>
<td>注册或获取全局指令</td>
</tr>
<tr>
<td>Vue.filter</td>
<td>注册或获取全局过滤器</td>
</tr>
<tr>
<td>Vue.component</td>
<td>注册或获取全局组件</td>
</tr>
<tr>
<td>Vue.use</td>
<td>安装 Vue.js 插件</td>
</tr>
<tr>
<td>Vue.mixin</td>
<td>全局注册一个混入</td>
</tr>
<tr>
<td>Vue.compile</td>
<td>在 render 函数中编译模板字符串。<strong>只在独立构建时有效</strong></td>
</tr>
<tr>
<td>Vue.version</td>
<td>提供字符串形式的 Vue 安装版本号</td>
</tr>
</tbody>
</table>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>Vue 实例的数据对象</td>
</tr>
<tr>
<td>props</td>
<td>用于接收来自父组件的数据</td>
</tr>
<tr>
<td>propsData</td>
<td>创建实例时传递 props。主要作用是方便测试。</td>
</tr>
<tr>
<td>computed</td>
<td>计算属性将被混入到 Vue 实例中</td>
</tr>
<tr>
<td>methods</td>
<td>methods 将被混入到 Vue 实例中</td>
</tr>
<tr>
<td>watch</td>
<td>一个对象，键是需要观察的表达式，值是对应回调函数</td>
</tr>
</tbody>
</table>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>el</td>
<td>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标</td>
</tr>
<tr>
<td>render</td>
<td>一个字符串模板作为 Vue 实例的标识使用</td>
</tr>
<tr>
<td>renderError</td>
<td>当 <code>render</code> 函数遭遇错误时，提供另外一种渲染输出</td>
</tr>
</tbody>
</table>
<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>beforeCreate</td>
<td>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</td>
</tr>
<tr>
<td>created</td>
<td>在实例创建完成后被立即调用。</td>
</tr>
<tr>
<td>beforeMount</td>
<td>在挂载开始之前被调用</td>
</tr>
<tr>
<td>mounted</td>
<td><code>el</code> 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。</td>
</tr>
<tr>
<td>beforeUpdate</td>
<td>数据更新时调用，发生在虚拟 DOM 打补丁之前。</td>
</tr>
<tr>
<td>updated</td>
<td>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</td>
</tr>
<tr>
<td>beforeDestroy</td>
<td>实例销毁之前调用。在这一步，实例仍然完全可用。</td>
</tr>
<tr>
<td>destroyed</td>
<td>Vue 实例销毁后调用。</td>
</tr>
<tr>
<td>activated</td>
<td>keep-alive 组件激活时调用。</td>
</tr>
<tr>
<td>deactivated</td>
<td>keep-alive 组件停用时调用。</td>
</tr>
</tbody>
</table>
<p><img src="/2018/06/07/vue基础/lifecycle.png" width="50%" height="50%"></p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>directives</td>
<td>包含 Vue 实例可用指令的哈希表。</td>
</tr>
<tr>
<td>filters</td>
<td>包含 Vue 实例可用过滤器的哈希表。</td>
</tr>
<tr>
<td>components</td>
<td>包含 Vue 实例可用组件的哈希表。</td>
</tr>
</tbody>
</table>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>parent</td>
<td>指定已创建的实例之父实例，在两者之间建立父子关系</td>
</tr>
<tr>
<td>mixins</td>
<td>选项接受一个混入对象的数组。</td>
</tr>
<tr>
<td>extends</td>
<td>允许声明扩展另一个组件</td>
</tr>
<tr>
<td>provide / inject</td>
<td>提供/注入 主要为高阶插件/组件库提供用例</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack使用场景总结</title>
    <url>/2018/03/14/webpack%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="webpack使用总结"><a href="#webpack使用总结" class="headerlink" title="webpack使用总结"></a>webpack使用总结</h1><p>webpack 有四个<strong>核心概念</strong></p>
<ul>
<li>入口(entry)</li>
<li>输出(output)</li>
<li>loader</li>
<li>插件(plugins)</li>
</ul>
<p>下面主要讲解常见应用场景的配置</p>
<h2 id="使用webpack方式"><a href="#使用webpack方式" class="headerlink" title="使用webpack方式"></a>使用webpack方式</h2><ol>
<li>webpack命令</li>
<li>webpack配置</li>
<li>第三方脚手架</li>
</ol>
<h2 id="编译-ES6"><a href="#编译-ES6" class="headerlink" title="编译 ES6"></a>编译 ES6</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>  “babel-core”: “^6.26.0”<br>  “babel-loader”: “^7.1.4”<br>  “babel-preset-env”: “^1.6.1”</p>
<h3 id="函数和方法"><a href="#函数和方法" class="headerlink" title="函数和方法"></a>函数和方法</h3><ul>
<li>Babel Polyfill</li>
</ul>
<p>全局垫片 为应用准备</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-polyfill --save</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Babel Runtime Transform</li>
</ul>
<p>局部垫片 为开发框架准备</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install babel-plugin-transform-runtime --save-dev</span><br><span class="line">npm install babel-runtime --save</span><br></pre></td></tr></table></figure>
<p>在 .babelrc中配置<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [<span class="string">"@babel/preset-env"</span>, &#123;</span><br><span class="line">      <span class="attr">"targets"</span>: &#123;</span><br><span class="line">        <span class="attr">"borwsers"</span>: [<span class="string">"&gt; 1%"</span>, <span class="string">"last 2 versions"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span> :[<span class="string">"@babel/transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="编译-Typescript"><a href="#编译-Typescript" class="headerlink" title="编译 Typescript"></a>编译 Typescript</h2><p>typesript-loader</p>
<ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i typescipt ts-loader  --save-dev</span><br><span class="line">// 或者</span><br><span class="line">npm i typescipt awesome-typescript-loader  --save-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsconfig.json</span><br><span class="line">webpack.config.js</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol>
<li><p>webpack3</p>
<p><a href="https://doc.webpack-china.org/plugins/commons-chunk-plugin/" target="_blank" rel="noopener">链接地址</a></p>
</li>
<li><p>webpack4</p>
<p>webpack 4 移除 <code>CommonsChunkPlugin</code>，取而代之的是两个新的配置项（optimization.splitChunks 和 optimization.runtimeChunk）</p>
<p>默认模式是经过千挑万选的，可以用于满足最佳web性能的策略。</p>
<p><a href="http://blog.csdn.net/songluyi/article/details/79419118" target="_blank" rel="noopener">没有了CommonsChunkPlugin，咱拿什么来分包</a></p>
<p><a href="https://github.com/dt-fe/weekly/blob/master/47.%E7%B2%BE%E8%AF%BB%E3%80%8Awebpack4.0%20%E5%8D%87%E7%BA%A7%E6%8C%87%E5%8D%97%E3%80%8B.md" target="_blank" rel="noopener">精读《webpack4.0 升级指南》</a></p>
</li>
</ol>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul>
<li>单页应用</li>
<li>单页应用 + 第三方依赖</li>
<li>多页应用 + 第三方依赖 + webpack生成代码</li>
</ul>
<h2 id="代码分割-和-懒加载"><a href="#代码分割-和-懒加载" class="headerlink" title="代码分割 和 懒加载"></a>代码分割 和 懒加载</h2><h3 id="webpack-methods-（webpack内置方法）"><a href="#webpack-methods-（webpack内置方法）" class="headerlink" title="webpack methods （webpack内置方法）"></a>webpack methods （webpack内置方法）</h3><p>require.ensure</p>
<p>require.include</p>
<h3 id="ES-2015-Loader-spec-（2015-loader-规范）"><a href="#ES-2015-Loader-spec-（2015-loader-规范）" class="headerlink" title="ES 2015 Loader spec （2015 loader 规范）"></a>ES 2015 Loader spec （2015 loader 规范）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>()</span><br></pre></td></tr></table></figure>
<h2 id="处理CSS-style-loader"><a href="#处理CSS-style-loader" class="headerlink" title="处理CSS style-loader"></a>处理CSS style-loader</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h4><ol>
<li>style-loader</li>
<li>style-loader/url</li>
<li>style-loader/useable</li>
</ol>
<p>Style-loader 可以使得我们把css 通过style 标签引入到我们的html 中去</p>
<p>Style-loader/url 可以让我们把css 通过 link 标签引入到我们的 html 中去</p>
<h4 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h4><p>options</p>
<table>
<thead>
<tr>
<th style="text-align:left">配置选项</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">alias</td>
<td style="text-align:left">解析的别名</td>
</tr>
<tr>
<td style="text-align:left">importLoader</td>
<td style="text-align:left">@import</td>
</tr>
<tr>
<td style="text-align:left">Minimize</td>
<td style="text-align:left">是否压缩</td>
</tr>
<tr>
<td style="text-align:left">modules</td>
<td style="text-align:left">启用css-modules</td>
</tr>
</tbody>
</table>
<p>如果设置了 root 查询参数，那么此查询参数将被添加到 URL 前面，然后再进行转译。<br>要禁用 css-loader 解析 url()，将选项设置为 false。</p>
<h3 id="CSS-modules"><a href="#CSS-modules" class="headerlink" title="CSS modules"></a>CSS modules</h3><ol>
<li>:local</li>
<li>:global</li>
<li>compose</li>
<li>compose … from path</li>
</ol>
<p><code>localIdentName: &#39;[path][name]__[local]--[hash:base64:5]&#39;</code></p>
<h3 id="配置-less-sass"><a href="#配置-less-sass" class="headerlink" title="配置 less / sass"></a>配置 less / sass</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install less-loader less  --save-dev</span><br><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure>
<h3 id="提取-CSS-代码"><a href="#提取-CSS-代码" class="headerlink" title="提取 CSS 代码"></a>提取 CSS 代码</h3><ol>
<li>extract-loader</li>
<li>ExtractTextWebpackPlugin</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// webpack3</span><br><span class="line">npm install extract-text-webpack-plugin --save-dev</span><br><span class="line"></span><br><span class="line">// webpack4</span><br><span class="line">npm install extract-text-webpack-plugin@next --save-dev</span><br></pre></td></tr></table></figure>
<h2 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h2><p>转换css</p>
<h3 id="Autoprefixer"><a href="#Autoprefixer" class="headerlink" title="Autoprefixer"></a>Autoprefixer</h3><h3 id="CSS-nano"><a href="#CSS-nano" class="headerlink" title="CSS-nano"></a>CSS-nano</h3><h3 id="CSS-next"><a href="#CSS-next" class="headerlink" title="CSS-next"></a>CSS-next</h3><h2 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h2><h3 id="JS-Tree-Shaking"><a href="#JS-Tree-Shaking" class="headerlink" title="JS Tree Shaking"></a>JS Tree Shaking</h3><h3 id="CSS-Tree-Shaking"><a href="#CSS-Tree-Shaking" class="headerlink" title="CSS Tree Shaking"></a>CSS Tree Shaking</h3><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><h3 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h3><ol>
<li>css中引入的图片</li>
<li>自动合成雪碧图</li>
<li>压缩图片</li>
<li>base64 编码</li>
</ol>
<p>file-loader(引入图片)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              publishPath: <span class="string">''</span>,</span><br><span class="line">              outputPath: <span class="string">''</span>,</span><br><span class="line">              useRelativePath: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>url-loader(base64 编码)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'url-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">5000</span>,</span><br><span class="line">              publishPath: <span class="string">''</span>,</span><br><span class="line">              outputPath: <span class="string">''</span>,</span><br><span class="line">              useRelativePath: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>img-loader(压缩图片)<br><a href="https://www.npmjs.com/package/img-loader" target="_blank" rel="noopener">链接地址</a></p>
<p>img-loader 是一个插件的集合，查看配置选项要到相应的插件中去看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  loader: <span class="string">'url-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    pngquant: <span class="number">80</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>postcss-sprites(合成雪碧图)<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    ident: <span class="string">'postcss'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">        spritePath: <span class="string">'dist/assets/imgs/sprites'</span>,</span><br><span class="line">        retina: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="字体文件"><a href="#字体文件" class="headerlink" title="字体文件"></a>字体文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.(eot|woff2?|ttf|svg)/</span></span><br><span class="line">  user: <span class="string">'url-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    limit: <span class="number">5000</span>,</span><br><span class="line">    publishPath: <span class="string">''</span>,</span><br><span class="line">    outputPath: <span class="string">''</span>,</span><br><span class="line">    useRelativePath: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三方js库"><a href="#第三方js库" class="headerlink" title="第三方js库"></a>第三方js库</h3><p>webpack.ProvidePlugin<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">    jquery$: <span class="string">'jquery'</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地文件</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">    jquery$: path.resolve(__dirname, <span class="string">'src/libs/jquery.min.js'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>import-loader<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: path.resolve(__dirname, <span class="string">'src/app.js'</span>)</span><br><span class="line">  user: <span class="string">'imports-loader'</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    jquery$: <span class="string">'jquery'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>window</p>
<h2 id="生成-html"><a href="#生成-html" class="headerlink" title="生成 html"></a>生成 html</h2><p><a href="https://doc.webpack-china.org/plugins/html-webpack-plugin" target="_blank" rel="noopener">链接</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>构建工具</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode常用快捷键</title>
    <url>/2019/01/08/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<blockquote>
<p>原文链接: <a href="https://segmentfault.com/a/1190000007688656" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007688656</a></p>
<p>英文pdf: <a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf" target="_blank" rel="noopener">https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf</a></p>
</blockquote>
<h2 id="常用-General"><a href="#常用-General" class="headerlink" title="常用 General"></a>常用 General</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + Shift + P，F1</td>
<td>显示命令面板 Show Command Palette</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>快速打开 Quick Open</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>新窗口/实例 New window/instance</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>关闭窗口/实例 Close window/instance</td>
</tr>
</tbody>
</table>
<h2 id="基础编辑-Basic-editing"><a href="#基础编辑-Basic-editing" class="headerlink" title="基础编辑 Basic editing"></a>基础编辑 Basic editing</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+X</td>
<td>剪切行（空选定） Cut line (empty selection)</td>
</tr>
<tr>
<td>Ctrl+C</td>
<td>复制行（空选定）Copy line (empty selection)</td>
</tr>
<tr>
<td>Alt+ ↑ / ↓</td>
<td>向上/向下移动行 Move line up/down</td>
</tr>
<tr>
<td>Shift+Alt + ↓ / ↑</td>
<td>向上/向下复制行 Copy line up/down</td>
</tr>
<tr>
<td>Ctrl+Shift+K</td>
<td>删除行 Delete line</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>在下面插入行 Insert line below</td>
</tr>
<tr>
<td>Ctrl+Shift+Enter</td>
<td>在上面插入行 Insert line above</td>
</tr>
<tr>
<td>Ctrl+Shift+\</td>
<td>跳到匹配的括号 Jump to matching bracket</td>
</tr>
<tr>
<td>Ctrl+] / [</td>
<td>缩进/缩进行 Indent/outdent line</td>
</tr>
<tr>
<td>Home</td>
<td>转到行首 Go to beginning of line</td>
</tr>
<tr>
<td>End</td>
<td>转到行尾 Go to end of line</td>
</tr>
<tr>
<td>Ctrl+Home</td>
<td>转到文件开头 Go to beginning of file</td>
</tr>
<tr>
<td>Ctrl+End</td>
<td>转到文件末尾 Go to end of file</td>
</tr>
<tr>
<td>Ctrl+↑ / ↓</td>
<td>向上/向下滚动行 Scroll line up/down</td>
</tr>
<tr>
<td>Alt+PgUp / PgDown</td>
<td>向上/向下滚动页面 Scroll page up/down</td>
</tr>
<tr>
<td>Ctrl+Shift+[</td>
<td>折叠（折叠）区域 Fold (collapse) region</td>
</tr>
<tr>
<td>Ctrl+Shift+]</td>
<td>展开（未折叠）区域 Unfold (uncollapse) region</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+[</td>
<td>折叠（未折叠）所有子区域 Fold (collapse) all subregions</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+]</td>
<td>展开（未折叠）所有子区域 Unfold (uncollapse) all subregions</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+0</td>
<td>折叠（折叠）所有区域 Fold (collapse) all regions</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+J</td>
<td>展开（未折叠）所有区域 Unfold (uncollapse) all regions</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+C</td>
<td>添加行注释 Add line comment</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+U</td>
<td>删除行注释 Remove line comment</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>切换行注释 Toggle line comment</td>
</tr>
<tr>
<td>Shift+Alt+A</td>
<td>切换块注释 Toggle block comment</td>
</tr>
<tr>
<td>Alt+Z</td>
<td>切换换行 Toggle word wrap</td>
</tr>
</tbody>
</table>
<h2 id="导航-Navigation"><a href="#导航-Navigation" class="headerlink" title="导航 Navigation"></a>导航 Navigation</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + T</td>
<td>显示所有符号 Show all Symbols</td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>转到行… Go to Line…</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>转到文件… Go to File…</td>
</tr>
<tr>
<td>Ctrl + Shift + O</td>
<td>转到符号… Go to Symbol…</td>
</tr>
<tr>
<td>Ctrl + Shift + M</td>
<td>显示问题面板 Show Problems panel</td>
</tr>
<tr>
<td>F8</td>
<td>转到下一个错误或警告 Go to next error or warning</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>转到上一个错误或警告 Go to previous error or warning</td>
</tr>
<tr>
<td>Ctrl + Shift + Tab</td>
<td>导航编辑器组历史记录 Navigate editor group history</td>
</tr>
<tr>
<td>Alt + ←/→</td>
<td>返回/前进 Go back / forward</td>
</tr>
<tr>
<td>Ctrl + M</td>
<td>切换选项卡移动焦点 Toggle Tab moves focus</td>
</tr>
</tbody>
</table>
<h2 id="搜索和替换-Search-and-replace"><a href="#搜索和替换-Search-and-replace" class="headerlink" title="搜索和替换 Search and replace"></a>搜索和替换 Search and replace</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + F</td>
<td>查找 Find</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>替换 Replace</td>
</tr>
<tr>
<td>F3 / Shift + F3</td>
<td>查找下一个/上一个 Find next/previous</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>选择查找匹配的所有出现 Select all occurences of Find match</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>将选择添加到下一个查找匹配 Add selection to next Find match</td>
</tr>
<tr>
<td>Ctrl + K Ctrl + D</td>
<td>将最后一个选择移至下一个查找匹配项 Move last selection to next Find match</td>
</tr>
<tr>
<td>Alt + C / R / W</td>
<td>切换区分大小写/正则表达式/整个词 Toggle case-sensitive / regex / whole word</td>
</tr>
</tbody>
</table>
<h2 id="多光标和选择-Multi-cursor-and-selection"><a href="#多光标和选择-Multi-cursor-and-selection" class="headerlink" title="多光标和选择 Multi-cursor and selection"></a>多光标和选择 Multi-cursor and selection</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt +单击</td>
<td>插入光标 Insert cursor</td>
</tr>
<tr>
<td>Ctrl + Alt +↑/↓</td>
<td>在上/下插入光标 Insert cursor above / below</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>撤消上一个光标操作 Undo last cursor operation</td>
</tr>
<tr>
<td>Shift + Alt + I</td>
<td>在选定的每一行的末尾插入光标 Insert cursor at end of each line selected</td>
</tr>
<tr>
<td>Ctrl + I</td>
<td>选择当前行 Select current line</td>
</tr>
<tr>
<td>Ctrl + Shift + L</td>
<td>选择当前选择的所有出现 Select all occurrences of current selection</td>
</tr>
<tr>
<td>Ctrl + F2</td>
<td>选择当前字的所有出现 Select all occurrences of current word</td>
</tr>
<tr>
<td>Shift + Alt + →</td>
<td>展开选择 Expand selection</td>
</tr>
<tr>
<td>Shift + Alt + ←</td>
<td>缩小选择 Shrink selection</td>
</tr>
<tr>
<td>Shift + Alt + （拖动鼠标）</td>
<td>列（框）选择 Column (box) selection</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt +（箭头键）</td>
<td>列（框）选择 Column (box) selection</td>
</tr>
<tr>
<td>Ctrl + Shift + Alt + PgUp / PgDown</td>
<td>列（框）选择页上/下 Column (box) selection page up/down</td>
</tr>
</tbody>
</table>
<h2 id="丰富的语言编辑-Rich-languages-editing"><a href="#丰富的语言编辑-Rich-languages-editing" class="headerlink" title="丰富的语言编辑 Rich languages editing"></a>丰富的语言编辑 Rich languages editing</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + 空格</td>
<td>触发建议 Trigger suggestion</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>触发器参数提示 Trigger parameter hints</td>
</tr>
<tr>
<td>Tab</td>
<td>Emmet 展开缩写 Emmet expand abbreviation</td>
</tr>
<tr>
<td>Shift + Alt + F</td>
<td>格式化文档 Format document</td>
</tr>
<tr>
<td>Ctrl + K Ctrl + F</td>
<td>格式选定区域 Format selection</td>
</tr>
<tr>
<td>F12</td>
<td>转到定义 Go to Definition</td>
</tr>
<tr>
<td>Alt + F12</td>
<td>Peek 定义 Peek Definition</td>
</tr>
<tr>
<td>Ctrl + K F12</td>
<td>打开定义到边 Open Definition to the side</td>
</tr>
<tr>
<td>Ctrl + .</td>
<td>快速解决 Quick Fix</td>
</tr>
<tr>
<td>Shift + F12</td>
<td>显示引用 Show References</td>
</tr>
<tr>
<td>F2</td>
<td>重命名符号 Rename Symbol</td>
</tr>
<tr>
<td>Ctrl + K Ctrl + X</td>
<td>修剪尾随空格 Trim trailing whitespace</td>
</tr>
<tr>
<td>Ctrl + K M</td>
<td>更改文件语言 Change file language</td>
</tr>
</tbody>
</table>
<h2 id="编辑器管理-Editor-management"><a href="#编辑器管理-Editor-management" class="headerlink" title="编辑器管理 Editor management"></a>编辑器管理 Editor management</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+F4, Ctrl+W</td>
<td>关闭编辑器 Close editor</td>
</tr>
<tr>
<td>Ctrl+K F</td>
<td>关闭文件夹 Close folder</td>
</tr>
<tr>
<td>Ctrl+\</td>
<td>拆分编辑器 Split editor</td>
</tr>
<tr>
<td>Ctrl+ 1 / 2 / 3</td>
<td>聚焦到第 1，第 2 或第 3 编辑器组 Focus into 1st, 2nd or 3rd editor group</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+ ←/→</td>
<td>聚焦到上一个/下一个编辑器组 Focus into previous/next editor group</td>
</tr>
<tr>
<td>Ctrl+Shift+PgUp / PgDown</td>
<td>向左/向右移动编辑器 Move editor left/right</td>
</tr>
<tr>
<td>Ctrl+K ← / →</td>
<td>移动活动编辑器组 Move active editor group</td>
</tr>
</tbody>
</table>
<h2 id="文件管理-File-management"><a href="#文件管理-File-management" class="headerlink" title="文件管理 File management"></a>文件管理 File management</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+N</td>
<td>新文件 New File</td>
</tr>
<tr>
<td>Ctrl+O</td>
<td>打开文件… Open File…</td>
</tr>
<tr>
<td>Ctrl+S</td>
<td>保存 Save</td>
</tr>
<tr>
<td>Ctrl+Shift+S</td>
<td>另存为… Save As…</td>
</tr>
<tr>
<td>Ctrl+K S</td>
<td>全部保存 Save All</td>
</tr>
<tr>
<td>Ctrl+F4</td>
<td>关闭 Close</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+W</td>
<td>关闭所有 Close All</td>
</tr>
<tr>
<td>Ctrl+Shift+T</td>
<td>重新打开关闭的编辑器 Reopen closed editor</td>
</tr>
<tr>
<td>Ctrl+K</td>
<td>输入保持打开 Enter Keep Open</td>
</tr>
<tr>
<td>Ctrl+Tab</td>
<td>打开下一个 Open next</td>
</tr>
<tr>
<td>Ctrl+Shift+Tab</td>
<td>打开上一个 Open previous</td>
</tr>
<tr>
<td>Ctrl+K P</td>
<td>复制活动文件的路径 Copy path of active file</td>
</tr>
<tr>
<td>Ctrl+K R</td>
<td>显示资源管理器中的活动文件 Reveal active file in Explorer</td>
</tr>
<tr>
<td>Ctrl+K O</td>
<td>显示新窗口/实例中的活动文件 Show active file in new window/instance</td>
</tr>
</tbody>
</table>
<h2 id="显示-Display"><a href="#显示-Display" class="headerlink" title="显示 Display"></a>显示 Display</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>F11</td>
<td>切换全屏 Toggle full screen</td>
</tr>
<tr>
<td>Shift+Alt+1</td>
<td>切换编辑器布局 Toggle editor layout</td>
</tr>
<tr>
<td>Ctrl+ = / -</td>
<td>放大/缩小 Zoom in/out</td>
</tr>
<tr>
<td>Ctrl+B</td>
<td>切换侧栏可见性 Toggle Sidebar visibility</td>
</tr>
<tr>
<td>Ctrl+Shift+E</td>
<td>显示浏览器/切换焦点 Show Explorer / Toggle focus</td>
</tr>
<tr>
<td>Ctrl+Shift+F</td>
<td>显示搜索 Show Search</td>
</tr>
<tr>
<td>Ctrl+Shift+G</td>
<td>显示 Git Show Git</td>
</tr>
<tr>
<td>Ctrl+Shift+D</td>
<td>显示调试 Show Debug</td>
</tr>
<tr>
<td>Ctrl+Shift+X</td>
<td>显示扩展 Show Extensions</td>
</tr>
<tr>
<td>Ctrl+Shift+H</td>
<td>替换文件 Replace in files</td>
</tr>
<tr>
<td>Ctrl+Shift+J</td>
<td>切换搜索详细信息 Toggle Search details</td>
</tr>
<tr>
<td>Ctrl+Shift+C</td>
<td>打开新命令提示符/终端 Open new command prompt/terminal</td>
</tr>
<tr>
<td>Ctrl+Shift+U</td>
<td>显示输出面板 Show Output panel</td>
</tr>
<tr>
<td>Ctrl+Shift+V</td>
<td>切换 Markdown 预览 Toggle Markdown preview</td>
</tr>
<tr>
<td>Ctrl+K V</td>
<td>从旁边打开 Markdown 预览 Open Markdown preview to the side</td>
</tr>
</tbody>
</table>
<h2 id="调试-Debug"><a href="#调试-Debug" class="headerlink" title="调试 Debug"></a>调试 Debug</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>F9</td>
<td>切换断点 Toggle breakpoint</td>
</tr>
<tr>
<td>F5</td>
<td>开始/继续 Start/Continue</td>
</tr>
<tr>
<td>Shift+F5</td>
<td>停止 Stop</td>
</tr>
<tr>
<td>F11 / Shift+F11</td>
<td>下一步/上一步 Step into/out</td>
</tr>
<tr>
<td>F10</td>
<td>跳过 Step over</td>
</tr>
<tr>
<td>Ctrl+K Ctrl+I</td>
<td>显示悬停 Show hover</td>
</tr>
</tbody>
</table>
<h2 id="集成终端-Integrated-terminal"><a href="#集成终端-Integrated-terminal" class="headerlink" title="集成终端 Integrated terminal"></a>集成终端 Integrated terminal</h2><table>
<thead>
<tr>
<th>按 Press</th>
<th>功能 Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+`</td>
<td>显示集成终端 Show integrated terminal</td>
</tr>
<tr>
<td>Ctrl+Shift+`</td>
<td>创建新终端 Create new terminal</td>
</tr>
<tr>
<td>Ctrl+Shift+C</td>
<td>复制选定 Copy selection</td>
</tr>
<tr>
<td>Ctrl+Shift+V</td>
<td>粘贴到活动端子 Paste into active terminal</td>
</tr>
<tr>
<td>Ctrl+↑ / ↓</td>
<td>向上/向下滚动 Scroll up/down</td>
</tr>
<tr>
<td>Shift+PgUp / PgDown</td>
<td>向上/向下滚动页面 Scroll page up/down</td>
</tr>
<tr>
<td>Ctrl+Home / End</td>
<td>滚动到顶部/底部 Scroll to top/bottom</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>判断是否应该写成一个组件的条件</title>
    <url>/2018/01/30/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%BA%94%E8%AF%A5%E5%86%99%E6%88%90%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84%E6%9D%A1%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="判断是否应该写成一个组件的条件"><a href="#判断是否应该写成一个组件的条件" class="headerlink" title="判断是否应该写成一个组件的条件"></a>判断是否应该写成一个组件的条件</h1><p>判断是否应该写成一个组件还是两个组件要看几个方面：</p>
<ol>
<li>看内容，如果内容相同，那么最好是写成一个组件，再通过状态控制不同的展现方式</li>
<li>复杂度，如果要让一个组件兼顾多种展现情况，而过度重构，那就得不偿失了，复杂度是构建组件的一个指标</li>
<li>重用度，如果一个组件仅仅使用一次，那么是否抽组件就不是first level thing，如果重用度非常的高，那么就需要优先考虑这个问题了</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack环境配置</title>
    <url>/2018/03/26/webpack%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="webpack-环境配置"><a href="#webpack-环境配置" class="headerlink" title="webpack 环境配置"></a>webpack 环境配置</h1><p>搭建开发环境主要有三种</p>
<ol>
<li>webpack watch mode</li>
<li>webpack-dev-server</li>
<li>express + webpack-dev-middleware（更灵活，但是需要更多配置）</li>
</ol>
<h2 id="webpack-watch-mode"><a href="#webpack-watch-mode" class="headerlink" title="webpack watch mode"></a>webpack watch mode</h2><p>清除打包内容</p>
<p>clean-webpack-plugin</p>
<h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack dev server"></a>webpack dev server</h2><ol>
<li>live reloading（自动刷新浏览器）</li>
<li>不能打包文件</li>
<li>路径重定向</li>
<li>https</li>
<li>浏览器中显示编译错误</li>
<li>接口代理</li>
<li>模块热更新</li>
</ol>
<p>devServer<br>  inline<br>  contentBase<br>  port<br>  historyApiFallback<br>  https<br>  proxy<br>  hot<br>  openpage<br>  lazy<br>  overlay</p>
<p>historyApiFallback</p>
<p>对于单页面程序，浏览器的brower histroy可以设置成html5 history api或者hash，而设置为html5 api的，如果刷新浏览器会出现404 not found，原因是它通过这个路径（比如： /activities/2/ques/2）来访问后台，所以会出现404，而把historyApiFallback设置为true那么所有的路径都执行index.html</p>
<h2 id="代理远程接口"><a href="#代理远程接口" class="headerlink" title="代理远程接口"></a>代理远程接口</h2><p>proxy</p>
<p>代理远程接口请求</p>
<p>使用的是 http-proxy-middleware</p>
<p>options</p>
<table>
<thead>
<tr>
<th style="text-align:left">配置选项</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">target</td>
<td style="text-align:left">代理地址</td>
</tr>
<tr>
<td style="text-align:left">changeOrigin</td>
<td style="text-align:left">改变你的源到这个url</td>
</tr>
<tr>
<td style="text-align:left">headers</td>
<td style="text-align:left">http请求头</td>
</tr>
<tr>
<td style="text-align:left">logLevel</td>
<td style="text-align:left">调试用的</td>
</tr>
<tr>
<td style="text-align:left">pathRewrite</td>
<td style="text-align:left">重定向接口请求</td>
</tr>
</tbody>
</table>
<h2 id="模块热更新"><a href="#模块热更新" class="headerlink" title="模块热更新"></a>模块热更新</h2><p>Module Hot Reloading</p>
<ul>
<li>保持应用的数据状态</li>
<li>节省调试时间</li>
<li>样式调试更快</li>
</ul>
<p>如何设置</p>
<ul>
<li>devServer.hot</li>
<li>webpack.HotModuleReplacementPlugin</li>
<li>webpack.NamedModulesPlugin(查看模块的相对路径)</li>
</ul>
<p>热门框架都有相应的热更新loader</p>
<h2 id="开启调试-SourceMap"><a href="#开启调试-SourceMap" class="headerlink" title="开启调试 SourceMap"></a>开启调试 SourceMap</h2><h2 id="设置-ESLink-检查代码格式"><a href="#设置-ESLink-检查代码格式" class="headerlink" title="设置 ESLink 检查代码格式"></a>设置 ESLink 检查代码格式</h2><h2 id="区分开发环境-和-生产环境"><a href="#区分开发环境-和-生产环境" class="headerlink" title="区分开发环境 和 生产环境"></a>区分开发环境 和 生产环境</h2><ul>
<li>开发环境<ul>
<li>模块热更新</li>
<li>sourceMap</li>
<li>接口代理</li>
<li>代码规范检查</li>
</ul>
</li>
<li>生产环境<ul>
<li>提取公共代码</li>
<li>压缩混淆</li>
<li>文件压缩 或是 Base64 编码</li>
<li>去除无用的代码</li>
</ul>
</li>
</ul>
<p>共同点</p>
<ul>
<li>同样的入口哦</li>
<li>同样的代码处理（loader处理）</li>
<li>同样的解析配置</li>
</ul>
<p>如何做<br>webpack-merge<br>webpack.dev.conf.js<br>webpack.prod.conf.js<br>webpack.common.conf.js</p>
<h2 id="使用-middleware-来搭建开发环境"><a href="#使用-middleware-来搭建开发环境" class="headerlink" title="使用 middleware 来搭建开发环境"></a>使用 middleware 来搭建开发环境</h2><p>更灵活</p>
]]></content>
      <tags>
        <tag>webpack</tag>
        <tag>构建工具</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack常见面试题</title>
    <url>/2018/06/08/webpack%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<h2 id="面试类型"><a href="#面试类型" class="headerlink" title="面试类型"></a>面试类型</h2><ul>
<li>概念</li>
<li>配置</li>
<li>开发</li>
<li>优化</li>
</ul>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="什么是-webpack，它和-grunt-glup-有什么不同？"><a href="#什么是-webpack，它和-grunt-glup-有什么不同？" class="headerlink" title="什么是 webpack，它和 grunt/glup 有什么不同？"></a>什么是 webpack，它和 grunt/glup 有什么不同？</h3><p>webpack 是一个模块打包器，它可以递归的打包项目中的所有模块，最终生成几个打包后的文件。它和其它工具最大的不同在于它支持 code-splitting、模块化（AMD，ESM，CommonJS）、全局分析。</p>
<p>grunt/glup 是自动化构建工具，是做任务管理的。两者区别：glup是基于流做任务管理的。相对来说 glup api 更少，使用更简单。</p>
<h3 id="什么是-bundle，什么是-chunk，什么是-module？"><a href="#什么是-bundle，什么是-chunk，什么是-module？" class="headerlink" title="什么是 bundle，什么是 chunk，什么是 module？"></a>什么是 bundle，什么是 chunk，什么是 module？</h3><p>bundle 是webpack 打包出来的文件，chunk 是指 webpack 在进行模块的依赖分析的时候，代码分割出来的代码块，module 是开发过程中的单个模块。</p>
<h3 id="什么是-Loader？什么是-Plugin？"><a href="#什么是-Loader？什么是-Plugin？" class="headerlink" title="什么是 Loader？什么是 Plugin？"></a>什么是 Loader？什么是 Plugin？</h3><p>Loader 是用来告诉 webpack 如何转化处理某一类的文件，并且引入到打包文件中。</p>
<p>Plugin 是用来自定义 webpack 打包过程的方式，一个插件是含有apply方法的一个对象，通过这个方法可以参与到整个 webpack 打包的各个流程（生命周期）。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="如何可以自动生成-webpack-配置？"><a href="#如何可以自动生成-webpack-配置？" class="headerlink" title="如何可以自动生成 webpack 配置？"></a>如何可以自动生成 webpack 配置？</h3><p>webpack-cli/vue-cli/etc… 脚手架工具</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="webpack-dev-server-和-http-服务器如-nginx-有什么区别？"><a href="#webpack-dev-server-和-http-服务器如-nginx-有什么区别？" class="headerlink" title="webpack-dev-server 和 http 服务器如 nginx 有什么区别？"></a>webpack-dev-server 和 http 服务器如 nginx 有什么区别？</h3><p>webpack-dev-server 使用内存来存储 webpack 开发环境下的打包文件，并且可以使用模块热更新，他比传统的 http 服务对开发更加简单高效。</p>
<p>webpack-dev-server 就是 express + webpack-hot-middleware + 一些配置</p>
<h3 id="什么是模块热更新？"><a href="#什么是模块热更新？" class="headerlink" title="什么是模块热更新？"></a>什么是模块热更新？</h3><p>模块热更新是 webpack 的一个功能，它可以使得代码修改过后不用刷新浏览器就可以更新，是高级版的自动刷新浏览器。</p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="什么是长缓存？在-webpack-中如何做到长缓存优化？"><a href="#什么是长缓存？在-webpack-中如何做到长缓存优化？" class="headerlink" title="什么是长缓存？在 webpack 中如何做到长缓存优化？"></a>什么是长缓存？在 webpack 中如何做到长缓存优化？</h3><p>浏览器在用户访问页面的时候，为了加快加载速度，会对用户访问的静态资源进行存储，但每一次代码升级或是更新，都需要浏览器去下载新的代码，最方便和简单的更新方式就是引入新的文件名称。</p>
<p>在 webpack 中可以在 output 给输出的文件指定 chunkhash，并且分离经常更新的代码和框架代码。通过 NamedModulesPlugin 或是 HashedModuleIdsPlugin 使再次打包文件名不变。</p>
<h3 id="什么是-Tree-shaking？CSS-可以-Tree-shaking-吗？"><a href="#什么是-Tree-shaking？CSS-可以-Tree-shaking-吗？" class="headerlink" title="什么是 Tree-shaking？CSS 可以 Tree-shaking 吗？"></a>什么是 Tree-shaking？CSS 可以 Tree-shaking 吗？</h3><p>Tree-shaking 是指在打包中去除那些引入了，但是在代码中没有被用到的那些死代码。在 webpack 中 Tree-shaking 是通过 uglifyJSPlugin 来 Tree-shaking JS。CSS 需要使用 Purify-CSS。</p>
<blockquote>
<p>参考链接</p>
<p><a href="https://coding.imooc.com/learn/list/171.html" target="_blank" rel="noopener">四大维度解锁 Webpack 3.0 前端工程化</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>-webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>vuePress vue驱动的静态站点生成工具</title>
    <url>/2018/04/25/vuePress-vue%E9%A9%B1%E5%8A%A8%E7%9A%84%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="vuePress-vue驱动的静态站点生成工具"><a href="#vuePress-vue驱动的静态站点生成工具" class="headerlink" title="vuePress vue驱动的静态站点生成工具"></a>vuePress vue驱动的静态站点生成工具</h1><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">yarn global add vuepress <span class="comment"># 或 npm install -g vuepress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 markdown 文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'# Hello VuePress'</span> &gt; README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始编写文档</span></span><br><span class="line">vuepress dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">vuepress build</span><br></pre></td></tr></table></figure>
<h3 id="在已有项目中安装"><a href="#在已有项目中安装" class="headerlink" title="在已有项目中安装"></a>在已有项目中安装</h3><p>如果你想要在一个已有项目中维护文档，就应该将 VuePress 安装为本地依赖。此设置还允许你使用 CI 或 Netlify 服务，在推送时自动部署。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装为本地依赖项</span></span><br><span class="line">yarn add -D vuepress <span class="comment"># 或 npm install -D vuepress</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 docs 目录</span></span><br><span class="line">mkdir docs</span><br><span class="line"><span class="comment"># 创建一个 markdown 文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'# Hello VuePress'</span> &gt; docs/README.md</span><br></pre></td></tr></table></figure>
<p>然后，给 package.json 添加一些 scripts 脚本：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"docs:dev"</span>: <span class="string">"vuepress dev docs"</span>,</span><br><span class="line">    <span class="attr">"docs:build"</span>: <span class="string">"vuepress build docs"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="主页-Homepage"><a href="#主页-Homepage" class="headerlink" title="主页(Homepage)"></a>主页(Homepage)</h2><p>默认主题提供了一个主页布局（用于<a href="/">该网站的主页</a>）。要使用它，需要在你的根目录 <code>README.md</code> 的 <a href="../guide/markdown.html#yaml-front-matter">YAML front matter</a> 中指定 <code>home：true</code>，并加上一些其他的元数据。这是本网站使用的实际数据：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">home:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">heroImage:</span> <span class="string">/hero.png</span></span><br><span class="line"><span class="attr">actionText:</span> <span class="string">起步</span> <span class="string">→</span></span><br><span class="line"><span class="attr">actionLink:</span> <span class="string">/guide/</span></span><br><span class="line"><span class="attr">features:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">title:</span> <span class="string">简明优先</span></span><br><span class="line">  <span class="attr">details:</span> <span class="string">对以</span> <span class="string">markdown</span> <span class="string">为中心的项目结构，做最简化的配置，帮助你专注于创作。</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Vue</span> <span class="string">驱动</span></span><br><span class="line">  <span class="attr">details:</span> <span class="string">享用</span> <span class="string">Vue</span> <span class="string">+</span> <span class="string">webpack</span> <span class="string">开发环境，在</span> <span class="string">markdown</span> <span class="string">中使用</span> <span class="string">Vue</span> <span class="string">组件，并通过</span> <span class="string">Vue</span> <span class="string">开发自定义主题。</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">title:</span> <span class="string">性能高效</span></span><br><span class="line">  <span class="attr">details:</span> <span class="string">VuePress</span> <span class="string">将每个页面生成为预渲染的静态</span> <span class="string">HTML，每个页面加载之后，然后作为单页面应用程序(SPA)运行。</span></span><br><span class="line"><span class="attr">footer:</span> <span class="string">MIT</span> <span class="string">Licensed</span> <span class="string">|</span> <span class="string">Copyright</span> <span class="string">©</span> <span class="number">2018</span><span class="string">-present</span> <span class="string">Evan</span> <span class="string">You</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p><code>YAML front matter</code> 的内容之后的其他任意内容，将被解析为正常 markdown，并在 features 部分之后渲染。</p>
<p>如果你想彻底自定义主页的布局，你还可以使用<a href="#custom-layout-for-specific-pages">自定义布局</a></p>
<h2 id="导航链接-navbar-links"><a href="#导航链接-navbar-links" class="headerlink" title="导航链接(navbar links)"></a>导航链接(navbar links)</h2><p>你可以通过 <code>themeConfig.nav</code> 将链接添加到导航栏中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .vuepress/config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  themeConfig: &#123;</span><br><span class="line">    nav: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">'Home'</span>, <span class="attr">link</span>: <span class="string">'/'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">'Guide'</span>, <span class="attr">link</span>: <span class="string">'/guide/'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">'External'</span>, <span class="attr">link</span>: <span class="string">'https://google.com'</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文档链接"><a href="#文档链接" class="headerlink" title="文档链接"></a>文档链接</h2><p><a href="https://vuepress.docschina.org/" target="_blank" rel="noopener">官网</a></p>
<p><a href="https://vuepress.docschina.org/" target="_blank" rel="noopener">中文文档</a></p>
<p><a href="https://github.com/docschina/vuepress" target="_blank" rel="noopener">参考项目</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>文档工具</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试</title>
    <url>/2018/04/23/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="单元测试方法"><a href="#单元测试方法" class="headerlink" title="单元测试方法"></a>单元测试方法</h2><p>TDD<br>测试驱动开发</p>
<p>BDD<br>行为驱动开发</p>
<h2 id="单元测试工具"><a href="#单元测试工具" class="headerlink" title="单元测试工具"></a>单元测试工具</h2><ul>
<li>测试框架</li>
<li>断言库</li>
<li>mock库</li>
<li>test runner</li>
<li>覆盖率工具</li>
</ul>
<h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><ul>
<li>Qunit</li>
<li>jasmine</li>
<li>mocha</li>
<li>intern</li>
</ul>
<h3 id="断言库"><a href="#断言库" class="headerlink" title="断言库"></a>断言库</h3><ul>
<li>chai</li>
<li>should</li>
<li>expect</li>
<li>assert</li>
</ul>
<h3 id="mock库"><a href="#mock库" class="headerlink" title="mock库"></a>mock库</h3><ul>
<li>sinon</li>
</ul>
<h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>测试用例（Test Case）是为某个特殊目标而编制的一组测试输入、执行条件以及预期结果，以便测试某个程序路径或者核实是否满足某个特定需求。</p>
<h3 id="test-runner"><a href="#test-runner" class="headerlink" title="test runner"></a>test runner</h3><p>提供执行环境，管理执行流程</p>
<ul>
<li>Karma</li>
<li>buster.js</li>
</ul>
<h3 id="覆盖率工具"><a href="#覆盖率工具" class="headerlink" title="覆盖率工具"></a>覆盖率工具</h3><ul>
<li>Istanbul</li>
</ul>
<h2 id="前端测试用例分类"><a href="#前端测试用例分类" class="headerlink" title="前端测试用例分类"></a>前端测试用例分类</h2><ul>
<li>数据层</li>
<li>逻辑层</li>
<li>展示层</li>
<li>工具类 </li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>在Android手机上line-height垂直居中出现偏离</title>
    <url>/2018/07/23/%E5%9C%A8Android%E6%89%8B%E6%9C%BA%E4%B8%8Aline-height%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E5%87%BA%E7%8E%B0%E5%81%8F%E7%A6%BB/</url>
    <content><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote>
<p>导致这个问题的本质原因可能是Android在排版计算的时候参考了primyfont字体的相关属性（即HHead Ascent、HHead Descent等），而primyfont的查找是看<code>font-family</code>里哪个字体在fonts.xml里第一个匹配上，而原生Android下中文字体是没有family name的，导致匹配上的始终不是中文字体，所以解决这个问题就要在<code>font-family</code>里显式申明中文，或者通过什么方法保证所有字符都fallback到中文字体。根据这2个思路，目前我找到了2个解决方案：</p>
<ol>
<li>针对Android 7.0+设备：<code>&lt;html&gt;</code>上设置 lang 属性：<code>&lt;html lang=&quot;zh-cmn-Hans&quot;&gt;</code>，同时font-family不指定英文，如 font-family: sans-serif 。这个方法是利用了浏览器的字体fallback机制，让英文也使用中文字体来展示，blink早期的内核在fallback机制上存在问题，Android 7.0+才能ok，早期的内核下会导致英文fallback到Noto Sans Myanmar，这个字体非常丑。</li>
<li>针对MIUI 8.0+设备：设置 font-family: miui 。这个方案就是显式申明中文的方案，MIUI在8.0+上内置了小米兰亭，同时在fonts.xml里给这个字体指定了family name：miui，所以我们可以直接设置。</li>
</ol>
<p>作者：周祺<br>链接：<a href="https://www.zhihu.com/question/39516424/answer/274374076" target="_blank" rel="noopener">https://www.zhihu.com/question/39516424/answer/274374076</a></p>
</blockquote>
<p><img src="/2018/07/23/在Android手机上line-height垂直居中出现偏离/normal.png" alt="normal"></p>
<h2 id="文字明显偏上的情况"><a href="#文字明显偏上的情况" class="headerlink" title="文字明显偏上的情况"></a>文字明显偏上的情况</h2><p>在 Android 设备上文字明显偏上的情况一般有两种:</p>
<ol>
<li>字体小于12px</li>
<li>文字, 行高, 容器高度为奇数</li>
</ol>
<p><img src="/2018/07/23/在Android手机上line-height垂直居中出现偏离/question.png" alt="question"></p>
<h2 id="各个居中方法的对比"><a href="#各个居中方法的对比" class="headerlink" title="各个居中方法的对比"></a>各个居中方法的对比</h2><h3 id="字体小于12px"><a href="#字体小于12px" class="headerlink" title="字体小于12px"></a>字体小于12px</h3><p><img src="/2018/07/23/在Android手机上line-height垂直居中出现偏离/answer1.png" alt="answer1"></p>
<p>结论: 放大缩小法和添加border有效.</p>
<h3 id="文字-行高-容器高度为奇数"><a href="#文字-行高-容器高度为奇数" class="headerlink" title="文字, 行高, 容器高度为奇数"></a>文字, 行高, 容器高度为奇数</h3><p><img src="/2018/07/23/在Android手机上line-height垂直居中出现偏离/answer2.png" alt="answer2"></p>
<p>结论: 修改容器高度, 放大缩小法和添加border有效.</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>小程序云开发初探</title>
    <url>/2019/01/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_blank" rel="noopener">云开发文档</a></p>
<p><a href="https://cloud.tencent.com/developer/edu/courses?cid=10029" target="_blank" rel="noopener">云学院教程</a></p>
</blockquote>
<h2 id="云开发介绍"><a href="#云开发介绍" class="headerlink" title="云开发介绍"></a>云开发介绍</h2><p>传统小程序需要架构完整的小程序请求端来对数据进行处理, 对开发者的运维要求比较高.</p>
<p>云开发为开发者提供完整的云端支持，弱化后端和运维概念，无需搭建服务器，使用平台提供的 API 进行核心业务开发，即可实现快速上线和迭代，同时这一能力，同开发者已经使用的云服务相互兼容，并不互斥。</p>
<p><img src="/2019/01/15/小程序云开发初探/云开发与普通小程序流程对比.png" alt="云开发与普通小程序流程对比"></p>
<h2 id="云开发基本能力"><a href="#云开发基本能力" class="headerlink" title="云开发基本能力"></a>云开发基本能力</h2><ul>
<li>数据库：一个既可在小程序前端操作，也能在云函数中读写的 JSON 数据库</li>
<li>存储：在小程序前端直接上传/下载云端文件，在云开发控制台可视化管理</li>
<li>云函数：在云端运行的代码，微信私有协议天然鉴权，开发者只需编写自身业务逻辑代码</li>
</ul>
<h2 id="云开发流程"><a href="#云开发流程" class="headerlink" title="云开发流程"></a>云开发流程</h2><ol>
<li>点击IDE云开发按钮开通</li>
<li>初始化</li>
<li>开发(调用api,使用云服务)</li>
<li>上传发布</li>
</ol>
<h2 id="云开发项目初始化"><a href="#云开发项目初始化" class="headerlink" title="云开发项目初始化"></a>云开发项目初始化</h2><ul>
<li>cloudfunctionRoot 方法存储云函数</li>
<li>wx.cloud.init 方法初始化函数</li>
<li>env 定义服务默认环境</li>
</ul>
<h3 id="cloudfunctionRoot"><a href="#cloudfunctionRoot" class="headerlink" title="cloudfunctionRoot"></a>cloudfunctionRoot</h3><p><code>project.config.json</code> 中增加了字段 <code>cloudfunctionRoot</code> 用于指定存放云函数的目录</p>
<p>云开发能力从基础库 2.2.3 开始支持, 如果兼容之前的版本, 要在 <code>app.json</code> 中添加 <code>&quot;could&quot;:true</code> 字段</p>
<h3 id="wx-cloud-init"><a href="#wx-cloud-init" class="headerlink" title="wx.cloud.init"></a>wx.cloud.init</h3><p>在小程序端开始使用云能力前，需先调用 <code>wx.cloud.init</code> 方法完成云能力初始化（注意小程序需先开通云服务，开通的方法是点击工具栏左上角的 “控制台” 按钮）。因此，如果要使用云能力，通常我们在小程序初始化时即调用这个方法。</p>
<h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><p><code>env</code> 是 <code>wx.cloud.init</code> 的一个参数<br>开通云开发之前会分配两个环境, 一般一个作为正式环境, 一个作为测试环境</p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="云数据库"><a href="#云数据库" class="headerlink" title="云数据库"></a>云数据库</h3><p>简而言是, 就是 <code>MongoDB</code>.</p>
<p>有方便的权限管理</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>小程序端 读自己创建的数据</th>
<th>小程序端 写自己创建的数据</th>
<th>小程序端 \n 读他人创建的数据</th>
<th>小程序端 写他人创建的数据</th>
<th>管理端 读写任意数据</th>
</tr>
</thead>
<tbody>
<tr>
<td>仅创建者可写，所有人可读</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>仅创建者可读写</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>仅管理端可写，所有人可读</td>
<td>√</td>
<td>×</td>
<td>√</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>仅管理端可读写：该数据只有管理端可读写</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
</tbody>
</table>
<h3 id="云存储"><a href="#云存储" class="headerlink" title="云存储"></a>云存储</h3><ul>
<li>wx.cloud.uploadFile 上传文件</li>
<li>wx.cloud.downloadFile 下载文件</li>
<li>wx.cloud.deleteFile 删除文件</li>
<li>wx.cloud.getTempFileURL 换取临时链接</li>
</ul>
<h3 id="云函数"><a href="#云函数" class="headerlink" title="云函数"></a>云函数</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/getting-started.html" target="_blank" rel="noopener">详情见文档</a></p>
<p>云开发的云函数的独特优势在于与微信登录鉴权的无缝整合。当小程序端调用云函数时，云函数的传入参数中会被注入小程序端用户的 <code>openid</code>，开发者无需校验 <code>openid</code> 的正确性，因为微信已经完成了这部分鉴权，开发者可以直接使用该 <code>openid</code>。与 <code>openid</code> 一起同时注入云函数的还有小程序的 <code>appid</code>。</p>
<p>从小程序端调用云函数时，开发者可以在云函数内使用 <code>wx-server-sdk</code> 提供的 <code>getWXContext</code> 方法获取到每次调用的上下文（<code>appid</code>、<code>openid</code> 等），无需维护复杂的鉴权机制，即可获取天然可信任的用户登录态（<code>openid</code>）。</p>
<ul>
<li><a href="https://www.npmjs.com/package/tcb-router" target="_blank" rel="noopener">TCBRouter</a> koa风格的路由, 云函数只能使用20个, 通过TCBRouter可以解决这个问题</li>
<li>可以简单对接模板消息<ul>
<li>每一次 form 表单提交时可以获取到用于发布模板消息的 from_id</li>
<li>from_id 仅能推送一次模板消息</li>
<li>支付后, 使用 prepay_id 可以推送三次模板消息</li>
</ul>
</li>
</ul>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://github.com/taohong000/yun_mybook" target="_blank" rel="noopener">https://github.com/taohong000/yun_mybook</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>如何从0开始配置webapck</title>
    <url>/2018/06/08/%E5%A6%82%E4%BD%95%E4%BB%8E0%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AEwebapck/</url>
    <content><![CDATA[<p><img src="/2018/06/08/如何从0开始配置webapck/思维导图.png" alt="思维导图"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>前端面试总结</title>
    <url>/2020/04/20/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><h3 id="v-show-和-v-if-的区别"><a href="#v-show-和-v-if-的区别" class="headerlink" title="v-show 和 v-if 的区别"></a>v-show 和 v-if 的区别</h3><ol>
<li>v-show 通过 css display 控制显示和隐藏</li>
<li>v-if 组件真正的渲染和销毁, 而不是显示和隐藏</li>
<li>频繁切换显示状态用 v-show, 否则用 v-if</li>
</ol>
<h3 id="为何在-v-for-中用-key"><a href="#为何在-v-for-中用-key" class="headerlink" title="为何在 v-for 中用 key"></a>为何在 v-for 中用 key</h3><ol>
<li>必须用 key, 且不能是 index 和 random</li>
<li>diff 算法中通过 tag 和 key 来判断, 是否是 sameNode</li>
<li>减少渲染次次数, 提升渲染性能</li>
</ol>
<h3 id="描述-vue-组件生命周期-父子组件"><a href="#描述-vue-组件生命周期-父子组件" class="headerlink" title="描述 vue 组件生命周期(父子组件)"></a>描述 vue 组件生命周期(父子组件)</h3><ol>
<li>单组件生命周期图</li>
<li>父子组件生命周期关系</li>
</ol>
<h3 id="vue-组件如何通讯-常见"><a href="#vue-组件如何通讯-常见" class="headerlink" title="vue 组件如何通讯(常见)"></a>vue 组件如何通讯(常见)</h3><ol>
<li>父子组件 props 和 this.$emit</li>
<li>自定义事件 event.$on event.$off event.$emit</li>
<li>vuex</li>
</ol>
<h3 id="描述组件渲染和更新的过程"><a href="#描述组件渲染和更新的过程" class="headerlink" title="描述组件渲染和更新的过程"></a>描述组件渲染和更新的过程</h3><p><img src="/2020/04/20/前端面试总结/data.png" alt="Alt text"></p>
<h3 id="双向数据绑定-v-model-的实现原理"><a href="#双向数据绑定-v-model-的实现原理" class="headerlink" title="双向数据绑定 v-model 的实现原理"></a>双向数据绑定 v-model 的实现原理</h3><ol>
<li>input 元素的 value = this.name</li>
<li>绑定 input 事件 this.name = $event.target.value</li>
<li>data 更新触发 re-render</li>
</ol>
<h3 id="对-MVVM-的理解"><a href="#对-MVVM-的理解" class="headerlink" title="对 MVVM 的理解"></a>对 MVVM 的理解</h3><p><img src="/2020/04/20/前端面试总结/mvvm.png" alt="Alt text"></p>
<h3 id="computed-有何特点"><a href="#computed-有何特点" class="headerlink" title="computed 有何特点"></a>computed 有何特点</h3><ol>
<li>有缓存, data 不变不会重新计算</li>
<li>提高性能</li>
</ol>
<h3 id="为何组件中的-data-必须是一个函数"><a href="#为何组件中的-data-必须是一个函数" class="headerlink" title="为何组件中的 data 必须是一个函数"></a>为何组件中的 data 必须是一个函数</h3><p>组件是可复用的 vue 实例, 如果组件被复用, data 又不是函数, data 会指向同一个对象, 会相互影响.</p>
<h3 id="ajax-请求应该放在哪个生命周期"><a href="#ajax-请求应该放在哪个生命周期" class="headerlink" title="ajax 请求应该放在哪个生命周期"></a>ajax 请求应该放在哪个生命周期</h3><ol>
<li>mounted</li>
<li>js 是单线程的, ajax 异步获取数据</li>
<li>放在 mounted 之前没有用, 只会让逻辑更加混乱</li>
</ol>
<p>在created的时候，视图中的dom并没有被渲染出来，所以此时如果直接去操作dom节点，无法找到相关元素。<br>在mounted中，由于此时的dom元素已经渲染出来了，所以可以直接使用dom节点。<br>一般情况下，都放在mounted中，保证逻辑的统一性。因为生命周期是同步执行的，ajax是异步执行的。<br>服务端渲染不支持mounted方法，所以在服务端渲染的情况下统一放在created中。</p>
<h3 id="如何将组件所有-props-传递给子组件"><a href="#如何将组件所有-props-传递给子组件" class="headerlink" title="如何将组件所有 props 传递给子组件?"></a>如何将组件所有 props 传递给子组件?</h3><ol>
<li>v-bind=”$props”</li>
</ol>
<h3 id="如何自己实现-v-model"><a href="#如何自己实现-v-model" class="headerlink" title="如何自己实现 v-model"></a>如何自己实现 v-model</h3><p>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，也可以自定义, 受用 <code>model</code> 选项就可以了</p>
<h3 id="多个组件有相同的逻辑-如何抽离"><a href="#多个组件有相同的逻辑-如何抽离" class="headerlink" title="多个组件有相同的逻辑, 如何抽离?"></a>多个组件有相同的逻辑, 如何抽离?</h3><ul>
<li>mixin</li>
<li>以及 mixin 的一些缺点</li>
</ul>
<h3 id="何时使用异步组件"><a href="#何时使用异步组件" class="headerlink" title="何时使用异步组件"></a>何时使用异步组件</h3><ol>
<li>加载大组件</li>
<li>路由异步加载</li>
</ol>
<h3 id="何时需要使用-keep-alive"><a href="#何时需要使用-keep-alive" class="headerlink" title="何时需要使用 keep-alive"></a>何时需要使用 keep-alive</h3><ol>
<li>可以缓存组件, 不需要重新渲染</li>
<li>如多个静态 tab 页的切换</li>
<li>优化性能</li>
</ol>
<h3 id="何时需要使用-beforeDestory"><a href="#何时需要使用-beforeDestory" class="headerlink" title="何时需要使用 beforeDestory"></a>何时需要使用 beforeDestory</h3><ol>
<li>解绑自定义事件 event.$off</li>
<li>清除定时器</li>
<li>解绑自定义的 DOM 事件, 如 window scroll 等</li>
</ol>
<h3 id="什么是作用域插槽"><a href="#什么是作用域插槽" class="headerlink" title="什么是作用域插槽"></a>什么是作用域插槽</h3><h3 id="vuex-中-action-和-mutation-有何区别"><a href="#vuex-中-action-和-mutation-有何区别" class="headerlink" title="vuex 中 action 和 mutation 有何区别"></a>vuex 中 action 和 mutation 有何区别</h3><ol>
<li>action 中处理异步, mutation 不可以</li>
<li>mutation 做原子操作</li>
<li>action 可以整合多个mutation</li>
</ol>
<h3 id="vue-router-常用的路由模式"><a href="#vue-router-常用的路由模式" class="headerlink" title="vue-router 常用的路由模式"></a>vue-router 常用的路由模式</h3><ol>
<li>hash 默认</li>
<li>H5 history(需要服务端支持)</li>
<li>两者比较</li>
</ol>
<h3 id="如何配置-vue-router-异步加载"><a href="#如何配置-vue-router-异步加载" class="headerlink" title="如何配置 vue-router 异步加载"></a>如何配置 vue-router 异步加载</h3><p>使用 import() 函数</p>
<h3 id="请用-vnode-描述一个-dom-结构"><a href="#请用-vnode-描述一个-dom-结构" class="headerlink" title="请用 vnode 描述一个 dom 结构"></a>请用 vnode 描述一个 dom 结构</h3><h3 id="监听-data-变化的核心-api-是什么"><a href="#监听-data-变化的核心-api-是什么" class="headerlink" title="监听 data 变化的核心 api 是什么"></a>监听 data 变化的核心 api 是什么</h3><ol>
<li>Object.defineProperty</li>
<li>以及监听深度, 监听数组</li>
<li>有何缺点</li>
</ol>
<h3 id="vue-如何监听数组变化"><a href="#vue-如何监听数组变化" class="headerlink" title="vue 如何监听数组变化"></a>vue 如何监听数组变化</h3><ol>
<li>Object.defineProperty 不能监听数组变化</li>
<li>重新定义原型, 重写 push pop 等方法, 实现监听</li>
<li>Proxy 可以原生监听数组变化</li>
</ol>
<h3 id="请描述响应式原理"><a href="#请描述响应式原理" class="headerlink" title="请描述响应式原理"></a>请描述响应式原理</h3><ol>
<li>监听 data 变化</li>
<li>组件渲染和更新的流程</li>
</ol>
<h3 id="diff-算法的时间复杂度"><a href="#diff-算法的时间复杂度" class="headerlink" title="diff 算法的时间复杂度"></a>diff 算法的时间复杂度</h3><ol>
<li>O(n)</li>
<li>在 O(n^3) 基础上做了一些调整</li>
</ol>
<h3 id="简述-diff-算法过程"><a href="#简述-diff-算法过程" class="headerlink" title="简述 diff 算法过程"></a>简述 diff 算法过程</h3><ol>
<li>patch(elem, vnode) 和 patch(vnode, newVnode)</li>
<li>patchVnode 和 addVnodes 和 remvoeVnodes</li>
<li>updateChildren(key 的重要性)</li>
</ol>
<h3 id="vue-为何是异步渲染-nextTick-何用"><a href="#vue-为何是异步渲染-nextTick-何用" class="headerlink" title="vue 为何是异步渲染, $nextTick 何用?"></a>vue 为何是异步渲染, $nextTick 何用?</h3><ol>
<li>异步渲染(以及合并 data 修改), 以提高渲染性能</li>
<li>$nextTick 在 dom 更新完后, 触发回调</li>
</ol>
<h3 id="vue-常见性能优化方式"><a href="#vue-常见性能优化方式" class="headerlink" title="vue 常见性能优化方式"></a>vue 常见性能优化方式</h3><ol>
<li>合理使用 v-show 和 v-if</li>
<li>合理使用 computed</li>
<li>v-for 时加 key, 以及避免和 v-if 同时使用</li>
<li>自定义事件, dom 事件及时销毁</li>
<li>合理使用异步组件</li>
<li>合理使用 keep-alive</li>
<li>data 层级不要太深</li>
<li>使用 vue-loader 在开发环境做模板编译(预编译)</li>
<li>webpack 层面的优化</li>
<li>前端通用性能优化, 如懒加载</li>
<li>使用 SSR</li>
</ol>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="webpack-常见配置"><a href="#webpack-常见配置" class="headerlink" title="webpack 常见配置"></a>webpack 常见配置</h3><ol>
<li>拆分配置和 merge</li>
<li>启动本地服务</li>
<li>处理 es6</li>
<li>处理样式</li>
<li>处理图片</li>
<li>(模块化)</li>
</ol>
<h3 id="前端为何要进行打包和构建"><a href="#前端为何要进行打包和构建" class="headerlink" title="前端为何要进行打包和构建"></a>前端为何要进行打包和构建</h3><ol>
<li>体积更小(Tree-Shaking, 压缩, 合并), 加载更换</li>
<li>编译高级语言或者预发(TS, ES6+, 模块化, scss)</li>
<li>兼容性和错误检测(Polyfill, postcss, eslint)</li>
<li>统一, 高效的开发环境</li>
<li>统一的构建流程和产出标准</li>
<li>集成公司规范构建(提测, 上线等)</li>
</ol>
<h3 id="module-chunk-bundle-的区别"><a href="#module-chunk-bundle-的区别" class="headerlink" title="module chunk bundle 的区别"></a>module chunk bundle 的区别</h3><ol>
<li>module - 各个源码文件, webpack 中一切皆模块</li>
<li>chunk - 多模块合并成的, 如 entry import() splitChunk</li>
<li>bundle - 最终输出文件</li>
</ol>
<h3 id="loader-和-plugin-的区别"><a href="#loader-和-plugin-的区别" class="headerlink" title="loader 和 plugin 的区别"></a>loader 和 plugin 的区别</h3><ol>
<li>loader 模块转换器, 如 less -&gt; css</li>
<li>plugin 扩展插件, 如 HtmlWebpackPlugin</li>
</ol>
<p>Loader直译为”加载器”。Webpack将一切文件视为模块，但是webpack原生是只能解析js文件，如果想将其他文件也打包的话，就会用到loader。 所以Loader的作用是让webpack拥有了加载和解析非JavaScript文件的能力。<br>Plugin直译为”插件”。Plugin可以扩展webpack的功能，让webpack具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p>
<h3 id="常见的-loader-和-plugin-有哪些"><a href="#常见的-loader-和-plugin-有哪些" class="headerlink" title="常见的 loader 和 plugin 有哪些"></a>常见的 loader 和 plugin 有哪些</h3><p>查看文档, 结合自己的项目说</p>
<p>loader<br>处理图片的 url-loader</p>
<p>转换编译<br>babel-loader 加载 ES2015+ 代码，然后使用 Babel 转译为 ES5</p>
<p>处理样式的<br>style-loader 将模块的导出作为样式添加到 DOM 中<br>css-loader 解析 CSS 文件后，使用 import 加载，并且返回 CSS 代码<br>less-loader 加载和转译 LESS 文件<br>sass-loader 加载和转译 SASS/SCSS 文件<br>postcss-loader 使用 PostCSS 加载和转译 CSS/SSS 文件<br>stylus-loader 加载和转译 Stylus 文件</p>
<p>清理和测试<br>eslint-loader PreLoader，使用 ESLint 清理代码</p>
<p>框架<br>vue-loader 加载和转译 Vue 组件</p>
<p>plugin<br>CopyWebpackPlugin<br>将单个文件或整个目录复制到构建目录<br>DefinePlugin<br>允许在编译时(compile time)配置的全局常量</p>
<p>DllPlugin<br>为了极大减少构建时间，进行分离打包<br>EnvironmentPlugin<br>DefinePlugin 中 process.env 键的简写方式。<br>ExtractTextWebpackPlugin<br>从 bundle 中提取文本（CSS）到单独的文件<br>HotModuleReplacementPlugin<br>启用模块热替换(Enable Hot Module Replacement - HMR)<br>HtmlWebpackPlugin<br>简单创建 HTML 文件，用于服务器访问<br>I18nWebpackPlugin<br>为 bundle 增加国际化支持<br>IgnorePlugin<br>从 bundle 中排除某些模块</p>
<h3 id="babel-和-webpack-的区别"><a href="#babel-和-webpack-的区别" class="headerlink" title="babel 和 webpack 的区别"></a>babel 和 webpack 的区别</h3><ol>
<li>babel - js 新语法编译工具, 不关心模块化</li>
<li>webpack - 打包构建工具, 是多个 loader plugin 的集合</li>
</ol>
<h3 id="如何产出一个-lib"><a href="#如何产出一个-lib" class="headerlink" title="如何产出一个 lib"></a>如何产出一个 lib</h3><ol>
<li>参考 webpack.dll.js</li>
<li>output.library</li>
</ol>
<h3 id="babel-polyfill-和-babel-runtime-的区别"><a href="#babel-polyfill-和-babel-runtime-的区别" class="headerlink" title="babel-polyfill 和 babel-runtime 的区别"></a>babel-polyfill 和 babel-runtime 的区别</h3><ol>
<li>babel-polyfill 会污染全局</li>
<li>babel-runtime 不会污染全局</li>
<li>产出第三方 lib 要用 babel-runtime</li>
</ol>
<h3 id="webpack-如何实现懒加载"><a href="#webpack-如何实现懒加载" class="headerlink" title="webpack 如何实现懒加载"></a>webpack 如何实现懒加载</h3><ol>
<li>import()</li>
<li>结合 Vue react 异步组件</li>
<li>结合 VUe-router React-router 异步加载路由</li>
</ol>
<h3 id="为何-Proxy-不能被-Polyfill"><a href="#为何-Proxy-不能被-Polyfill" class="headerlink" title="为何 Proxy 不能被 Polyfill"></a>为何 Proxy 不能被 Polyfill</h3><ol>
<li>如 Class 可以用 function 模拟</li>
<li>如 Promise 可以用 callback 模拟</li>
<li>但 Proxy 的功能用 Object.defineProperty 无法模拟</li>
</ol>
<h3 id="webpack-性能优化-构建速度"><a href="#webpack-性能优化-构建速度" class="headerlink" title="webpack 性能优化-构建速度"></a>webpack 性能优化-构建速度</h3><ol>
<li>优化 babel-loader</li>
<li>IgnorePlugin</li>
<li>noParse</li>
<li>happyPack</li>
<li>ParallelUglifyPlugin</li>
<li>自动刷新</li>
<li>热更新</li>
<li>DllPlugin</li>
</ol>
<h3 id="webpack-优化产出代码"><a href="#webpack-优化产出代码" class="headerlink" title="webpack 优化产出代码"></a>webpack 优化产出代码</h3><ol>
<li>小图片 base64 编码</li>
<li>bundle 加 hash</li>
<li>懒加载</li>
<li>提取公共代码</li>
<li>使用 CDN 加速</li>
<li>IgnorePlugin</li>
<li>使用 production</li>
<li>Scope Hosting</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>常用npm包</title>
    <url>/2017/10/27/%E5%B8%B8%E7%94%A8npm%E5%8C%85/</url>
    <content><![CDATA[<h1 id="常用npm包"><a href="#常用npm包" class="headerlink" title="常用npm包"></a>常用npm包</h1><h2 id="cross-env"><a href="#cross-env" class="headerlink" title="cross-env"></a>cross-env</h2><p>介绍：解决跨平台设置NODE_ENV的问题。<br>这个迷你的包能够提供一个设置环境变量的scripts，让你能够以lunix方式设置环境变量，然后在windows上也能兼容运行。</p>
<p>使用方法：</p>
<ul>
<li>安装cross-env:npm install cross-env –save-dev</li>
<li>在NODE_ENV=xxxxxxx前面添加cross-env就可以了。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"cross-env NODE_ENV=production webpack --config build/webpack.config.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>参考vue-cli的脚手架开发</title>
    <url>/2018/05/17/%E5%8F%82%E8%80%83vue-cli%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我在公司的业务主要有三种：</p>
<ul>
<li>管理后台，页面结构基本不变，模块可重复使用。</li>
<li>webApp，页面的交互较复杂，要根据设计深度定制。</li>
<li>简单页面，一般是配合native app 使用的页面，例如活动页面，简单的内容介绍页面，交互少，开发周期短。</li>
</ul>
<p>业务上基本形成了稳定的套路，这时候开发一套自己的脚手架工具是必要的</p>
<ul>
<li>减少重复性工作，提高开发效率。</li>
<li>给不同的业务创建不同的模版，容易迭代和维护。</li>
</ul>
<p>一方面是为了业务需要，一方面是为了练手，决定仿照vue-cli写一个脚手架工具。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>vue-cli 整体思路：</p>
<ul>
<li>将脚手架和各个模板独立发布到Git上。</li>
<li>通过脚手架下载模版。</li>
<li>通过与脚手架的交互信息，渲染模版，得到项目基本结构。</li>
</ul>
<p>阅读vue-cli的代码，代码思路如下：</p>
<ol>
<li><code>vue</code> 命令会执行 <code>package.json</code> 下的 <code>bin</code> 中指定的文件，也就是 <code>bin/vue</code>。这个文件中主要用到 <code>commander</code> 这个包，这个包可以用来设置不同的命令。</li>
<li><code>vue init</code> 执行 <code>bin/vue-init</code>。</li>
<li><code>vue init</code> 根据你输入的官方模版或者远程仓库中的模板名下载模版，用到的包是 <code>download-git-repo</code>。</li>
<li>仓库中有 <code>template</code> 目录，这里面是模版，有 <code>meta.js</code> 或者 <code>meta.json</code> 文件，里面的是配置内容，会被 <code>inquirer</code> 这个包使用，进行交互式问答，后面根据问答结果渲染模版。</li>
<li><code>metalsmith</code> 这个包根据问答内容渲染模版，这里还用到了模版引擎 <code>handlers</code>。</li>
</ol>
<h2 id="远程仓库工程结构"><a href="#远程仓库工程结构" class="headerlink" title="远程仓库工程结构"></a>远程仓库工程结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/template # ------ 模版</span><br><span class="line">meta.json # ------ 互动内容</span><br></pre></td></tr></table></figure>
<h2 id="脚手架工程结构"><a href="#脚手架工程结构" class="headerlink" title="脚手架工程结构"></a>脚手架工程结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bin  # ------ 命令执行文件</span><br><span class="line">/lib  # ------ 工具模块</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure>
<h2 id="commander"><a href="#commander" class="headerlink" title="commander"></a>commander</h2><p>nodejs内置了对命令行操作的支持，node工程下package.json中的bin字段可以定义命令名和关联的执行文件。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hxlz-create-app"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"hxlz"</span>: <span class="string">"./bin/hxlz.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过这样配置的nodejs项目，在使用-g选项进行全局安装的时候，会自动在系统的<code>[prefix]/bin</code>目录下创建相应的符号链接（symlink）关联到执行文件。如果是本地安装，这个符号链接会生成在<code>./node_modules/.bin</code>目录下。这样做的好处是可以直接在终端中像执行命令一样执行nodejs文件。关于<code>prefix</code>，可以通过<code>npm config get prefix</code>获取。</p>
<h3 id="定义命令"><a href="#定义命令" class="headerlink" title="定义命令"></a>定义命令</h3><p>在bin目录下创建一个hxlz.js文件，用于处理命令行的逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br><span class="line"></span><br><span class="line">program.version(<span class="string">'1.0.0'</span>)</span><br><span class="line">	.usage(<span class="string">'&lt;command&gt; [项目名称]'</span>)</span><br><span class="line">	.command(<span class="string">'init'</span>, <span class="string">'创建新项目'</span>)</span><br><span class="line">	.parse(process.argv)</span><br></pre></td></tr></table></figure>
<h3 id="定义子命令"><a href="#定义子命令" class="headerlink" title="定义子命令"></a>定义子命令</h3><p>ommander支持git风格的子命令处理，可以根据子命令自动引导到以特定格式命名的命令执行文件，文件名的格式是<code>[command]-[subcommand]</code>，例如：</p>
<p>hxlz init =&gt; hxlz-init</p>
<p>在bin目录下创建一个hxlz-init.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br><span class="line"></span><br><span class="line">program.usage(<span class="string">'&lt;project-name&gt;'</span>).parse(process.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据输入，获取项目名称</span></span><br><span class="line"><span class="keyword">let</span> projectName = program.args[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!projectName) &#123;  <span class="comment">// project-name 必填</span></span><br><span class="line">  <span class="comment">// 相当于执行命令的--help选项，显示help信息，这是commander内置的一个命令选项</span></span><br><span class="line">  program.help()</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">go()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 预留，处理子命令  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用download-git-repo下载模板"><a href="#使用download-git-repo下载模板" class="headerlink" title="使用download-git-repo下载模板"></a>使用download-git-repo下载模板</h2><p>新建<code>lib/download.js</code>文件，用于下载模版</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">'download-git-repo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下载模板</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> </span>target 目标文件夹</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;string&#125;</span> </span>repo   远程仓库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">target, repo</span>) </span>&#123;</span><br><span class="line">  target = path.join(target || <span class="string">'.'</span>, <span class="string">'.download-temp'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    download(repo,</span><br><span class="line">        target, &#123; <span class="attr">clone</span>: <span class="literal">true</span> &#125;, (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 下载的模板存放在一个临时路径中，下载完成后，可以向下通知这个临时路径，以便后续处理</span></span><br><span class="line">        resolve(path.resolve(process.cwd(), target))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用Promise的风格处理异步</p>
<p>对<code>hxlz-init.js</code>进行修改</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">'./lib/download'</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  download(rootName)</span><br><span class="line">    .then(<span class="function"><span class="params">target</span> =&gt;</span> <span class="built_in">console</span>.log(target))</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="处理远程仓库中的meta-json文件，使用inquirer-js处理命令行交互"><a href="#处理远程仓库中的meta-json文件，使用inquirer-js处理命令行交互" class="headerlink" title="处理远程仓库中的meta.json文件，使用inquirer.js处理命令行交互"></a>处理远程仓库中的meta.json文件，使用inquirer.js处理命令行交互</h2><p>这里直接使用了vue-cli的<code>ask.js</code>文件</p>
<p><a href="https://github.com/taohong000/hxlz-create-app/blob/master/lib/ask.js" target="_blank" rel="noopener">文件地址</a></p>
<h2 id="使用metalsmith处理模板"><a href="#使用metalsmith处理模板" class="headerlink" title="使用metalsmith处理模板"></a>使用metalsmith处理模板</h2><p>这里还用到了模版引擎<code>handlebars</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Metalsmith = <span class="built_in">require</span>(<span class="string">'metalsmith'</span>)</span><br><span class="line"><span class="keyword">const</span> Handlebars = <span class="built_in">require</span>(<span class="string">'handlebars'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">metadata = &#123;&#125;, src, dest = <span class="string">'.'</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!src) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`无效的source：<span class="subst">$&#123;src&#125;</span>`</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    Metalsmith(process.cwd())</span><br><span class="line">      .metadata(metadata)</span><br><span class="line">      .clean(<span class="literal">false</span>)</span><br><span class="line">      .source(src)</span><br><span class="line">      .destination(dest)</span><br><span class="line">      .use(<span class="function">(<span class="params">files, metalsmith, done</span>) =&gt;</span> &#123;</span><br><span class="line">      	<span class="keyword">const</span> meta = metalsmith.metadata()</span><br><span class="line">        <span class="built_in">Object</span>.keys(files).forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> t = files[fileName].contents.toString()</span><br><span class="line">          files[fileName].contents = <span class="keyword">new</span> Buffer(Handlebars.compile(t)(meta))</span><br><span class="line">        &#125;)</span><br><span class="line">      	done()</span><br><span class="line">      &#125;).build(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      	err ? reject(err) : resolve()</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="美化脚手架"><a href="#美化脚手架" class="headerlink" title="美化脚手架"></a>美化脚手架</h2><p>通过一些工具包，让脚手架更加人性化。这里介绍两个在vue-cli中发现的工具包：</p>
<ul>
<li>ora - 显示spinner</li>
<li>chalk - 给枯燥的终端界面添加一些色彩</li>
</ul>
<blockquote>
<p>参考链接</p>
<p><a href="http://zhangguoyu.org/2017/12/10/developing-a-cli-on-nodejs/" target="_blank" rel="noopener">基于node.js平台的脚手架开发经历</a><br><br><a href="https://github.com/iq9891/blog/issues/2" target="_blank" rel="noopener">从零开始搭建前端脚手架</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>坦然面对：应对前端疲劳</title>
    <url>/2017/07/19/%E5%9D%A6%E7%84%B6%E9%9D%A2%E5%AF%B9%EF%BC%9A%E5%BA%94%E5%AF%B9%E5%89%8D%E7%AB%AF%E7%96%B2%E5%8A%B3/</url>
    <content><![CDATA[<h1 id="坦然面对：应对前端疲劳"><a href="#坦然面对：应对前端疲劳" class="headerlink" title="坦然面对：应对前端疲劳"></a>坦然面对：应对前端疲劳</h1><blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="noopener">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@dyw934854565" target="_blank" rel="noopener">学会微笑</a><br>审校: <a href="http://www.zcfy.cc/@huangxiaolu" target="_blank" rel="noopener">huangxiaolu</a><br>链接：<a href="http://www.zcfy.cc/article/3509" target="_blank" rel="noopener">http://www.zcfy.cc/article/3509</a><br>原文：<a href="https://www.smashingmagazine.com/2016/11/not-an-imposter-fighting-front-end-fatigue/" target="_blank" rel="noopener">https://www.smashingmagazine.com/2016/11/not-an-imposter-fighting-front-end-fatigue/</a></p>
</blockquote>
<p>我最近和一个做后端开发的朋友讨论<strong>我在工作之余花了多长的时间去写码和学习写码</strong>。他给我看了Uncle Bob的《Clean Code》这本书中的一段话，它将音乐家们为准备音乐会而花费的时间与开发者让代码正确执行所用的练习时间进行了比较。</p>
<p>我喜欢这个类比，但是我不认为我完全认同它；首先这种想法会导致疲劳。我认为如果你想进一步磨练你的技术并扩大你的技能集，那么这是很好的，但是要一天中每个小时都这样做是很难持续的。</p>
<p><strong>前端疲劳是非常真实的。</strong> 我看到过一些关于JavaScript疲劳的文章，但我认为问题远不止于这种特定的语言。</p>
<p>先澄清一下，这篇文章不是在抱怨前端疲劳如何糟糕，以及技术发展太快—— 我喜欢技术迅速发展。同样的，我可以感受到它是如何的势不可挡，也会时不时地<span style="font-size: 1rem;">感觉自己</span>要落伍了。</p>
<p>据我所知，这是一把双刃剑。</p>
<p>首先作为一个前端开发者，你认为你的技能树里应当有以下所有的技能:</p>
<ul>
<li><p>HTML (整洁代码，语义化标签)</p>
</li>
<li><p>CSS (模块化，可伸缩)</p>
</li>
<li><p>CSS 方法 (BEM, SMACSS, OOCSS)</p>
</li>
<li><p>CSS 预处理器 (像LESS, SCSS, PostCSS)</p>
</li>
<li><p>现代 CSS (Flexbox, Grid)</p>
</li>
<li><p>JS</p>
</li>
<li><p>现代 JS (ES6, Typescript)</p>
</li>
<li><p>JS 框架 (Angular, React, Vue [更多的之后在此插入]）</p>
</li>
<li><p>JS 方法 (函数式编程, 面向对象)</p>
</li>
<li><p>JS 库 (Immutable, Ramda, Lodash)</p>
</li>
<li><p>响应式设计原则</p>
</li>
<li><p>测试 (TDD)</p>
</li>
<li><p>测试框架 (Jasmine, Karma)</p>
</li>
<li><p>SVG</p>
</li>
<li><p>WebGL</p>
</li>
<li><p>动画技术</p>
</li>
<li><p>可访问性</p>
</li>
<li><p>可用性</p>
</li>
<li><p>性能</p>
</li>
<li><p>构建工具 (Grunt, Gulp, NPM 脚本)</p>
</li>
<li><p>资源打包工具 (WebPack, Browserify)</p>
</li>
<li><p>NPM 生态系统</p>
</li>
<li><p>了解不同浏览器的怪癖</p>
</li>
<li><p>敏捷方法</p>
</li>
<li><p>版本控制 (通常是 Git)</p>
</li>
<li><p>视觉设计基础</p>
</li>
<li><p>软技能，时间管理</p>
</li>
<li><p>对使用的后端语言有基本的了解。</p>
</li>
</ul>
<p>此外，你还要涉足或展望这些技术：</p>
<ul>
<li><p>Service workers</p>
</li>
<li><p>Progressive Web Apps (PWA)</p>
</li>
<li><p>Web组件化</p>
</li>
</ul>
<p>其次，你的日常工作可能不会完全覆盖这些技能，或者不会让你有时间去学所有技术，因此怎样才能在你的控制下去保证会所有的技能？</p>
<p><img src="http://p0.qhimg.com/t010965cdb046400899.png" alt="听说像 “Progressive Web Apps” 的项目对开发人员来说是相当可怕的。新的方法和技巧导致疲劳感 —— 前端疲劳。"></p>
<p>开发人员听见“Progressive Web Apps” 这种术语可能会感到畏惧。新的方法和技巧导致疲劳感 —— 前端疲劳。 (<a href="http://blog.ionic.io/what-is-a-progressive-web-app/" target="_blank" rel="noopener">图片来源</a>)</p>
<p><strong>现在作为这些技术的消费者，你可能要做的是：</strong></p>
<ul>
<li><p>订阅一打不同的开发者周刊简报</p>
</li>
<li><p>添加Twitter订阅</p>
</li>
<li><p>参加每周赶工作的前端团队</p>
</li>
<li><p>在工作之外有轻松的渠道能和一些开发者交流</p>
</li>
<li><p>按照网上的教程 (希望不是过时的)</p>
</li>
<li><p>使用视频课程培训网站像 <a href="https://frontendmasters.com/" target="_blank" rel="noopener">Frontend Masters</a></p>
</li>
<li><p>买web开发的书 (希望不是过时的)</p>
</li>
<li><p>参加技术聚会</p>
</li>
<li><p>参加会议</p>
</li>
<li><p>参加培训课程</p>
</li>
</ul>
<p><strong>而作为一个贡献者，你可能要做的是：</strong></p>
<ul>
<li><p>写博客/杂志文章</p>
</li>
<li><p>演讲</p>
</li>
<li><p>直播</p>
</li>
<li><p>贡献开源项目</p>
</li>
<li><p>做自己的业余项目</p>
</li>
</ul>
<p>最近我发现我的注意力被分散到三件事情上，我用三分之一的精力写着代码，同时戴着耳机一边听别人讨论代码，一边在Slack上跟别人聊代码。我决定适可而止——我的全部注意力都被代码所占据。我已经精疲力竭了。</p>
<p>虽然这肯定是极端情况，但我相信其他人也经历过类似的事情。最重要的是，你可能有一份全职工作，家庭，朋友，业余爱好。难怪我们中有那么多人感觉力不从心并且<strong>怀疑我们是否做了正确的职业选择</strong>。</p>
<p>我的一些前端同事都表示想要打包走人，然后换一个可以在五点结束的工作。但我认为前端工作仍旧吸引着某些的人，而如果放弃这份工作，成为一个房地产经纪人，你仍然想尽你的可能成为最好的房地产经纪人。在你的空闲时间你还是会参加房地产会议和跟踪房价趋势。很多个月以前，我在金融业工作，晚上我还在学习，阅读相关资料，想成为我所选择领域中技能最佳的人。</p>
<p>并不是只有这个领域需要付出巨大的精力，许多职业需要投入大量的精力并且在工作之外学习。也许前端开发的特殊之处在于<strong>技术发展得如此迅速</strong>，以至于好像有人一直在移动目标岗位。这就像每隔一天我就会收到一封电子邮件，上面写着“XYZ”技术已死。我确定这不是真的，否则我们就没有技术可用了。</p>
<p>生态系统处于不断变化的状态，我认为这是一件好事。就我个人而言，我喜欢扮演一个可以不断地学习、发展和督促自己的角色，但这并不是说我不会偶尔感到不知所措。</p>
<p>考虑到这一点，<strong>我尝试记住这些事情</strong>用来阻止我殚精竭虑，同时也有一些避免疲劳的通用建议。</p>
<h3 id="我们是一样的"><a href="#我们是一样的" class="headerlink" title="我们是一样的"></a>我们是一样的</h3><p>我认识的开发者，无论是在工作中还是工作外，都是我认识的最聪明的人。但他们全都会感到不知所措。大多数人都有一些希望学习的技术清单。可能有少数人知道所有技术，而且在所有事情上都处于领先地位，但我们大多数人的处境完全相同。</p>
<p>我们仍然依赖Google和Stack Overflow来度过我们的一天，打开了超多的选项卡，全部是关于Web相关问题的答案。<strong>不止你一个人是这样！</strong></p>
<p>要高兴地知道你不是一个糟糕的开发人员，你只是还没有尝试过酷孩子们正在使用的东西。</p>
<p>是的，即使是“web名人”也有同样的困境…</p>
<p>你不可能知道所有的事情，而你在Twitter上追随的明星开发者在小部分的领域中表现得非常好。你会注意到，他们出名的领域恰好是他们所熟知的领域。可能也会有例外，但他们和我们一样也只是个普通人。:)</p>
<h3 id="冒充者综合征是真实的，我们都有"><a href="#冒充者综合征是真实的，我们都有" class="headerlink" title="冒充者综合征是真实的，我们都有"></a>冒充者综合征是真实的，我们都有</h3><p>我知道有有些优秀的前端开发人员不会申请职位，因为他们在不知道工作描述要求上的所有东西的情况下，就觉得自己是个骗子。引用其中一个：</p>
<blockquote>
<p>“我看到的90%的JDs，会让我感觉“啊，我太落后！” 。事实上，这让我很困扰，我想留在我现在的职位，试图赚更多的钱，只是因为这样让我觉得我已经“摆脱它”。”</p>
</blockquote>
<p>事实上，大部分的工作说明都是闹剧。我的朋友<a href="https://twitter.com/bardguyver" target="_blank" rel="noopener">Bård</a>把这些说明放在一张大的图片，来展示出前端工作要求和它们的真正含义之间的区别。</p>
<p><a href="https://www.smashingmagazine.com/wp-content/uploads/2016/09/jobs-edited-opt.png" target="_blank" rel="noopener"><img src="http://p0.qhimg.com/t0158d7c6f93f0cb194.png" alt="招聘广告的解释"></a></p>
<p>招聘广告的解释 (<a href="https://www.smashingmagazine.com/wp-content/uploads/2016/09/jobs-edited-opt.png" target="_blank" rel="noopener">图片来源</a>) (<a href="https://twitter.com/bardguyver" target="_blank" rel="noopener">图片来源</a>)</p>
<p>只要记住，<strong>会变好的</strong>。我所做的每一项工作，我都觉得自己不够深入，但最终你会习惯他们的工具和工作流程，你会学习并成为一个更好的开发人员。</p>
<p>不要害怕在工作中学习，掌握新技能的最佳方法是每天使用它们。</p>
<p>如果你有冒充者综合征，可能你是个正派的开发者，否则你就不会自觉地意识到它。</p>
<h3 id="巩固基础"><a href="#巩固基础" class="headerlink" title="巩固基础"></a>巩固基础</h3><p>人们很容易被耀眼的新事物分心，但是如果你的基础还不牢固，那么你所建造的东西将经受不住时间的考验。</p>
<p>就像我的一个好朋友曾经对我说的：</p>
<blockquote>
<p>“专注于基础一直是我的口头禅。你能建立良好的项目（SH！T）和解决问题，这才是最重要的，而你如何解决它们（所使用的工具）已经并将永远改变。”</p>
</blockquote>
<p>例如，当react一跃成名，它似乎总是和ES6捆绑在一起，我把重点放在语言的那些改变和新特性上而不是框架本身的细微差别。一旦react不火了，我从最新的JavaScript上学到的知识将继续存在下去。你可以在原生chrome玩很多特性，而不用引入Babel陷入依赖地狱。</p>
<h3 id="不用学所有的"><a href="#不用学所有的" class="headerlink" title="不用学所有的"></a>不用学所有的</h3><p>这真的很关键。我认为正在扼杀我们的不是新框架、库和模块，而是我们自己必须把它们全部学会的信念。</p>
<p>通过学习我发现最好的办法是专注——此刻我正在钻研ES6中的JavaScript函数式编程。</p>
<p>我的清单上还有很多我想学的东西，但我尽量不分心。例如，我喜欢温习我会的知识，玩Polymer，钻研一些最新的CSS技术，比如Grid，但是如果我一次开始阅读太多不同的领域，我得不到所有的信息。这些别的东西哪儿也去不了，再次看到的时候就能联想到他们。</p>
<p><strong>避免在某一主题上匆忙尝试使用一切</strong>。 慢慢来，确保你完全理解它。</p>
<p>如果你像我一样，你会有一个不断增长的清单，但不要害怕从中剔除项目。并不是所有的事情都值得投入时间，你应该试着去认识哪些是值得学习的，哪些可能在几年内消失。花时间来学习编程的设计模式和架构技术，相比于投入在当前火的框架，在长远上来看，总是更有益的。脱离成长轨迹，过不了多久你就会迷失在追逐玩流行语的过程中。</p>
<h3 id="大多数公司没有使用尖端技术"><a href="#大多数公司没有使用尖端技术" class="headerlink" title="大多数公司没有使用尖端技术"></a>大多数公司没有使用尖端技术</h3><p>现在有很多新的东西出现，web正在以惊人的速度发展，但通常企业真正在业务中开始采用这些新技术，需要很长的时间。大多数公司会等一段时间待技术成熟，并看到它在领域中被认可。</p>
<p><a href="https://angularjs.org/" target="_blank" rel="noopener">Angular</a> 是六年前创建的，我刚开始在一家初创公司工作，他认为这是三年前的框架。<a href="https://reactcommunity.org/" target="_blank" rel="noopener">Reactjs</a> 已经有大约三年的历史了，我现在的公司仅在今年圣诞节前才开始使用它。我确信有很多其他的框架在同一时间出现或者消失。如果所有的我都要去研究，我会发疯的。</p>
<p>在CSS领域，flexbox在2010年就可以用了——六年前！但是浏览器到现在支持仍然有限。我们今年早些时候开始在生产环境中使用它，而且我也不认为它在其他地方被广泛使用。</p>
<p>我的意思是，不必急于学习所有的东西，虽然技术可能会很快发展，但你的潜在雇主正在以较慢的速度前进。你不必走在曲线的前面，只是要确保你在观察它的轨迹。</p>
<h3 id="你学的越多，你会发现你不知道的也越来越多，这没关系"><a href="#你学的越多，你会发现你不知道的也越来越多，这没关系" class="headerlink" title="你学的越多，你会发现你不知道的也越来越多，这没关系"></a>你学的越多，你会发现你不知道的也越来越多，这没关系</h3><p>这是完全正常的。当你刚开始的时候，你不知道你不知道什么。然后你会学习一些东西并且认为你是一个天才。然后，渐渐地，这种幻觉被打破，你开始理解事实上在这之外你有多少东西不知道。</p>
<p>从本质上说，你得到的经验越多，你进入的空虚就越深。你需要跟这个和平相处，否则它会消耗你。如果有的话，这种感觉会让你相信你正朝着正确的方向前进。在我们选择的职业中，你永远不会舒舒服服地学会所有前端知识。</p>
<h3 id="不要把你所有的业余时间都花在学习上"><a href="#不要把你所有的业余时间都花在学习上" class="headerlink" title="不要把你所有的业余时间都花在学习上"></a>不要把你所有的业余时间都花在学习上</h3><p>你很容易就感觉到你远远落后，需要每分钟都去编码和学习。这是一张通往职业疲倦的单程票。留一些时间来发展你的技能，看看你是否可以与你的老板协商一些时间来保证你的学习时间，然后用剩下的时间来做你爱做的事。</p>
<p>我已经分出一点写代码的时间在健身房。锻炼对你的身心都是极其重要的。尝试每天至少做20到30分钟，可以保持头脑清醒，防止疲劳。</p>
<p>给你的家人和朋友留出时间，尽量不要和他们谈工作！</p>
<h3 id="现在是开发者的市场"><a href="#现在是开发者的市场" class="headerlink" title="现在是开发者的市场"></a>现在是开发者的市场</h3><p>目前不要担心找不到工作。此时我们正处于一个非常幸运的点，等待填充的岗位远比开发者要多。我不知道这将持续多久，但现在好好把握它！</p>
<p>你可以在不知道所有技术的情况下得到一份工作。我发现，在我面试过的人中，99%的人完全是在吹牛。</p>
<p>最坏的情况，记住遗留代码中有黄金。如果你是一个喜欢老方式的开发人员，总是会有一些公司依赖于传统技术，需要开发人员在他们的软件上工作。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>我希望其中的一些点有助于减轻你可能感到的一些挫折。你能做的最糟糕的事就是到达边缘，完全被烧尽，因为一旦你这样，很难恢复你对你所做的事情的热情，以及你这么做的初衷。</p>
<p>撸码愉快！</p>
<p><em>(aa, il)</em></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>成长经验</tag>
      </tags>
  </entry>
  <entry>
    <title>微信支付宝小程序对比</title>
    <url>/2019/02/20/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>微信和小程序大同小异, 这里通过对比两者的不同点帮助知识迁移. </p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><table>
<thead>
<tr>
<th>名称</th>
<th>微信</th>
<th>支付宝</th>
</tr>
</thead>
<tbody>
<tr>
<td>命名空间</td>
<td>wx</td>
<td>my</td>
</tr>
<tr>
<td>文件类型</td>
<td>js, wxml, wxss, json</td>
<td>js, axml, acss, json</td>
</tr>
<tr>
<td>绑定事件从bind改为on开头，并且采用驼峰形式</td>
<td>bindchange=”xx”</td>
<td>onChange=”xx</td>
</tr>
<tr>
<td>if 和 for语句写法不同</td>
<td>wx:if wx:for</td>
<td>a:if a:for</td>
</tr>
</tbody>
</table>
<h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>window对象设置</p>
<p>微信<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"微信接口功能演示"</span>,</span><br><span class="line">    <span class="attr">"enablePullDownRefresh"</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"disableScroll"</span>:<span class="literal">true</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>支付宝<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	"titleBarColor: "#ffffff",</span><br><span class="line">	"defaultTitle": "页面标题",</span><br><span class="line">	"pullRefresh": true,</span><br><span class="line">	"allowsBounceVertical": "YES"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>tabBar<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;tabBar&quot;: &#123;</span><br><span class="line">        &quot;color&quot;: &quot;#999&quot;,</span><br><span class="line">        &quot;selectedColor&quot;: &quot;#333&quot;,</span><br><span class="line">        &quot;backgroundColor&quot;: &quot;#ffffff&quot;,</span><br><span class="line">        &quot;list&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;pagePath&quot;: &quot;pages/index/index&quot;,</span><br><span class="line">                &quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">                &quot;iconPath&quot;: &quot;icons/1.png&quot;</span><br><span class="line">                &quot;selectedIconPath&quot;: &quot;icons/1_c.png&quot;,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>支付宝<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="attr">"textColor"</span>: <span class="string">"#999"</span>,</span><br><span class="line">    <span class="attr">"selectedColor"</span>: <span class="string">"#333"</span>,</span><br><span class="line">    <span class="attr">"backgroundColor"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">    <span class="attr">"items"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"pagePath"</span>: <span class="string">"pages/index/index"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"首页"</span></span><br><span class="line">        <span class="string">"icon"</span>:<span class="string">"icons/1.png"</span>,</span><br><span class="line">        <span class="attr">"activeIcon"</span>:<span class="string">"icons/1_c.png"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="逻辑层"><a href="#逻辑层" class="headerlink" title="逻辑层"></a>逻辑层</h3><p>JS模块化, 支付宝支持 ES6 语法</p>
<p>支付宝支持引入社区上的第三反方NPM，微信则对引入的NPM有规定的格式。</p>
<p>微信<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">'foo'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports.bar = bar;</span><br></pre></td></tr></table></figure></p>
<p>支付宝<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'foo'</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> bar;</span><br></pre></td></tr></table></figure></p>
<h3 id="视图层"><a href="#视图层" class="headerlink" title="视图层"></a>视图层</h3><h4 id="if-for"><a href="#if-for" class="headerlink" title="if for"></a>if for</h4><p>支付宝条件循环和列表循环和微信不同的地方是修改了命名空间, 如 wx:if-&gt;a:if</p>
<h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><p>支付宝支持对象扩展符<code>...</code><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"objectCombine"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...obj1, ...obj2, e: 5&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="自定义脚本"><a href="#自定义脚本" class="headerlink" title="自定义脚本"></a>自定义脚本</h3><p>微信中使用wxs, 支付宝中使用sjs</p>
<h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><p>支付宝</p>
<p>示例<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /components/customer/index.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"component"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /components/customer/index.js</span></span><br><span class="line">Component(&#123;</span><br><span class="line">  mixins: [], <span class="comment">// minxin 方便复用代码</span></span><br><span class="line">  data: &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, <span class="comment">// 组件内部数据</span></span><br><span class="line">  props: &#123; <span class="attr">y</span>: <span class="number">1</span> &#125;, <span class="comment">// 可给外部传入的属性添加默认值</span></span><br><span class="line">  didMount()&#123;&#125;, <span class="comment">// 生命周期函数</span></span><br><span class="line">  didUpdate()&#123;&#125;,</span><br><span class="line">  didUnmount()&#123;&#125;,</span><br><span class="line">  methods: &#123; <span class="comment">// 自定义事件</span></span><br><span class="line">    handleTap() &#123;</span><br><span class="line">  	  <span class="keyword">this</span>.setData(&#123; <span class="attr">x</span>: <span class="keyword">this</span>.data.x + <span class="number">1</span>&#125;); <span class="comment">// 可使用 setData 改变内部属性</span></span><br><span class="line">    &#125;, </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- // /components/customer/index.axml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>x: &#123;&#123;x&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onTap</span>=<span class="string">"handleTap"</span>&gt;</span>plusOne<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>default slot &amp; default value<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /pages/index/index.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="string">"customer"</span>: <span class="string">"/components/customer/index"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- /pages/index/index.axml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">customer</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>支付宝多了很多微信没有的扩展组件, 非常有参考价值</p>
<p><a href="https://github.com/ant-mini-program/mini-antui" target="_blank" rel="noopener">mini-antui</a></p>
<h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><p>常用api对比</p>
<table>
<thead>
<tr>
<th>说明</th>
<th>微信</th>
<th>支付宝</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>wx.request()</td>
<td>my.httpRequest()</td>
</tr>
<tr>
<td></td>
<td>wx.login()</td>
<td>my.getAuthCode()</td>
</tr>
<tr>
<td></td>
<td>wx.showModal()</td>
<td>my.confirm()</td>
</tr>
<tr>
<td></td>
<td>wx.getUserInfo()</td>
<td>my.getAuthUserInfo()</td>
</tr>
<tr>
<td></td>
<td>wx.requestPayment()</td>
<td>my.tradePay()</td>
</tr>
<tr>
<td></td>
<td>wx.saveImageToPhotosAlbum()</td>
<td>my.saveImage()</td>
</tr>
<tr>
<td>#导航栏标题</td>
<td>wx.setNavigationBarTitle()</td>
<td>my.setNavigationBar()</td>
</tr>
<tr>
<td>#导航栏颜色</td>
<td>wx.setNavigationBarColor()</td>
<td>my.setNavigationBar()</td>
</tr>
<tr>
<td>#粘贴板</td>
<td>wx.getClipboardData()</td>
<td>my.getClipboard()</td>
</tr>
<tr>
<td>#粘贴板</td>
<td>wx.setClipboardData()</td>
<td>my.setClipboard()</td>
</tr>
<tr>
<td>#1.1.3 当前画布的内容导出生成图片</td>
<td>wx.canvasToTempFilePath()</td>
<td>my.toTempFilePath()</td>
</tr>
<tr>
<td></td>
<td>wx.scanCode()</td>
<td>my.scan()</td>
</tr>
<tr>
<td></td>
<td>wx.closeBLEConnection()</td>
<td>my.disconnectBLEDevice()</td>
</tr>
</tbody>
</table>
<blockquote>
<p>参考链接</p>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/index.html" target="_blank" rel="noopener">微信小程序官方文档</a></p>
<p><a href="https://docs.alipay.com/mini/developer/getting-started" target="_blank" rel="noopener">支付宝小程序官方文档</a></p>
<p><a href="http://caibaojian.com/aliapp-wxapp.html" target="_blank" rel="noopener">支付宝小程序与微信小程序的不同点对比</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>微信小程序</tag>
        <tag>支付宝小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序转化为百度小程序的方法</title>
    <url>/2019/02/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BD%AC%E5%8C%96%E4%B8%BA%E7%99%BE%E5%BA%A6%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="开发工具转换"><a href="#开发工具转换" class="headerlink" title="开发工具转换"></a>开发工具转换</h2><p>登录百度小程序开发工具，在工具菜单，有一个一键转换微信的小程序为百度小程序。（前提：有审核通过的appid，并且登录开发者工具）<br><img src="/2019/02/20/微信小程序转化为百度小程序的方法/转换入口.png" alt="微信小程序转化为百度小程序的方法"></p>
<h2 id="npm-工具"><a href="#npm-工具" class="headerlink" title="npm 工具"></a>npm 工具</h2><p><a href="https://github.com/yican008/wx2swan" target="_blank" rel="noopener">wx2swan</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 安装： </span><br><span class="line">npm i -g wx2swan</span><br><span class="line"></span><br><span class="line">// 转换：</span><br><span class="line">// wx2swan 微信小程序的目录 (生成swan的目录)</span><br><span class="line">wx2swan ./test/demo ./test/swanDemo</span><br></pre></td></tr></table></figure>
<h2 id="手工转换"><a href="#手工转换" class="headerlink" title="手工转换"></a>手工转换</h2><p><a href="http://www.pweb123.com/2018/swan_1020/752.html" target="_blank" rel="noopener">微信小程序如何转换成百度小程序1</a></p>
<p><a href="http://caibaojian.com/baiduapp-vs-weixinapp.html" target="_blank" rel="noopener">微信小程序如何转换成百度小程序2</a></p>
<blockquote>
<p>参考链接 </p>
<p><a href="http://www.pweb123.com/2018/swan_1020/752.html" target="_blank" rel="noopener">微信小程序如何转换成百度小程序1</a></p>
<p><a href="http://caibaojian.com/baiduapp-vs-weixinapp.html" target="_blank" rel="noopener">微信小程序如何转换成百度小程序2</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>微信小程序</tag>
        <tag>百度小程序小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>开发流程</title>
    <url>/2020/02/06/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="开发前"><a href="#开发前" class="headerlink" title="开发前"></a>开发前</h2><h3 id="任务评估"><a href="#任务评估" class="headerlink" title="任务评估"></a>任务评估</h3><ol>
<li>任务的分解, 按页面&gt;模块&gt;需求点划分, 如果有时间.</li>
<li>时间进度的划分, 按半小时划分. 每天工作10个半小时, 即5小时. 为什么是5 小时, 一是方便统计, 二是流出冗余时间.</li>
<li>时间加权, 根据需求是否明确, 是否有探索性的内容, 是否做过进行加权. eg: 最快时间 + 0.5(没有做过类似模块) + 0.5(需求不明确) + 0.5~1(探索性内容).</li>
<li>如果有时间, 先写测试用例, 采用TDD 模式开发.</li>
</ol>
<h3 id="需求讨论"><a href="#需求讨论" class="headerlink" title="需求讨论"></a>需求讨论</h3><p>在写任务规划中, 也是对需求的再次理解, 不明确的地方, 用户体验不好的地方都要记下来, 和产品经理讨论.</p>
<h3 id="业务熟悉"><a href="#业务熟悉" class="headerlink" title="业务熟悉"></a>业务熟悉</h3><p>如果是在原有代码上的二次开发, 一定要搞清楚原有的业务逻辑. 不然很容易改出bug.</p>
<h2 id="开发中"><a href="#开发中" class="headerlink" title="开发中"></a>开发中</h2><h3 id="如何写代码"><a href="#如何写代码" class="headerlink" title="如何写代码"></a>如何写代码</h3><ol>
<li>开发中要遵循套路(风格), 这样才能反复练习.</li>
<li>要有工匠精神. <ol>
<li>该写注释的地方写注释. </li>
<li>该合并变量的时候合并变量. </li>
<li>注意空行的使用. </li>
<li>要注意性能.</li>
</ol>
</li>
<li>要勇于重构.</li>
</ol>
<h3 id="在开发中有新需求"><a href="#在开发中有新需求" class="headerlink" title="在开发中有新需求"></a>在开发中有新需求</h3><p>首先看是否影响原有的开发进度. 如果不影响. 可以改.<br>如果影响, 区分是否是必须添加的. 如果是必须添加的, 那评估时间并且同步其他人. 如果是非必须的.<br>区分是否来得及, 如果来的及, 原有需求开发完成后, 放在冗余时间或测试阶段.<br>如果来不及, 放弃或放在下次迭代.</p>
<h2 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h2><p>在测试前首先向qa 要测试用例, 自己测试一遍, 在测试过程中及时跟进.</p>
<h2 id="开发后"><a href="#开发后" class="headerlink" title="开发后"></a>开发后</h2><ol>
<li>开始几天多点点, 看看有没有bug.</li>
<li>监测页面的性能.</li>
</ol>
]]></content>
      <categories>
        <category>开发流程</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>工程规范</title>
    <url>/2018/04/19/%E5%B7%A5%E7%A8%8B%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="工程规范"><a href="#工程规范" class="headerlink" title="工程规范"></a>工程规范</h1><h2 id="如何制定规范"><a href="#如何制定规范" class="headerlink" title="如何制定规范"></a>如何制定规范</h2><ol>
<li>参考业界规范</li>
<li>民主讨论</li>
<li>结果导向</li>
<li>不断完善</li>
</ol>
<p>一般的规范在业界的大公司中已经有了成熟的方案。我们可以直接拿来参考</p>
<p>规范始终是给自己团队用的，需要的经过集体讨论。</p>
<p>实现规范的方式应该只注意结果，至于过程不需要硬性规定。</p>
<p>规范不可能一簇而就，需要不断完善。</p>
<h2 id="规范管理工具"><a href="#规范管理工具" class="headerlink" title="规范管理工具"></a>规范管理工具</h2><ul>
<li>htmllink</li>
<li>stylelink</li>
<li>eslink</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>工程化</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>版本管理</title>
    <url>/2018/04/20/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="分支模型"><a href="#分支模型" class="headerlink" title="分支模型"></a>分支模型</h2><h3 id="什么是分支模型"><a href="#什么是分支模型" class="headerlink" title="什么是分支模型"></a>什么是分支模型</h3><ul>
<li>分支:<br>从目标仓库获得一份项目拷贝，每条拷贝都有和原仓库功能一样的开发线</li>
<li>分支模型(branching model)/工作流(workflow):<br>一个围绕项目[开发/部署/测试]等工作流程的分支操作（创建，合并等）规范集合</li>
</ul>
<h3 id="产品级的分支模型"><a href="#产品级的分支模型" class="headerlink" title="产品级的分支模型"></a>产品级的分支模型</h3><p>常驻分支</p>
<ul>
<li>development<br>从master创建</li>
<li>production(master)<br>默认分支</li>
</ul>
<p>活动分支</p>
<ul>
<li>feature<br>从development创建</li>
<li>hotfix: 如hotfix-36<br>从master创建</li>
<li>release: release-110<br>从development创建</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>版本管理</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>开发套路</title>
    <url>/2019/02/21/%E5%BC%80%E5%8F%91%E5%A5%97%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="变量取名"><a href="#变量取名" class="headerlink" title="变量取名"></a>变量取名</h2><ol>
<li>如果函数要返回一个数据, 函数名字是<em>名词</em>, <code>user</code></li>
<li>如果函数只做事不返回, 函数名字是<em>动词</em>, <code>handleClick</code></li>
<li>变量名、函数名取名用<em>驼峰法</em> <code>markedSquare</code></li>
</ol>
<h2 id="抽象-封装代码"><a href="#抽象-封装代码" class="headerlink" title="抽象/封装代码"></a>抽象/封装代码</h2><ol>
<li>在编码复杂需求的时候, 用适当的抽象/封装和良好的代码结构, 可以增加代码的编写效率和可维护性</li>
<li>一边编写一边抽象, 编写一段时间后停一下, 整理代码结构</li>
<li>每个方法只做一件事情</li>
</ol>
<h2 id="代码编写风格"><a href="#代码编写风格" class="headerlink" title="代码编写风格"></a>代码编写风格</h2><ol>
<li>只有一个入口文件</li>
<li>要有测试方法</li>
<li>代码应该描述what，而不是how，因为看代码的人不需要关心一棵树你是怎么去解析的</li>
</ol>
<h2 id="如何完成复杂程序"><a href="#如何完成复杂程序" class="headerlink" title="如何完成复杂程序"></a>如何完成复杂程序</h2><ol>
<li>不要慌</li>
<li>拆分需求，如下所示（以 5-10 分钟能完成为拆分粒度）</li>
<li>有问题的需求先跳过，最后不做也是行的</li>
<li>边实现需求边测试，不要到最后一锅粥</li>
</ol>
<h2 id="组件文件"><a href="#组件文件" class="headerlink" title="组件文件"></a>组件文件</h2><p>(风格指南)[<a href="https://cn.vuejs.org/v2/style-guide/]" target="_blank" rel="noopener">https://cn.vuejs.org/v2/style-guide/]</a><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> page = &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      foo:<span class="number">0</span>,</span><br><span class="line">      bar:<span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>._获取数据<span class="number">1</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 总体来说, 方法的顺序按照重要性来排序</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 从接口中获取数据的方法</span></span><br><span class="line">    _获取数据<span class="number">1</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 和页面交互的方法</span></span><br><span class="line">    方法<span class="number">1</span>() &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    方法<span class="number">2</span>() &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其它私有方法</span></span><br><span class="line">    _私有方法<span class="number">1</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    _私有方法<span class="number">2</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><ol>
<li>套路编写</li>
<li>发展规划</li>
<li>基础知识整理</li>
<li>睡眠</li>
</ol>
<h2 id="编程能力有哪些方面"><a href="#编程能力有哪些方面" class="headerlink" title="编程能力有哪些方面"></a>编程能力有哪些方面</h2><ol>
<li>简化问题的能力, 厉害的人不是解决复杂问题, 而是把问题简化</li>
<li>快速开发的能力, 快速开发需要大量练习</li>
<li>解决别人不能解决的问题的能力</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
  </entry>
  <entry>
    <title>掌握Chrome开发工具：新一代前端开发技术</title>
    <url>/2017/08/01/%E6%8E%8C%E6%8F%A1Chrome%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%EF%BC%9A%E6%96%B0%E4%B8%80%E4%BB%A3%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="掌握Chrome开发工具：新一代前端开发技术"><a href="#掌握Chrome开发工具：新一代前端开发技术" class="headerlink" title="掌握Chrome开发工具：新一代前端开发技术"></a>掌握Chrome开发工具：新一代前端开发技术</h1><blockquote>
<p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="noopener">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@mirlysky" target="_blank" rel="noopener">一只叫做兰胖的食人魔魔法师</a><br>链接：<a href="http://www.zcfy.cc/article/3722" target="_blank" rel="noopener">http://www.zcfy.cc/article/3722</a><br>原文：<a href="https://medium.freecodecamp.com/mastering-chrome-developer-tools-next-level-front-end-development-techniques-3ac0b6fe8a3" target="_blank" rel="noopener">https://medium.freecodecamp.com/mastering-chrome-developer-tools-next-level-front-end-development-techniques-3ac0b6fe8a3</a></p>
</blockquote>
<p><img src="http://p0.qhimg.com/t015e639b0bbff3a958.png" alt><br>你可能已经熟悉了Chrome开发工具的基本功能。: DOM检查器、样式面板和JavaScript控制台。<br>但也有一些不太为人所知的特性可以显著提高你调试或开发应用的速度。</p>
<h3 id="黑色主题"><a href="#黑色主题" class="headerlink" title="黑色主题"></a>黑色主题</h3><p><img src="http://p0.qhimg.com/t01e0c0ce4f8052ff3a.png" alt></p>
<p>Chrome开发工具的内置了黑色主题。你可以通过点击开发工具窗口右上角的三点图标，之后点击进入设置页面，切换主题。</p>
<p>有时候我觉得黑色主题让我的眼睛更舒服,并且黑色主题显然看起来更酷一些 :)</p>
<h3 id="选择模式"><a href="#选择模式" class="headerlink" title="选择模式"></a>选择模式</h3><p><img src="http://p0.qhimg.com/t01836cdb4b48940789.png" alt></p>
<p>Chrome开发者工具提供了很多选择元素的方法，其中最快捷的方法就是使用选择模式。</p>
<p>该功能通过点击调试面板左上角的按钮开启(或者通过组合键 ctrl + shift + c), 该模式下你只需单击页面上的元素就可以选中它。</p>
<p>一旦开启该模式，你可以将鼠标移动到页面来预览选定内容，然后单击来选择要检查的元素。</p>
<p>通过ctrl + shitf + c键，你可以直接打开调试工具并开启调试模式，来在页面上快速选择一个元素。</p>
<h3 id="存储为全局变量"><a href="#存储为全局变量" class="headerlink" title="存储为全局变量"></a>存储为全局变量</h3><p><img src="http://p0.qhimg.com/t0174ecdccd3846a253.png" alt><br>有时在控制台中查看一个复杂对象是一件很麻烦的事，因为他们可能有很多的键值或者一些很难手动解析的值。幸运的是，Chrome可以让检查这类JavaScript对象变得很容易。<br>你只需在控制台中右键点击对象后选择“存储为全局变量”，chrome就会将这个变量存储为一个名叫“temp1”的变量，之后你可以通过Javascript对其进行操作。</p>
<h3 id="动画工具"><a href="#动画工具" class="headerlink" title="动画工具"></a>动画工具</h3><p><img src="http://p0.qhimg.com/t019e21ccfe21a6781f.png" alt></p>
<p>最近，Chrome团队为调试和创建动画添加了一些新特性。</p>
<p>单击控制台左上角的下拉框中的“动画”开启动画调试工具，你可以通过它限制站点上所有动画的速度。</p>
<p>你也可以暂停所有动画。这对于一个充斥着动画内容的站点尤其有用。</p>
<p><img src="http://p0.qhimg.com/t01ad7b9f1cfa43858b.png" alt></p>
<p>动画查看器允许你单独控制每个属性的时间曲线！</p>
<p><img src="http://p0.qhimg.com/t013dca61b1c7637096.png" alt></p>
<p>通过点击一个元素 <code>transition</code> 属性中的紫色曲线图表按钮，你可以看到动画的移动曲线，并且微调他的属性。此外，你还可以使用一些预置的时间曲线来应用到你的元素上。</p>
<h3 id="模拟元素伪态"><a href="#模拟元素伪态" class="headerlink" title="模拟元素伪态"></a>模拟元素伪态</h3><p><img src="http://p0.qhimg.com/t01f006dcaf6bd06128.png" alt></p>
<p>通过点击样式窗口右上角的<code>:hover</code>图标，你可以打开元素状态模拟工具。</p>
<p>该工具可以让你模拟一个元素的hover,active,focused和visited伪态，并且看到不同伪态的相关样式与选择符。</p>
<p><img src="http://p0.qhimg.com/t01465fea5205ac7773.png" alt></p>
<p>如果要为这些伪态添加样式，可以添加一个新的选择器（使用“+”图标），并将<code>:</code>添加到选择器的结尾。</p>
<p>例如，如果我想要给一个<code>logo</code>类的<code>li</code>标签添加hover伪态样式，我需要构造一个新的伪类<code>li.logo:hover</code>，并且给他添加相关属性。</p>
<p>之后可以通过模拟hover状态来检查你的样式是否正确。</p>
<h3 id="美化CSS和JavaScript"><a href="#美化CSS和JavaScript" class="headerlink" title="美化CSS和JavaScript"></a>美化CSS和JavaScript</h3><p><img src="http://p0.qhimg.com/t015a2bfa539a762525.png" alt><br>调试、浏览压缩后的JavaScript和CSS是一件非常困难的事情，好在调试工具让这件事情变得容易了一些。</p>
<p>在“Source”的标签栏打开了一个压缩的文档后，你可以点击左下角的花括号logo，之后调试工具就会将代码进行格式化处理。</p>
<p>尽管在压缩过程中丢失了一些信息（例如变量名）,该工具对调试CSS和JavaScript文件还是很有用的。</p>
<h3 id="Alt-Up-Alt-Down"><a href="#Alt-Up-Alt-Down" class="headerlink" title="Alt + Up / Alt + Down"></a>Alt + Up / Alt + Down</h3><p><img src="http://p0.qhimg.com/t01f82103523fc99d5d.png" alt><br>在调试CSS时，你可以选择一个属性然后使用上下箭头来调整它的值。默认情况下，上下箭头会将值加减1。但如果你按住了<code>alt</code>键，再通过上下箭头调整值时候，每次增减的值就会变成<code>0.1</code>，这在处理一些浮点类型的数值属性时非常有用。</p>
<p>相反的，你可以按住<code>shift</code>键一次将数值加减<code>10</code></p>
<h3 id="保存日志"><a href="#保存日志" class="headerlink" title="保存日志"></a>保存日志</h3><p><img src="http://p0.qhimg.com/t0146a45786e54f819a.png" alt><br>保存日志是一个复选框，它允许在页面刷新后仍然保存日志。这在调试需要刷新页面的网站问题时非常有用，因为默认情况下，所有控制台输出的信息在页面刷新后都会被清除。</p>
<p>启用此选项后，控制台中会出现一个新的“导航”日志，它指向了刷新或是导航到的页面。</p>
<h3 id="网络-日志过滤"><a href="#网络-日志过滤" class="headerlink" title="网络 + 日志过滤"></a>网络 + 日志过滤</h3><p><img src="http://p0.qhimg.com/t010de8398a241db428.png" alt></p>
<p>当调试具有大量网络请求或控制台日志的应用程序时，过滤特定类型的事件是很有用的。</p>
<p>Chrome有一种支持多种属性的过滤语言，以及类似于<code>*</code>的通配符。</p>
<p>如果你输入了“-”，Chrome会出现一个包含了可选过滤选项的提示框。你也可以打开“正则模式”来对每一行的数据进行正则匹配。</p>
<h3 id="代码覆盖率"><a href="#代码覆盖率" class="headerlink" title="代码覆盖率"></a>代码覆盖率</h3><p><img src="http://p0.qhimg.com/t011bc6afa6958c91e9.png" alt><br>代码覆盖率可以在运行Web应用程序后针对每个JavaScript和CSS文件，查看哪些代码行运行了，哪些代码没有运行。这是很有用的，因为在处理复杂或长期项目时，很容易在项目中累积无用的代码。</p>
<p>如果想要使用这个功能的话，首先升级Chrome到59或更高版本，之后切换到“Coverage”页面。点击“record”，之后开始使用你的Web应用。当你使用结束后，Chrome将向你显示操作期间运行的具体代码。</p>
<h3 id="调试用户遇到的问题"><a href="#调试用户遇到的问题" class="headerlink" title="调试用户遇到的问题"></a>调试用户遇到的问题</h3><p>通常来说调试工具只有在你自己的机器上才会生效。但如果你有兴趣了解用户在使用过程中遇到的的bug和性能问题，不妨尝试一下<a href="https://logrocket.com" target="_blank" rel="noopener">LogRocket</a>。</p>
<p><img src="http://p0.qhimg.com/t0195d799fac8d376e0.png" alt></p>
<p><a href="https://logrocket.com" target="_blank" rel="noopener"><br>LogRocket </a><a href="https://logrocket.com" target="_blank" rel="noopener"></a>是一个前端日志记录工具，它可以让你重放问题，就像它们发生在你自己的浏览器中一样。 不是通过猜测错误发生的原因，或要求用户提供截图或者错误日志，logrocket可以让你通过重放快速了解到问题出在哪里。它的兼容性很好，无论在任何框架下都可以使用，并且LogRocket对于React、Angular、和Vue的提供了额外的日志插件。</p>
<p><a href="https://logrocket.com" target="_blank" rel="noopener"><br>LogRocket </a><a href="https://logrocket.com" target="_blank" rel="noopener"></a>会记录你应用程序中的日志信息、带有header和body的网络请求、浏览器的元数据、Redux的行为与状态、以及应用进行时间与性能。并且他还能记录页面的HTML和CSS样式，完美的还原页面。</p>
<p>点击这里了解<a href="https://logrocket.com" target="_blank" rel="noopener"> LogRocket </a><a href="https://logrocket.com" target="_blank" rel="noopener"></a>。</p>
<p><a href="https://logrocket.com" target="_blank" rel="noopener"><strong>LogRocket | JavaScript应用的日志记录和会话回放</strong><br>_LogRocket帮助你理解那些影响用户的问题, 这样你就可以重新构建更好的的软件。</a><a href="https://logrocket.com" target="_blank" rel="noopener"></a></p>
<p>感谢阅读，希望这些调试工具的小技巧可以帮助你更好地构建应用。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>chrome devtools</tag>
      </tags>
  </entry>
  <entry>
    <title>添加hexo Next主题自定样式</title>
    <url>/2017/08/07/%E6%B7%BB%E5%8A%A0hexo-Next%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="添加hexo-Next主题自定样式"><a href="#添加hexo-Next主题自定样式" class="headerlink" title="添加hexo Next主题自定样式"></a>添加hexo Next主题自定样式</h1><p>添加自定义样式主要有两种</p>
<ol>
<li>添加自定义css</li>
<li>添加自定义内置标签</li>
</ol>
<h2 id="添加自定义样式"><a href="#添加自定义样式" class="headerlink" title="添加自定义样式"></a>添加自定义样式</h2><p>在themes/next/source/css/_custom/中添加样式文件, 例如<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.label</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Consolas;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">3px</span> <span class="number">2px</span> <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">2px</span> <span class="number">0px</span> <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.label-red</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#d9534f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.label-green</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.label-blue</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#428bca</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.label-sky</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#5bc0de</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.label-orange</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在themes/next/source/css/main.styl用引入样式文件<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">@import "_custom/custom";</span><br></pre></td></tr></table></figure></p>
<p>在文章中使用<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-red"</span>&gt;</span>New<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="添加自定义内置标签"><a href="#添加自定义内置标签" class="headerlink" title="添加自定义内置标签"></a>添加自定义内置标签</h2><p>在themes/next/scripts/tags中添加文件, 例如<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bscallOut</span> (<span class="params">args, content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;div class="note '</span> + args.join(<span class="string">' '</span>) + <span class="string">'"&gt;'</span> + hexo.render.renderSync(&#123;<span class="attr">text</span>: content, <span class="attr">engine</span>: <span class="string">'markdown'</span>&#125;).trim() + <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.tag.register(<span class="string">'note'</span>, bscallOut, &#123;<span class="attr">ends</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure></p>
<p>在文章中使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note [class] %&#125;</span><br><span class="line">  Any content (support inline tags too).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">// [class] : default | primary | success | info | warning | danger</span><br></pre></td></tr></table></figure></p>
<p><a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="noopener"> hexo完整的标签列表</a></p>
<p>Next主题内置的<a href="https://almostover.ru/2016-01/hexo-theme-next-test/" target="_blank" rel="noopener">Bootstrap Callout</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>知识管理：搭建知识管理体系</title>
    <url>/2018/01/18/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%EF%BC%9A%E6%90%AD%E5%BB%BA%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="知识管理：零基础搭建高效知识体系"><a href="#知识管理：零基础搭建高效知识体系" class="headerlink" title="知识管理：零基础搭建高效知识体系"></a>知识管理：零基础搭建高效知识体系</h1><p><img src="/2018/01/18/知识管理：搭建知识管理体系/知识管理脉络图.PNG" alt="Alt text"><br><img src="/2018/01/18/知识管理：搭建知识管理体系/知识管理核心圈.PNG" alt="Alt text"></p>
<h2 id="如何高效学习"><a href="#如何高效学习" class="headerlink" title="如何高效学习"></a>如何高效学习</h2><h3 id="知识管理四象限"><a href="#知识管理四象限" class="headerlink" title="知识管理四象限"></a>知识管理四象限</h3><p><img src="/2018/01/18/知识管理：搭建知识管理体系/知识管理四象限.png" alt="Alt text"></p>
<ul>
<li>知道自己知道：保存</li>
<li>知道自己不知道：重点</li>
<li>不知道自己知道：盘点</li>
<li>不知道自己不知道：发现</li>
</ul>
<h3 id="时间价值四象限"><a href="#时间价值四象限" class="headerlink" title="时间价值四象限"></a>时间价值四象限</h3><p><img src="/2018/01/18/知识管理：搭建知识管理体系/时间价值四象限.png" alt="Alt text"></p>
<ul>
<li>时间多价值高：替代</li>
<li>时间多价值低：规避</li>
<li>时间少价值高：最优</li>
<li>时间少价值低：警惕</li>
</ul>
<h2 id="如何有效地保存知识"><a href="#如何有效地保存知识" class="headerlink" title="如何有效地保存知识"></a>如何有效地保存知识</h2><h3 id="知识保存三大问题"><a href="#知识保存三大问题" class="headerlink" title="知识保存三大问题"></a>知识保存三大问题</h3><ul>
<li>误把信息当知识</li>
<li>保存信息无重点</li>
<li>保存之后就忘了</li>
</ul>
<p>有重点的保存<br>长回顾</p>
<h3 id="常规式保存"><a href="#常规式保存" class="headerlink" title="常规式保存"></a>常规式保存</h3><ul>
<li>手抄本记笔记：知识点和流程</li>
<li>电脑文件分类：分类三层以内</li>
<li>网络工具收藏：划重点勤剔除</li>
</ul>
<h3 id="进阶式保存"><a href="#进阶式保存" class="headerlink" title="进阶式保存"></a>进阶式保存</h3><ul>
<li>理解式保存</li>
<li>协同式保存</li>
</ul>
<p>画思维导图是一种不错的理解式保存方式<br>思维导图三步</p>
<ol>
<li>完整的阅读</li>
<li>理解式画图</li>
<li>对照着修正</li>
</ol>
<p>协同式保存</p>
<ul>
<li>网络百科</li>
<li>人力资源</li>
</ul>
<p>理解式保存：累人但出真知识<br>协同式保存：巧用资源型知识</p>
<h2 id="如何让知识融汇贯通"><a href="#如何让知识融汇贯通" class="headerlink" title="如何让知识融汇贯通"></a>如何让知识融汇贯通</h2><ul>
<li>链接已知：规律</li>
<li>对接生活：转化</li>
<li>提炼要点：接口</li>
<li>结构升华：概念<br>找到规律解题公式，链接已知融合新知<br>修辞手法转化新知，对接生活找共同点</li>
</ul>
<p>隐性知识显性化，显性知识结构化</p>
<p>根据知识能否清晰的表述，分为显性知识和隐性知识</p>
<ul>
<li>分点<ul>
<li>分类结构</li>
<li>空间接口</li>
</ul>
</li>
<li>分步<ul>
<li>步骤结构</li>
<li>时间结构</li>
</ul>
</li>
<li>分层<ul>
<li>层次结构</li>
<li>等级结构</li>
</ul>
</li>
<li>单一概念</li>
</ul>
<p>显性知识结构化，结构知识概念化</p>
<ul>
<li>数字法</li>
<li>子母法</li>
<li>比喻法<h2 id="如何让知识知行合一"><a href="#如何让知识知行合一" class="headerlink" title="如何让知识知行合一"></a>如何让知识知行合一</h2></li>
<li>陈述性知识：写和说</li>
<li><p>程序性知识：画和练</p>
</li>
<li><p>画</p>
<ul>
<li>动作图</li>
<li>流程图</li>
<li>模拟图</li>
</ul>
</li>
<li>练<ul>
<li>察觉需求</li>
<li>明确标准</li>
<li>着手联系</li>
<li>持续反馈</li>
<li>习惯固化</li>
</ul>
</li>
</ul>
<h2 id="如何科学地知识创新"><a href="#如何科学地知识创新" class="headerlink" title="如何科学地知识创新"></a>如何科学地知识创新</h2><h2 id="如何提升个人品牌力"><a href="#如何提升个人品牌力" class="headerlink" title="如何提升个人品牌力"></a>如何提升个人品牌力</h2>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>知识管理</tag>
      </tags>
  </entry>
  <entry>
    <title>界面组件之导航菜单</title>
    <url>/2017/08/22/%E7%95%8C%E9%9D%A2%E7%BB%84%E4%BB%B6%E4%B9%8B%E5%AF%BC%E8%88%AA%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<blockquote>
<p>本文转载自：<a href="https://segmentfault.com" target="_blank" rel="noopener">segmentfault</a><br>链接：<a href="https://segmentfault.com/a/1190000002446160" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002446160</a></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>界面组件之导航菜单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*纵向菜单*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.vertical</span> * &#123;</span></span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">nav</span><span class="selector-class">.vertical</span> &#123;</span></span><br><span class="line">        margin: 50px;</span><br><span class="line">        width: 150px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span><span class="selector-class">.vertical</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#6a6b6c</span>;</span></span><br><span class="line">        border-radius: 3px;</span><br><span class="line">        padding: 5px 10px 3px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span><span class="selector-class">.vertical</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">        list-style: none;</span><br><span class="line"><span class="css">        <span class="comment">/*padding: 3px 10px;*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*2.横向菜单*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span><span class="selector-class">.vertical</span> <span class="selector-tag">li</span>+<span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 注意这里！ */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#6a6b6c</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span><span class="selector-class">.vertical</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">        display: block;</span><br><span class="line"><span class="css">        <span class="comment">/* 这里！ */</span></span></span><br><span class="line">        padding: 3px 10px;</span><br><span class="line"><span class="css">        <span class="comment">/* 还有这里！ */</span></span></span><br><span class="line">        text-decoration: none;</span><br><span class="line">        padding: 3px 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span><span class="selector-class">.vertical</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#069</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span><span class="selector-class">.transverse</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">        overflow: hidden;</span><br><span class="line"><span class="css">        <span class="comment">/*强制 ul 包围浮动的 li 元素*/</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span><span class="selector-class">.transverse</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line"><span class="css">        <span class="comment">/*让 li 元素水平排列*/</span></span></span><br><span class="line">        list-style: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span><span class="selector-class">.transverse</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">        display: block;</span><br><span class="line"><span class="css">        <span class="comment">/*让链接变成块级元素*/</span></span></span><br><span class="line">        padding: 0 16px;</span><br><span class="line">        text-decoration: none;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#999</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span><span class="selector-class">.transverse</span> <span class="selector-tag">li</span>+<span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-left</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#aaa</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.list</span><span class="selector-class">.transverse</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#555</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*下拉菜单*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*第1步-实现顶级菜单*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/* ***************添加视觉样式************ */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> &#123;</span></span><br><span class="line">        font: 1em helvetica, arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*让链接充满列表项*/</span></span></span><br><span class="line">        display: block;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*文本颜色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#555</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*背景颜色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*链接的内边距*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">padding</span>: <span class="selector-class">.2em</span> 1<span class="selector-tag">em</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*分隔线宽度*/</span></span></span><br><span class="line">        border-width: 3px;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*可以有颜色，也可以透明*/</span></span></span><br><span class="line">        border-color: transparent;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*显示选择路径*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&gt;<span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*注意这里的选择符，使用了冒泡机制，后面会用到*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*悬停时的文本颜色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*悬停时的背景颜色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#aaa</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/* ***************添加功能样式************* */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> * &#123;</span></span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*强制ul包围li*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*水平排列菜单项*/</span></span></span><br><span class="line">        float: left;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*去掉默认的项目符合*/</span></span></span><br><span class="line">        list-style: none;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*为子菜单提供定位上下文*/</span></span></span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*让链接填充列表项*/</span></span></span><br><span class="line">        display: block;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*给每个链接添加一个右边框*/</span></span></span><br><span class="line">        border-right-style: solid;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*背景只出现在内边距区域后面*/</span></span></span><br><span class="line">        background-clip: padding-box;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*去掉链接的下划线*/</span></span></span><br><span class="line">        text-decoration: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*第2步-实现菜单的下拉部分*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*二级菜单宽度*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">        width: 9em;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*去掉继承的右边框*/</span></span></span><br><span class="line">        border-right-style: none;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*添加上边框*/</span></span></span><br><span class="line">        border-top-style: solid;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/* 添加的功能样式 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*临时显示二级下拉菜单*/</span></span></span><br><span class="line">        display: block;</span><br><span class="line"><span class="css">        <span class="comment">/*相对于父菜单项定位*/</span></span></span><br><span class="line">        position: absolute;</span><br><span class="line"><span class="css">        <span class="comment">/*左边与父菜单项对齐*/</span></span></span><br><span class="line">        left: 0;</span><br><span class="line"><span class="css">        <span class="comment">/*顶边与父菜单项底边对齐*/</span></span></span><br><span class="line">        top: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*停止浮动，恢复堆叠*/</span></span></span><br><span class="line">        float: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*继续隐藏三级下拉菜单*/</span></span></span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*第3步-让下拉菜单响应鼠标事件*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*隐藏二级下拉菜单*/</span></span></span><br><span class="line">        display: none;</span><br><span class="line"><span class="css">        <span class="comment">/*相对于父菜单项定位*/</span></span></span><br><span class="line">        position: absolute;</span><br><span class="line"><span class="css">        <span class="comment">/*左边与父菜单项对齐*/</span></span></span><br><span class="line">        left: 0;</span><br><span class="line"><span class="css">        <span class="comment">/*顶边与父菜单项底边对齐*/</span></span></span><br><span class="line">        top: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&gt;<span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*父元素悬停时显示*/</span></span></span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*隐藏二级菜单*/</span></span></span><br><span class="line"></span><br><span class="line">    li ul &#123;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*显示二级菜单*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&gt;<span class="selector-tag">ul</span> &#123;</span></span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*第4步-调整三级菜单的位置*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span> <span class="selector-tag">li</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*相对于父菜单定位*/</span></span></span><br><span class="line">        position: absolute;</span><br><span class="line"><span class="css">        <span class="comment">/*与父菜单右侧对齐*/</span></span></span><br><span class="line">        left: 100%;</span><br><span class="line"><span class="css">        <span class="comment">/*与父菜单项顶边对齐*/</span></span></span><br><span class="line">        top: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*其它-垂直的三级菜单*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*顶级垂直菜单宽度*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span><span class="selector-class">.vertical</span> &#123;</span></span><br><span class="line">        width: 8em;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span><span class="selector-class">.vertical</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">        border-right-style: none;</span><br><span class="line"></span><br><span class="line">        border-top-style: solid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span><span class="selector-class">.vertical</span> <span class="selector-tag">li</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">        border-left-style: solid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span><span class="selector-class">.vertical</span> <span class="selector-tag">ul</span>,</span></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span><span class="selector-class">.vertical</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*让顶级菜单垂直显示*/</span></span></span><br><span class="line">        float: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.multi_drop_menu</span><span class="selector-class">.vertical</span> <span class="selector-tag">li</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*子菜单左边与上一级菜单右边对齐*/</span></span></span><br><span class="line">        left: 100%;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*子菜单顶边与上一级菜单项顶边对齐*/</span></span></span><br><span class="line">        top: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1.纵向菜单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"list vertical"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>c<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>d<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2.横向菜单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"list transverse"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>c<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>d<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>3.下拉菜单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"multi_drop_menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 一级开始 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Power<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Money<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Love<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Fame<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 二级开始 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Sports Star<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Movie Star<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Rock Star<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!-- 三级开始 --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Bruce Springsteen<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Bono<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Mick Jagger<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Bob Dylan<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 三级结束 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 二级结束 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 一级结束 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">style</span>=<span class="string">"clear: both;margin-top: 200px;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>其它-垂直的三级菜单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"multi_drop_menu vertical"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 一级开始 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Power<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Money<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Love<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Fame<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 二级开始 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Sports Star<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Movie Star<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Rock Star<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!-- 三级开始 --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Bruce Springsteen<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Bono<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Mick Jagger<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Bob Dylan<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 三级结束 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 二级结束 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 一级结束 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>项目结构化套路</title>
    <url>/2019/03/30/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%8C%96%E5%A5%97%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="组件的分类"><a href="#组件的分类" class="headerlink" title="组件的分类"></a>组件的分类</h2><ul>
<li>接入型(container) 容器型</li>
<li>展示型</li>
<li>交互型 比如各类加强版的表单组件, 通常强调复用</li>
<li>功能型 比如<code>router-view</code>, <code>transition</code>, 作为一种扩展, 抽象机制存在</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>输出csv</title>
    <url>/2017/07/09/%E8%BE%93%E5%87%BAcsv/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exportToCsv</span>(<span class="params">filename, rows</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> processRow = <span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> finalVal = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; row.length; j++) &#123;</span><br><span class="line">                <span class="keyword">var</span> innerValue = row[j] === <span class="literal">null</span> ? <span class="string">''</span> : row[j].toString();</span><br><span class="line">                <span class="keyword">if</span> (row[j] <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">                    innerValue = row[j].toLocaleString();</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> result = innerValue.replace(<span class="regexp">/"/g</span>, <span class="string">'""'</span>);</span><br><span class="line">                <span class="keyword">if</span> (result.search(<span class="regexp">/("|,|\n)/g</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">                    result = <span class="string">'"'</span> + result + <span class="string">'"'</span>;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>)</span><br><span class="line">                    finalVal += <span class="string">','</span>;</span><br><span class="line">                finalVal += result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> finalVal + <span class="string">'\n'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> csvFile = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows.length; i++) &#123;</span><br><span class="line">            csvFile += processRow(rows[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([csvFile], &#123; <span class="attr">type</span>: <span class="string">'text/csv;charset=utf-8;'</span> &#125;);</span><br><span class="line">        <span class="keyword">if</span> (navigator.msSaveBlob) &#123; <span class="comment">// IE 10+</span></span><br><span class="line">            navigator.msSaveBlob(blob, filename);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">            <span class="keyword">if</span> (link.download !== <span class="literal">undefined</span>) &#123; <span class="comment">// feature detection</span></span><br><span class="line">                <span class="comment">// Browsers that support HTML5 download attribute</span></span><br><span class="line">                <span class="keyword">var</span> url = URL.createObjectURL(blob);</span><br><span class="line">                link.setAttribute(<span class="string">"href"</span>, url);</span><br><span class="line">                link.setAttribute(<span class="string">"download"</span>, filename);</span><br><span class="line">                link.style.visibility = <span class="string">'hidden'</span>;</span><br><span class="line">                <span class="built_in">document</span>.body.appendChild(link);</span><br><span class="line">                link.click();</span><br><span class="line">                <span class="built_in">document</span>.body.removeChild(link);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">exportToCsv(<span class="string">'export.csv'</span>, [</span><br><span class="line">  [<span class="string">'name'</span>,<span class="string">'description'</span>],	</span><br><span class="line">  [<span class="string">'david'</span>,<span class="string">'123'</span>],</span><br><span class="line">  [<span class="string">'jona'</span>,<span class="string">'""'</span>],</span><br><span class="line">  [<span class="string">'a'</span>,<span class="string">'b'</span>],</span><br><span class="line">])</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>页面布局</title>
    <url>/2017/08/24/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h1><h2 id="布局方式有哪几种"><a href="#布局方式有哪几种" class="headerlink" title="布局方式有哪几种"></a>布局方式有哪几种</h2><ol>
<li>文档流布局</li>
<li>定位布局</li>
<li>flex布局</li>
<li>table布局</li>
<li>网格布局</li>
</ol>
<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><ol>
<li>margin: 0 auto</li>
<li>将子元素设置为行内元素，然后父元素设置 <code>text-align: center</code>。</li>
<li>定位布局<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>flex布局<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: pink;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><ol>
<li>单行行内元素居中，只需要将子元素的行高等于高度就可以了</li>
<li>table布局</li>
<li>flex布局<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;	</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <tags>
        <tag>基础</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化上下文(Formatting Context)</title>
    <url>/2018/07/25/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87-Formatting-Context/</url>
    <content><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h3><p>一个页面是由很多个 <code>Box</code> 组成的，元素的类型和 <code>display</code> 属性决定了这个 <code>Box</code> 的类型。不同类型的 <code>Box</code>，会参与不同的 <code>Formatting Context</code>。</p>
<p><code>Block level</code> 的 <code>box</code> 会参与形成 <code>BFC</code>，比如 <code>display</code> 值为 <code>block</code>，<code>list-item</code>，<code>table</code>的元素。</p>
<p><code>Inline level</code> 的 <code>box</code> 会参与形成 <code>IFC</code>，比如 <code>display</code> 值为 <code>inline</code>，<code>inline-table</code>，<code>inline-block</code> 的元素。</p>
<p><a href="https://www.w3.org/TR/css3-box/#block-level0" target="_blank" rel="noopener">W3C文档block-level</a></p>
<h3 id="FC-Formatting-Context"><a href="#FC-Formatting-Context" class="headerlink" title="FC(Formatting Context)"></a>FC(Formatting Context)</h3><p>它是W3C CSS2.1规范中的一个概念，定义的是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。</p>
<p>常见的<code>Formatting Context</code> 有：<code>Block Formatting Context</code>（<code>BFC</code> | 块级格式化上下文） 和 <code>Inline Formatting Context</code>（<code>IFC</code> |行内格式化上下文）。</p>
<p> CSS3 新增规范，<code>GFC</code>（<code>GridLayout Formatting Contexts</code>）以及 <code>FFC</code>（<code>Flex Formatting Context</code>）。</p>
<h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><h3 id="BFC-布局规则"><a href="#BFC-布局规则" class="headerlink" title="BFC 布局规则"></a>BFC 布局规则</h3><ol>
<li>内部的Box会在垂直方向，一个接一个地放置。</li>
<li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li>
<li>每个元素的左外边缘（margin-left)， 与包含块的左边（contain box left）相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。除非这个元素自己形成了一个新的BFC。</li>
<li>BFC的区域不会与float box重叠。</li>
<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算BFC的高度时，浮动元素也参与计算</li>
</ol>
<p><a href="https://www.w3.org/TR/CSS2/visuren.html#block-formatting" target="_blank" rel="noopener">W3C文档block-formatting</a></p>
<h3 id="怎样形成一个BFC？"><a href="#怎样形成一个BFC？" class="headerlink" title="怎样形成一个BFC？"></a>怎样形成一个BFC？</h3><ol>
<li>根元素或其它包含它的元素</li>
<li>浮动 (元素的 float 不是 none)</li>
<li>绝对定位的元素 (元素具有 position 为 absolute 或 fixed)</li>
<li>非块级元素具有 display: inline-block，table-cell, table-caption, flex, inline-flex</li>
<li>块级元素具有overflow ，且值不是 visible</li>
</ol>
<h3 id="BFC用处"><a href="#BFC用处" class="headerlink" title="BFC用处"></a>BFC用处</h3><ol>
<li>清除浮动</li>
<li>布局：自适应两栏布局</li>
<li>防止垂直margin合并</li>
</ol>
<h2 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h2><h3 id="布局规则"><a href="#布局规则" class="headerlink" title="布局规则"></a>布局规则</h3><p>在行内格式化上下文中，框(boxes)一个接一个地水平排列，起点是包含块的顶部。水平方向上的 margin，border 和 padding在框之间得到保留。框在垂直方向上可以以不同的方式对齐：它们的顶部或底部对齐，或根据其中文字的基线对齐。包含那些框的长方形区域，会形成一行，叫做行框。</p>
<h3 id="行盒-line-box"><a href="#行盒-line-box" class="headerlink" title="行盒(line box)"></a>行盒(line box)</h3><ol>
<li>包含来自同一行的盒的矩形区域叫做行盒(line box)</li>
<li>line box的宽度由包含块和float情况决定,一般来说,line box的宽度等于包含块两边之间的宽度,然而float可以插入到包含块和行盒边之间,如果有float,那么line box的宽度会比没有float时小</li>
<li>line box的高度由line-height决定,而line box之间的高度各不相同(比如只含文本的line box高度与包含图片的line box高度之间)</li>
<li>line box的高度能够容纳它包含的所有盒,当盒的高度小于行盒的高度(例如,如果盒是baseline对齐)时,盒的竖直对齐方式由vertical-align属性决定</li>
<li>当一行的行内级盒的总宽度小于它们所在的line box的宽度时，它们在行盒里的水平分布由text-align属性决定。如果该属性值为justify，用户代理可能会拉伸行内盒（不包括inline-table和inline-block盒）里的空白和字（间距）</li>
</ol>
<iframe width="100%" height="300" src="//jsrun.net/DQgKp/embedded/html,css,result/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="行内盒-inline-box"><a href="#行内盒-inline-box" class="headerlink" title="行内盒(inline box)"></a>行内盒(inline box)</h3><ol>
<li>一个<code>inline box</code>是一个（特殊的）行内级盒，其内容参与了它的包含行内格式化上下文</li>
<li>当一个<code>inline box</code>超出一个<code>line box</code>的宽度时，它会被分成几个盒，并且这些盒会跨多<code>line box</code>分布。如果一个<code>inline-block</code>无法分割（例如，如果该<code>inline box</code>含有一个单个字符，或者特定语言的单词分隔规则不允许在该<code>inline box</code>里分隔，或如果该<code>inline box</code>受到了一个值为<code>nowrap</code>或者<code>pre</code>的<code>white-space</code>的影响），那么该<code>inline box</code>会从<code>line box</code>溢出</li>
<li>当一个<code>inline box</code>被分割后，<code>margin，border</code>和<code>padding</code>在发生分割的地方（或者在任何分割处，如果有多处的话）不会有可视化效果</li>
<li>同一个<code>line box</code>里的<code>inline box</code>也可能因为双向（bidirectional）文本处理而被分割成几个盒</li>
</ol>
<blockquote>
<p>Line boxes are created as needed to hold inline-level content within an inline formatting context. Line boxes that contain no text, no preserved white space, no inline elements with non-zero margins, padding, or borders, and no other in-flow content (such as images, inline blocks or inline tables), and do not end with a preserved newline must be treated as zero-height line boxes for the purposes of determining the positions of any elements inside of them, and must be treated as not existing for any other purpose.</p>
</blockquote>
<p>需要盛放（hold）一个行内格式化上下文中的行内级内容时，创建一个<code>line box</code>。不含文本、保留空白符（preserved white space）、<code>margin</code>，<code>padding</code>或者<code>border</code>非0的行内元素、其它流内内容（例如，图片，<code>inline block</code>或者<code>inline table</code>），并且不以保留换行符（preserved newline）结束的<code>line box</code>必须被当作一个0高度的<code>line box</code>，为了确定它里面所有元素的位置，而其它时候（for any other purpose）必须当它不存在</p>
<p><a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/visuren.html#inline-formatting" target="_blank" rel="noopener">W3C inline-formatting</a></p>
<h2 id="GFC"><a href="#GFC" class="headerlink" title="GFC"></a>GFC</h2><p>GFC(GridLayout Formatting Contexts)直译为”网格布局格式化上下文”，当为一个元素设置display值为grid的时候，此元素将会获得一个独立的渲染区域，我们可以通过在网格容器（grid container）上定义网格定义行（grid definition rows）和网格定义列（grid definition columns）属性各在网格项目（grid item）上定义网格行（grid row）和网格列（grid columns）为每一个网格项目（grid item）定义位置和空间。 </p>
<p>那么GFC有什么用呢，和table又有什么区别呢？首先同样是一个二维的表格，但GridLayout会有更加丰富的属性来控制行列，控制对齐以及更为精细的渲染语义和控制。</p>
<h2 id="FFC"><a href="#FFC" class="headerlink" title="FFC"></a>FFC</h2><p>FFC(Flex Formatting Contexts)直译为”自适应格式化上下文”，display值为flex或者inline-flex的元素将会生成自适应容器（flex container）.</p>
<p>Flex Box 由伸缩容器和伸缩项目组成。通过设置元素的 display 属性为 flex 或 inline-flex 可以得到一个伸缩容器。设置为 flex 的容器被渲染为一个块级元素，而设置为 inline-flex 的容器则渲染为一个行内元素。</p>
<p>伸缩容器中的每一个子元素都是一个伸缩项目。伸缩项目可以是任意数量的。伸缩容器外和伸缩项目内的一切元素都不受影响。简单地说，Flexbox 定义了伸缩容器内伸缩项目该如何布局。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://segmentfault.com/a/1190000009545742" target="_blank" rel="noopener">BFC与IFC概念理解+布局规则+形成方法+用处</a></li>
<li><a href="https://segmentfault.com/a/1190000009308818" target="_blank" rel="noopener">行内格式化上下文(Inline formatting contexts)</a></li>
<li><a href="https://segmentfault.com/a/1190000004466536" target="_blank" rel="noopener">[译]:BFC与IFC</a></li>
<li><a href="https://www.w3.org/TR/2011/REC-CSS2-20110607/visuren.html#normal-flow" target="_blank" rel="noopener">W3C normal flow</a></li>
<li><a href="http://www.cnblogs.com/dingyufenglian/p/4845477.html" target="_blank" rel="noopener">css3之BFC、IFC、GFC和FFC</a></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>基础</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>理解 float</title>
    <url>/2018/07/24/%E7%90%86%E8%A7%A3-float/</url>
    <content><![CDATA[<h2 id="float-的9条规则"><a href="#float-的9条规则" class="headerlink" title="float 的9条规则"></a>float 的9条规则</h2><p>###　规则1</p>
<blockquote>
<p>原文:The left outer edge of a left-floating box may not be to the left of the left edge of its containing block. An analogous rule holds for right-floating elements.</p>
<p>译文:左浮动的盒子的左边界不会超出容器的左边界，右浮动同理.</p>
</blockquote>
<h3 id="规则2"><a href="#规则2" class="headerlink" title="规则2"></a>规则2</h3><blockquote>
<p>原文:If the current box is left-floating, and there are any left-floating boxes generated by elements earlier in the source document, then for each such earlier box, either the left outer edge of the current box must be to the right of the right outer edge of the earlier box, or its top must be lower than the bottom of the earlier box. Analogous rules hold for right-floating boxes.</p>
<p>译文:如果盒子是左浮动的,那么在html文档中晚出现的左浮动盒子只允许出现在先出现的左浮动盒子的右边或者晚出现的左浮动盒子的顶部必须在早出现左浮动盒子的底部之下。右浮动同理.</p>
</blockquote>
<iframe width="100%" height="300" src="//jsrun.net/GegKp/embedded/html,css,result/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="规则3"><a href="#规则3" class="headerlink" title="规则3"></a>规则3</h3><blockquote>
<p>原文:The right outer edge of a left-floating box may not be to the right of the left outer edge of any right-floating box that is next to it. Analogous rules hold for right-floating elements.</p>
<p>译文:左浮动盒子的右外边缘可能不在其旁边的任何右浮动框的左外边缘的右边，右浮动同理.</p>
</blockquote>
<iframe width="100%" height="300" src="//jsrun.net/5egKp/embedded/html,css,result/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="规则4"><a href="#规则4" class="headerlink" title="规则4"></a>规则4</h3><blockquote>
<p>原文:A floating box’s outer top may not be higher than the top of its containing block. When the float occurs between two collapsing margins, the float is positioned as if it had an otherwise empty anonymous block parent taking part in the flow. The position of such a parent is defined by the rules in the section on margin collapsing.</p>
<p>译文:浮动盒子的顶部不能超出容器的顶部边界</p>
</blockquote>
<h3 id="规则5"><a href="#规则5" class="headerlink" title="规则5"></a>规则5</h3><blockquote>
<p>原文:The outer top of a floating box may not be higher than the outer top of any block or floated box generated by an element earlier in the source document.</p>
<p>译文:浮动盒子的顶部不会超出在html文档中早出现的的块级元素(block)或者是浮动元素的顶部</p>
</blockquote>
<iframe width="100%" height="300" src="//jsrun.net/tegKp/embedded/html,css,result/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="规则6"><a href="#规则6" class="headerlink" title="规则6"></a>规则6</h3><blockquote>
<p>原文:The outer top of an element’s floating box may not be higher than the top of any line-box containing a box generated by an element earlier in the source document.</p>
<p>译文:浮动盒子的顶部不会超出在html文档中早出现的包含盒子的line-box元素顶部</p>
</blockquote>
<iframe width="100%" height="300" src="//jsrun.net/jegKp/embedded/html,css,result/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="规则7"><a href="#规则7" class="headerlink" title="规则7"></a>规则7</h3><blockquote>
<p>原文:A left-floating box that has another left-floating box to its left may not have its right outer edge to the right of its containing block’s right edge. (Loosely: a left float may not stick out at the right edge, unless it is already as far to the left as possible.) An analogous rule holds for right-floating elements.</p>
<p>译文:一个左浮动元素右边的另一个左浮动元素的右边界不会超出容器的右边界,右浮动同理</p>
</blockquote>
<p>如果一行之内要放第二个浮动元素，如果放不下了，那就换行。</p>
<h2 id="规则8"><a href="#规则8" class="headerlink" title="规则8"></a>规则8</h2><blockquote>
<p>原文:A floating box must be placed as high as possible.</p>
<p>译文:一个浮动盒子应该放的尽可能的高</p>
</blockquote>
<h2 id="规则9"><a href="#规则9" class="headerlink" title="规则9"></a>规则9</h2><blockquote>
<p>原文:A left-floating box must be put as far to the left as possible, a right-floating box as far to the right as possible. A higher position is preferred over one that is further to the left/right.</p>
<p>译文:一个左浮动元素应该放的尽可能的靠左，右浮动元素应该被放的尽可能的靠右。当元素既可以放置”最高”又可以”最右”的时候，优先考虑”最高”。</p>
</blockquote>
<iframe width="100%" height="300" src="//jsrun.net/GegKp/embedded/html,css,result/light/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>为什么盒子五不直接放在盒子一下面，这是因为当一个元素既可以放的最左（最右）和最高的时候，优先选择最高，所以这里就放在了盒子四的下面。</p>
<h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>最后说两句，浮动元素其实对在它出现之前的元素影响不大，但是由于浮动是使元素脱离了文档流，那么在浮动元素之后出现的元素：</p>
<ul>
<li>块元素:直接无视浮动元素，该怎么显示就怎么显示，并且会被浮动元素覆盖。</li>
<li>行内元素:行内元素会环绕在浮动元素周围。</li>
</ul>
<h2 id="浮动元素的业界公认特点"><a href="#浮动元素的业界公认特点" class="headerlink" title="浮动元素的业界公认特点"></a>浮动元素的业界公认特点</h2><ol>
<li>元素被视作块级元素，相当于display设置为”block”；</li>
<li>元素具备包裹性，会根据它所包含的元素实现宽度、高度自适应；</li>
<li>浮动元素前后的块级兄弟元素忽视浮动元素的而占据它的位置，并且元素会处在浮动元素的下层（并且无法通过z-index属性改变他们的层叠位置），但它的内部文字和其他行内元素都会环绕浮动元素；</li>
<li>浮动元素前后的行内元素环绕浮动元素排列；</li>
<li>浮动元素之前的元素如果也是浮动元素，且方向相同，它会紧跟在它们后面；父元素宽度不够，换行展示；</li>
<li>浮动元素之间的水平间距不会重叠；</li>
<li>当包含元素中只有浮动元素时，包含元素将会高度塌陷；</li>
<li>浮动元素的父元素的非浮动兄弟元素，忽视浮动元素存在，覆盖浮动元素；</li>
<li>浮动元素的父元素的浮动兄弟元素，会跟随浮动元素布局，仿佛处在同一父元素中。</li>
</ol>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>清除浮动的方法, 主要分为两类</p>
<ul>
<li>利用clear属性清除浮动</li>
<li>利用bfc原理包容浮动</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.w3.org/TR/CSS2/visuren.html#float-rules" target="_blank" rel="noopener">W3 float-rules</a></li>
<li><a href="https://segmentfault.com/a/1190000005925592#articleHeader11" target="_blank" rel="noopener">CSS Float nine rules</a></li>
<li><a href="http://efe.baidu.com/blog/float/" target="_blank" rel="noopener">回归CSS标准之Float</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>float</tag>
      </tags>
  </entry>
  <entry>
    <title>移动页面开发</title>
    <url>/2018/04/02/%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="基于APP的移动页面开发"><a href="#基于APP的移动页面开发" class="headerlink" title="基于APP的移动页面开发"></a>基于APP的移动页面开发</h2><h3 id="如何唤醒app"><a href="#如何唤醒app" class="headerlink" title="如何唤醒app"></a>如何唤醒app</h3><p>URL Scheme：一个可以让app相互之间可以跳转的协议<br>UniversalLink：通过传统http链接来启动app的技术，可以使用相同的网址打开网站和app</p>
<p><a href="https://segmentfault.com/a/1190000005848133" target="_blank" rel="noopener">浏览器中唤起native app</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  _openApp(openUrl, callback) &#123;</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">    iframe.src = openUrl;</span><br><span class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line">    body.appendChlid(iframe);</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      body.removeChild(iframe)</span><br><span class="line">      callback &amp;&amp; callback(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">800</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  appGo(openUrl, downUrl) &#123;</span><br><span class="line">    <span class="keyword">this</span>._openApp(openUrl, (opened) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (opened) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'app awake success'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.href = downUrl</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何和app进行数据交互"><a href="#如何和app进行数据交互" class="headerlink" title="如何和app进行数据交互"></a>如何和app进行数据交互</h3><p>jsBridge</p>
<h2 id="移动端性能优化"><a href="#移动端性能优化" class="headerlink" title="移动端性能优化"></a>移动端性能优化</h2><ol>
<li>首屏优化</li>
<li>白屏时间</li>
<li>可交互时间</li>
<li>完全加载时间</li>
</ol>
<h3 id="定位性能问题"><a href="#定位性能问题" class="headerlink" title="定位性能问题"></a>定位性能问题</h3><p>首屏时间 = DNS时间 + 建立连接时间 + 后端相应时间 + 网络传输时间 + 首屏页面渲染时间</p>
<h2 id="移动端的一些坑"><a href="#移动端的一些坑" class="headerlink" title="移动端的一些坑"></a>移动端的一些坑</h2><h3 id="1px"><a href="#1px" class="headerlink" title="1px"></a>1px</h3><p>用scale</p>
<h3 id="慎用fixed"><a href="#慎用fixed" class="headerlink" title="慎用fixed"></a>慎用fixed</h3><p>使用绝对定位代替</p>
<h3 id="transition闪屏"><a href="#transition闪屏" class="headerlink" title="transition闪屏"></a>transition闪屏</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="comment">/*设置内嵌的元素在 3D 空间如何呈现：保留3D */</span></span><br><span class="line"><span class="attribute">-webkit-transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line"><span class="comment">/* 设置进行转换的元素的背面在面对用户时是否可见：隐藏 */</span></span><br><span class="line"><span class="attribute">-webkit-backface-visibility</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="计时器-暂停"><a href="#计时器-暂停" class="headerlink" title="计时器 暂停"></a>计时器 暂停</h3><ul>
<li>放入后台任务，用websocket进行传输（这是最方便快捷的方法）</li>
<li>把定时器函数里的时间累加逻辑，换成每次都从系统时间获取。</li>
<li>使用监听事件visibilitychange，当监听到离开页面时，使js动画暂停，回来后继续</li>
</ul>
<h3 id="active失效"><a href="#active失效" class="headerlink" title="active失效"></a>active失效</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#000</span>;&#125;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">'touchstart'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="页面滚动"><a href="#页面滚动" class="headerlink" title="页面滚动"></a>页面滚动</h3><p><code>overflow</code>的滚动效果不佳，用<code>-webkit-overflow-scrolling</code>代替<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 当手指从触摸屏上移开，会保持一段时间的滚动 */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">-webkit-overflow-scrolling</span>: touch; &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>网易云课堂</tag>
        <tag>移动端</tag>
      </tags>
  </entry>
</search>
